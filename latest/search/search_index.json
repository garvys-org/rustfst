{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rustfst-python Introduction Rust implementation of Weighted Finite States Transducers. Rustfst is a library for constructing, combining, optimizing, and searching weighted finite-state transducers (FSTs). Weighted finite-state transducers are automata where each transition has an input label, an output label, and a weight. The more familiar finite-state acceptor is represented as a transducer with each transition's input and output label equal. Finite-state acceptors are used to represent sets of strings (specifically, regular or rational sets); finite-state transducers are used to represent binary relations between pairs of strings (specifically, rational transductions). The weights can be used to represent the cost of taking a particular transition. FSTs have key applications in speech recognition and synthesis, machine translation, optical character recognition, pattern matching, string processing, machine learning, information extraction and retrieval among others. Often a weighted transducer is used to represent a probabilistic model (e.g., an n-gram model, pronunciation model). FSTs can be optimized by determinization and minimization, models can be applied to hypothesis sets (also represented as automata) or cascaded by finite-state composition, and the best results can be selected by shortest-path algorithms. Naming rustfst is the Rust re-implementation of Openfst . rustfst-python is a python biding on top of rustfst . References Implementation heavily inspired from Mehryar Mohri's, Cyril Allauzen's and Michael Riley's work : Weighted automata algorithms The design principles of a weighted finite-state transducer library OpenFst: A general and efficient weighted finite-state transducer library Weighted finite-state transducers in speech recognition","title":"Home"},{"location":"#rustfst-python","text":"","title":"rustfst-python"},{"location":"#introduction","text":"Rust implementation of Weighted Finite States Transducers. Rustfst is a library for constructing, combining, optimizing, and searching weighted finite-state transducers (FSTs). Weighted finite-state transducers are automata where each transition has an input label, an output label, and a weight. The more familiar finite-state acceptor is represented as a transducer with each transition's input and output label equal. Finite-state acceptors are used to represent sets of strings (specifically, regular or rational sets); finite-state transducers are used to represent binary relations between pairs of strings (specifically, rational transductions). The weights can be used to represent the cost of taking a particular transition. FSTs have key applications in speech recognition and synthesis, machine translation, optical character recognition, pattern matching, string processing, machine learning, information extraction and retrieval among others. Often a weighted transducer is used to represent a probabilistic model (e.g., an n-gram model, pronunciation model). FSTs can be optimized by determinization and minimization, models can be applied to hypothesis sets (also represented as automata) or cascaded by finite-state composition, and the best results can be selected by shortest-path algorithms.","title":"Introduction"},{"location":"#naming","text":"rustfst is the Rust re-implementation of Openfst . rustfst-python is a python biding on top of rustfst .","title":"Naming"},{"location":"#references","text":"Implementation heavily inspired from Mehryar Mohri's, Cyril Allauzen's and Michael Riley's work : Weighted automata algorithms The design principles of a weighted finite-state transducer library OpenFst: A general and efficient weighted finite-state transducer library Weighted finite-state transducers in speech recognition","title":"References"},{"location":"rustfst/algorithms/","text":"Classes Functions acceptor ( astring : str , symbol_table : SymbolTable , weight : Optional [ float ] = None ) -> VectorFst Creates an acceptor from a string. This function creates a FST which accepts its input with a fixed weight (defaulting to semiring One). Parameters: Name Type Description Default astring str The input string. required weight Optional [ float ] A Weight or weight string indicating the desired path weight. If omitted or null, the path weight is set to semiring One. None symbol_table SymbolTable SymbolTable to be used to encode the string. required Returns: Type Description VectorFst An FST acceptor. Source code in rustfst/algorithms/__init__.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def acceptor ( astring : str , symbol_table : SymbolTable , weight : Optional [ float ] = None ) -> VectorFst : \"\"\" Creates an acceptor from a string. This function creates a FST which accepts its input with a fixed weight (defaulting to semiring One). Args: astring: The input string. weight: A Weight or weight string indicating the desired path weight. If omitted or null, the path weight is set to semiring One. symbol_table: SymbolTable to be used to encode the string. Returns: An FST acceptor. \"\"\" if weight is None : weight = weight_one () acceptor_fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . utils_string_to_acceptor ( astring . encode ( \"utf-8\" ), symbol_table . ptr , ctypes . c_float ( weight ), ctypes . byref ( acceptor_fst_ptr ), ) err_msg = \"Error creating acceptor FST\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = acceptor_fst_ptr ) transducer ( istring : str , ostring : str , isymt : SymbolTable , osymt : SymbolTable , weight : Optional [ float ] = None ) -> VectorFst Creates a transducer from a pair of strings or acceptor FSTs. This function creates a FST which transduces from the first string to the second with a fixed weight (defaulting to semiring One). Parameters: Name Type Description Default istring str The input string required ostring str The output string required weight Optional [ float ] A Weight as float. None isymt SymbolTable SymbolTable to be used to encode the string. required osymt SymbolTable SymbolTable to be used to encode the string. required Returns: Type Description VectorFst An FST transducer. Source code in rustfst/algorithms/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def transducer ( istring : str , ostring : str , isymt : SymbolTable , osymt : SymbolTable , weight : Optional [ float ] = None , ) -> VectorFst : \"\"\" Creates a transducer from a pair of strings or acceptor FSTs. This function creates a FST which transduces from the first string to the second with a fixed weight (defaulting to semiring One). Args: istring: The input string ostring: The output string weight: A Weight as float. isymt: SymbolTable to be used to encode the string. osymt: SymbolTable to be used to encode the string. Returns: An FST transducer. \"\"\" if weight is None : weight = weight_one () transducer_fst_ptr = ctypes . c_void_p () ret_code = lib . utils_string_to_transducer ( istring . encode ( \"utf-8\" ), ostring . encode ( \"utf-8\" ), isymt . ptr , osymt . ptr , ctypes . c_float ( weight ), ctypes . byref ( transducer_fst_ptr ), ) err_msg = \"Error creating tranducer FST\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = transducer_fst_ptr ) epsilon_machine ( weight : Optional [ float ] = None ) -> VectorFst Constructs a single-state, no-arc FST accepting epsilon. This function creates an unweighted FST with a single state which is both initial and final. Parameters: Name Type Description Default weight Optional [ float ] A Weight. Default semiring One. None Returns: Type Description VectorFst An FST. Source code in rustfst/algorithms/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def epsilon_machine ( weight : Optional [ float ] = None ) -> VectorFst : \"\"\" Constructs a single-state, no-arc FST accepting epsilon. This function creates an unweighted FST with a single state which is both initial and final. Args: weight: A Weight. Default semiring One. Returns: An FST. \"\"\" if weight is None : weight = weight_one () fst = VectorFst () state = fst . add_state () fst . set_start ( state ) fst . set_final ( state , weight ) return fst Modules connect Classes Functions connect ( fst : VectorFst ) -> VectorFst This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input : Output : Returns fst Source code in rustfst/algorithms/connect.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def connect ( fst : VectorFst ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input : ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output : ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns : fst \"\"\" ret_code = lib . fst_connect ( fst . ptr ) err_msg = \"Error during connect\" check_ffi_error ( ret_code , err_msg ) return fst optimize Classes Functions optimize ( fst : VectorFst ) Optimize an fst in-place Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 13 14 15 16 17 18 19 20 21 def optimize ( fst : VectorFst ): \"\"\" Optimize an fst in-place Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize ( fst . ptr ) err_msg = \"Error during optimize\" check_ffi_error ( ret_code , err_msg ) optimize_in_log ( fst : VectorFst ) Optimize an fst in-place in the log semiring. Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 24 25 26 27 28 29 30 31 32 def optimize_in_log ( fst : VectorFst ): \"\"\" Optimize an fst in-place in the log semiring. Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize_in_log ( ctypes . byref ( fst . ptr )) err_msg = \"Error during optimize_in_log\" check_ffi_error ( ret_code , err_msg ) top_sort Classes Functions top_sort ( fst : VectorFst ) -> VectorFst This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Parameters: Name Type Description Default fst VectorFst Fst to top_sort. required Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/algorithms/top_sort.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def top_sort ( fst : VectorFst ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Args: fst: Fst to top_sort. Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" top_sorted_fst = ctypes . c_void_p () ret_code = lib . fst_top_sort ( fst . ptr , ctypes . byref ( top_sorted_fst )) err_msg = \"Error during top_sort\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = top_sorted_fst ) tr_sort Classes Functions tr_sort ( fst : VectorFst , ilabel_cmp : bool ) tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool Source code in rustfst/algorithms/tr_sort.py 11 12 13 14 15 16 17 18 19 20 21 def tr_sort ( fst : VectorFst , ilabel_cmp : bool ): \"\"\" tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool \"\"\" ret_code = lib . fst_tr_sort ( fst . ptr , ctypes . c_bool ( ilabel_cmp )) err_msg = \"Error during tr_sort\" check_ffi_error ( ret_code , err_msg ) rm_epsilon Classes Functions rm_epsilon ( fst : VectorFst ) -> VectorFst Return an equivalent FST with epsilon transitions removed. Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/algorithms/rm_epsilon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def rm_epsilon ( fst : VectorFst ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Args: fst: Fst Returns: Newly created FST with epsilon transitions removed. \"\"\" rm_epsilon_fst = ctypes . c_void_p () ret_code = lib . fst_rm_epsilon ( fst . ptr , ctypes . byref ( rm_epsilon_fst )) err_msg = \"Error during rm_epsilon\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = rm_epsilon_fst ) project Classes ProjectType Bases: Enum Different types of labels projection in a Fst. Source code in rustfst/algorithms/project.py 12 13 14 15 16 17 18 19 20 21 22 23 24 class ProjectType ( Enum ): \"\"\" Different types of labels projection in a Fst. \"\"\" PROJECT_INPUT = 0 \"\"\" Input projection : output labels are replaced with input ones. \"\"\" PROJECT_OUTPUT = 1 \"\"\" Output projection : input labels are replaced with output ones. \"\"\" Attributes PROJECT_INPUT = 0 class-attribute Input projection : output labels are replaced with input ones. PROJECT_OUTPUT = 1 class-attribute Output projection : input labels are replaced with output ones. Functions project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default fst VectorFst Fst on which to apply the algorithm. required proj_type ProjectType Whether to replace input labels or output labels. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/project.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: fst: Fst on which to apply the algorithm. proj_type: Whether to replace input labels or output labels. Returns: The resulting Fst. \"\"\" config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_project_type_new ( ctypes . c_size_t ( proj_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating ProjectType\" check_ffi_error ( ret_code , err_msg ) ret_code = lib . fst_project ( fst . ptr , config ) err_msg = \"Error during projection\" check_ffi_error ( ret_code , err_msg ) return fst minimize Classes MinimizeConfig Configuration for the minimization operation. Source code in rustfst/algorithms/minimize.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class MinimizeConfig : \"\"\" Configuration for the minimization operation. \"\"\" def __init__ ( self , delta = None , allow_nondet = False ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_minimize_config_new ( ctypes . c_float ( delta ), ctypes . c_bool ( allow_nondet ), ctypes . byref ( config ), ) err_msg = \"Error creating MinimizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions minimize ( fst : VectorFst ) -> VectorFst Minimize an FST in-place Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst fst Source code in rustfst/algorithms/minimize.py 32 33 34 35 36 37 38 39 40 41 42 43 44 def minimize ( fst : VectorFst ) -> VectorFst : \"\"\" Minimize an FST in-place Params: fst: Fst Returns: fst \"\"\" ret_code = lib . fst_minimize ( fst . ptr ) err_msg = \"Error while minimizing FST\" check_ffi_error ( ret_code , err_msg ) return fst minimize_with_config ( fst : VectorFst , config : MinimizeConfig ) -> VectorFst Minimize an FST in-place Parameters: Name Type Description Default fst VectorFst Fst required config MinimizeConfig Configuration required Returns: Type Description VectorFst fst Source code in rustfst/algorithms/minimize.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def minimize_with_config ( fst : VectorFst , config : MinimizeConfig ) -> VectorFst : \"\"\" Minimize an FST in-place Params: fst: Fst config: Configuration Returns: fst \"\"\" ret_code = lib . fst_minimize_with_config ( fst . ptr , config . ptr ) err_msg = \"Error while minimizing FST\" check_ffi_error ( ret_code , err_msg ) return fst isomorphic Classes Functions isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool Check if two Fsts are isomorphic. Parameters: Name Type Description Default fst VectorFst First Fst. required other_fst VectorFst Second Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/algorithms/isomorphic.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool : \"\"\" Check if two Fsts are isomorphic. Args: fst: First Fst. other_fst: Second Fst. Returns: Whether both Fsts are equal. \"\"\" is_isomorphic = ctypes . c_size_t () ret_code = lib . fst_isomorphic ( fst . ptr , other_fst . ptr , ctypes . byref ( is_isomorphic )) err_msg = \"Error checking isomorphic FSTs\" check_ffi_error ( ret_code , err_msg ) return bool ( is_isomorphic . value ) reverse Classes Functions reverse ( fst : VectorFst ) -> VectorFst Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with inverse , which does something totally different! Parameters: Name Type Description Default fst VectorFst Fst to reverse required Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/algorithms/reverse.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def reverse ( fst : VectorFst ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with `inverse`, which does something totally different! Args: fst: Fst to reverse Returns: Newly created, reversed Fst. \"\"\" reversed_fst = ctypes . c_void_p () ret_code = lib . fst_reverse ( fst . ptr , ctypes . byref ( reversed_fst )) err_msg = \"Error during reverse\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = reversed_fst ) replace Classes Functions replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_idx int required fst_list List [ Tuple [ int , VectorFst ]] required epsilon_on_replace bool required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/replace.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst : \"\"\" Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_idx: fst_list: epsilon_on_replace: Returns: The resulting Fst. \"\"\" pairs = [ LabelFstPair ( label , fst . ptr ) for ( label , fst ) in fst_list ] pairs_array = ( LabelFstPair * len ( pairs ))( * pairs ) res_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_replace ( ctypes . c_size_t ( root_idx ), ctypes . byref ( pairs_array ), ctypes . c_size_t ( len ( pairs )), ctypes . c_bool ( epsilon_on_replace ), ctypes . byref ( res_fst ), ) err_msg = \"Error performing replace\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = res_fst ) determinize Classes DeterminizeType Bases: Enum Enumeration defining the type of the determinization to perform. Source code in rustfst/algorithms/determinize.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class DeterminizeType ( Enum ): \"\"\" Enumeration defining the type of the determinization to perform. \"\"\" DETERMINIZE_FUNCTIONAL = 0 \"\"\" Input transducer is known to be functional (or error). \"\"\" DETERMINIZE_NON_FUNCTIONAL = 1 \"\"\" Input transducer is NOT known to be functional. \"\"\" DETERMINIZE_DISAMBIGUATE = 2 \"\"\" Input transducer is not known to be functional but only keep the min of of ambiguous outputs. \"\"\" Attributes DETERMINIZE_FUNCTIONAL = 0 class-attribute Input transducer is known to be functional (or error). DETERMINIZE_NON_FUNCTIONAL = 1 class-attribute Input transducer is NOT known to be functional. DETERMINIZE_DISAMBIGUATE = 2 class-attribute Input transducer is not known to be functional but only keep the min of of ambiguous outputs. DeterminizeConfig Struct containing the parameters controlling the determinization algorithm. Source code in rustfst/algorithms/determinize.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class DeterminizeConfig : \"\"\" Struct containing the parameters controlling the determinization algorithm. \"\"\" def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions __init__ ( det_type : DeterminizeType , delta : Optional [ float ] = None ) Creates the configuration object. Parameters: Name Type Description Default det_type DeterminizeType Type of determinization to perform. required delta Optional [ float ] None Source code in rustfst/algorithms/determinize.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions determinize ( fst : VectorFst ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def determinize ( fst : VectorFst ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize ( fst . ptr , ctypes . byref ( det_fst )) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst ) determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required config DeterminizeConfig Configuration of the determinization algorithm to use. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. config: Configuration of the determinization algorithm to use. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_with_config ( fst . ptr , config . ptr , ctypes . byref ( det_fst ) ) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst ) tr_unique Classes Functions tr_unique ( fst : VectorFst ) Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Parameters: Name Type Description Default fst VectorFst Fst to modify required Source code in rustfst/algorithms/tr_unique.py 10 11 12 13 14 15 16 17 18 19 20 def tr_unique ( fst : VectorFst ): \"\"\" Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Args: fst: Fst to modify \"\"\" ret_code = lib . fst_tr_unique ( fst . ptr ) err_msg = \"Error during tr_unique\" check_ffi_error ( ret_code , err_msg ) compose Classes ComposeConfig Configuration for compose operation. Parameters: Name Type Description Default compose_filter ComposeFilter Filter which determines allowable matches during composition operation. ComposeFilter.AUTOFILTER connect bool Connect the resulting FST after composition. True matcher1_config Optional [ MatcherConfig ] Matcher configuration for left-hand FST. None matcher2_config Optional [ MatcherConfig ] Matcher configuration for right-hand FST. None Source code in rustfst/algorithms/compose.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ComposeConfig : \"\"\" Configuration for compose operation. Args: compose_filter: Filter which determines allowable matches during composition operation. connect: Connect the resulting FST after composition. matcher1_config: Matcher configuration for left-hand FST. matcher2_config: Matcher configuration for right-hand FST. \"\"\" def __init__ ( self , compose_filter : ComposeFilter = ComposeFilter . AUTOFILTER , connect : bool = True , matcher1_config : Optional [ MatcherConfig ] = None , matcher2_config : Optional [ MatcherConfig ] = None , ): config = ctypes . pointer ( ctypes . c_void_p ()) m1_ptr = None if matcher1_config is not None : m1_ptr = matcher1_config . ptr m2_ptr = None if matcher2_config is not None : m2_ptr = matcher2_config . ptr ret_code = lib . fst_compose_config_new ( ctypes . c_size_t ( compose_filter . value ), ctypes . c_bool ( connect ), m1_ptr , m2_ptr , ctypes . byref ( config ), ) err_msg = \"Error creating ComposeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config def __del__ ( self ): lib . fst_compose_config_destroy ( self . ptr ) Functions compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Compute the composition of two FSTs. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the composition of two FSTs. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose ( fst . ptr , other_fst . ptr , ctypes . byref ( composition )) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition ) compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst Compute the composition of two FSTs parametrized with a config. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required config ComposeConfig Config parameters of the composition. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst : \"\"\" Compute the composition of two FSTs parametrized with a config. Args: fst: Left fst. other_fst: Right fst. config: Config parameters of the composition. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose_with_config ( fst . ptr , other_fst . ptr , config . ptr , ctypes . byref ( composition ) ) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition ) union Classes Functions union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default fst VectorFst required other_fst VectorFst required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: fst: other_fst: Returns: The resulting Fst. \"\"\" ret_code = lib . fst_union ( fst . ptr , other_fst . ptr ) err_msg = \"Error during union\" check_ffi_error ( ret_code , err_msg ) return fst union_list ( fsts : List [ VectorFst ]) -> VectorFst Computes the union of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] The list of Fsts to produce the union. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def union_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Computes the union of a list of Fsts. Args: fsts: The list of Fsts to produce the union. Returns: The resulting Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] res_fst = fsts [ 0 ] for f in fsts [ 1 :]: res_fst = union ( res_fst , f ) return res_fst concat Classes Functions concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Compute the concatenation of two Fsts. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/concat.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the concatenation of two Fsts. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" ret_code = lib . fst_concat ( fst . ptr , other_fst . ptr ) err_msg = \"Error during concat\" check_ffi_error ( ret_code , err_msg ) return fst concat_list ( fsts : List [ VectorFst ]) -> VectorFst Compute the concatenation of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] List of Fsts to concatenated required Returns: Type Description VectorFst The resulting concatenated Fst. Source code in rustfst/algorithms/concat.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def concat_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Compute the concatenation of a list of Fsts. Args: fsts: List of Fsts to concatenated Returns: The resulting concatenated Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] concatenated = fsts [ 0 ] for f in fsts [ 1 :]: concatenated = concatenated . concat ( f ) return concatenated shortest_path Classes ShortestPathConfig Configuration for shortest-path operation. Parameters: Name Type Description Default nshortest int Number of shortest paths to return 1 unique bool Return only unique label sequences False delta Union [ float , None] Difference in weights considered significant None Source code in rustfst/algorithms/shortest_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ShortestPathConfig : \"\"\" Configuration for shortest-path operation. Args: nshortest: Number of shortest paths to return unique: Return only unique label sequences delta: Difference in weights considered significant \"\"\" def __init__ ( self , nshortest : int = 1 , unique : bool = False , delta : Union [ float , None ] = None ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_shortest_path_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( nshortest ), ctypes . c_bool ( unique ), ctypes . byref ( config ), ) err_msg = \"Error creating ShortestPathConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions shortestpath ( fst : VectorFst ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def shortestpath ( fst : VectorFst ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path ( fst . ptr , ctypes . byref ( shortest_path )) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path ) shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required config ShortestPathConfig Configuration for shortest-path operation. required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path_with_config ( fst . ptr , config . ptr , ctypes . byref ( shortest_path ) ) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path ) randgen Classes Functions randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = 'uniform' , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False ) -> VectorFst Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the select argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Parameters: Name Type Description Default ifst Fst The input FST. required npath int The number of random paths to generate. 1 seed int An optional seed value for random path generation; if zero, the current time and process ID is used. 0 select str A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". 'uniform' max_length int The maximum length of each random path. 2147483647 weight bool Should the output be weighted by path count? False remove_total_weight bool Should the total weight be removed (ignored when weighted is False)? False Returns: Type Description VectorFst An FST containing one or more random paths. Raises: Type Description ValueError when something wrong happened. Source code in rustfst/algorithms/randgen.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = \"uniform\" , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False , ) -> VectorFst : \"\"\" Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the `select` argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Args: ifst: The input FST. npath: The number of random paths to generate. seed: An optional seed value for random path generation; if zero, the current time and process ID is used. select: A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". max_length: The maximum length of each random path. weight: Should the output be weighted by path count? remove_total_weight: Should the total weight be removed (ignored when `weighted` is False)? Returns: An FST containing one or more random paths. Raises: ValueError: when something wrong happened. \"\"\" if select != \"uniform\" : raise ValueError ( f \"Only the uniform distribution is supported for now. Found { select } \" ) npath = ctypes . c_size_t ( npath ) seed = ctypes . c_size_t ( seed ) max_length = ctypes . c_size_t ( max_length ) weight = ctypes . c_bool ( weight ) remove_total_weight = ctypes . c_bool ( remove_total_weight ) randgen_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_randgen ( ifst . ptr , npath , seed , max_length , weight , remove_total_weight , ctypes . byref ( randgen_fst ), ) err_msg = \"Error during randgen\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = randgen_fst )","title":"algorithms"},{"location":"rustfst/algorithms/#rustfst.algorithms-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.acceptor","text":"Creates an acceptor from a string. This function creates a FST which accepts its input with a fixed weight (defaulting to semiring One). Parameters: Name Type Description Default astring str The input string. required weight Optional [ float ] A Weight or weight string indicating the desired path weight. If omitted or null, the path weight is set to semiring One. None symbol_table SymbolTable SymbolTable to be used to encode the string. required Returns: Type Description VectorFst An FST acceptor. Source code in rustfst/algorithms/__init__.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def acceptor ( astring : str , symbol_table : SymbolTable , weight : Optional [ float ] = None ) -> VectorFst : \"\"\" Creates an acceptor from a string. This function creates a FST which accepts its input with a fixed weight (defaulting to semiring One). Args: astring: The input string. weight: A Weight or weight string indicating the desired path weight. If omitted or null, the path weight is set to semiring One. symbol_table: SymbolTable to be used to encode the string. Returns: An FST acceptor. \"\"\" if weight is None : weight = weight_one () acceptor_fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . utils_string_to_acceptor ( astring . encode ( \"utf-8\" ), symbol_table . ptr , ctypes . c_float ( weight ), ctypes . byref ( acceptor_fst_ptr ), ) err_msg = \"Error creating acceptor FST\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = acceptor_fst_ptr )","title":"acceptor()"},{"location":"rustfst/algorithms/#rustfst.algorithms.transducer","text":"Creates a transducer from a pair of strings or acceptor FSTs. This function creates a FST which transduces from the first string to the second with a fixed weight (defaulting to semiring One). Parameters: Name Type Description Default istring str The input string required ostring str The output string required weight Optional [ float ] A Weight as float. None isymt SymbolTable SymbolTable to be used to encode the string. required osymt SymbolTable SymbolTable to be used to encode the string. required Returns: Type Description VectorFst An FST transducer. Source code in rustfst/algorithms/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def transducer ( istring : str , ostring : str , isymt : SymbolTable , osymt : SymbolTable , weight : Optional [ float ] = None , ) -> VectorFst : \"\"\" Creates a transducer from a pair of strings or acceptor FSTs. This function creates a FST which transduces from the first string to the second with a fixed weight (defaulting to semiring One). Args: istring: The input string ostring: The output string weight: A Weight as float. isymt: SymbolTable to be used to encode the string. osymt: SymbolTable to be used to encode the string. Returns: An FST transducer. \"\"\" if weight is None : weight = weight_one () transducer_fst_ptr = ctypes . c_void_p () ret_code = lib . utils_string_to_transducer ( istring . encode ( \"utf-8\" ), ostring . encode ( \"utf-8\" ), isymt . ptr , osymt . ptr , ctypes . c_float ( weight ), ctypes . byref ( transducer_fst_ptr ), ) err_msg = \"Error creating tranducer FST\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = transducer_fst_ptr )","title":"transducer()"},{"location":"rustfst/algorithms/#rustfst.algorithms.epsilon_machine","text":"Constructs a single-state, no-arc FST accepting epsilon. This function creates an unweighted FST with a single state which is both initial and final. Parameters: Name Type Description Default weight Optional [ float ] A Weight. Default semiring One. None Returns: Type Description VectorFst An FST. Source code in rustfst/algorithms/__init__.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def epsilon_machine ( weight : Optional [ float ] = None ) -> VectorFst : \"\"\" Constructs a single-state, no-arc FST accepting epsilon. This function creates an unweighted FST with a single state which is both initial and final. Args: weight: A Weight. Default semiring One. Returns: An FST. \"\"\" if weight is None : weight = weight_one () fst = VectorFst () state = fst . add_state () fst . set_start ( state ) fst . set_final ( state , weight ) return fst","title":"epsilon_machine()"},{"location":"rustfst/algorithms/#rustfst.algorithms-modules","text":"","title":"Modules"},{"location":"rustfst/algorithms/#rustfst.algorithms.connect","text":"","title":"connect"},{"location":"rustfst/algorithms/#rustfst.algorithms.connect-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.connect-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.connect.connect","text":"This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input : Output : Returns fst Source code in rustfst/algorithms/connect.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def connect ( fst : VectorFst ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input : ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output : ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns : fst \"\"\" ret_code = lib . fst_connect ( fst . ptr ) err_msg = \"Error during connect\" check_ffi_error ( ret_code , err_msg ) return fst","title":"connect()"},{"location":"rustfst/algorithms/#rustfst.algorithms.optimize","text":"","title":"optimize"},{"location":"rustfst/algorithms/#rustfst.algorithms.optimize-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.optimize-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.optimize.optimize","text":"Optimize an fst in-place Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 13 14 15 16 17 18 19 20 21 def optimize ( fst : VectorFst ): \"\"\" Optimize an fst in-place Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize ( fst . ptr ) err_msg = \"Error during optimize\" check_ffi_error ( ret_code , err_msg )","title":"optimize()"},{"location":"rustfst/algorithms/#rustfst.algorithms.optimize.optimize_in_log","text":"Optimize an fst in-place in the log semiring. Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 24 25 26 27 28 29 30 31 32 def optimize_in_log ( fst : VectorFst ): \"\"\" Optimize an fst in-place in the log semiring. Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize_in_log ( ctypes . byref ( fst . ptr )) err_msg = \"Error during optimize_in_log\" check_ffi_error ( ret_code , err_msg )","title":"optimize_in_log()"},{"location":"rustfst/algorithms/#rustfst.algorithms.top_sort","text":"","title":"top_sort"},{"location":"rustfst/algorithms/#rustfst.algorithms.top_sort-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.top_sort-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.top_sort.top_sort","text":"This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Parameters: Name Type Description Default fst VectorFst Fst to top_sort. required Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/algorithms/top_sort.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def top_sort ( fst : VectorFst ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Args: fst: Fst to top_sort. Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" top_sorted_fst = ctypes . c_void_p () ret_code = lib . fst_top_sort ( fst . ptr , ctypes . byref ( top_sorted_fst )) err_msg = \"Error during top_sort\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = top_sorted_fst )","title":"top_sort()"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_sort","text":"","title":"tr_sort"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_sort-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_sort-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_sort.tr_sort","text":"tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool Source code in rustfst/algorithms/tr_sort.py 11 12 13 14 15 16 17 18 19 20 21 def tr_sort ( fst : VectorFst , ilabel_cmp : bool ): \"\"\" tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool \"\"\" ret_code = lib . fst_tr_sort ( fst . ptr , ctypes . c_bool ( ilabel_cmp )) err_msg = \"Error during tr_sort\" check_ffi_error ( ret_code , err_msg )","title":"tr_sort()"},{"location":"rustfst/algorithms/#rustfst.algorithms.rm_epsilon","text":"","title":"rm_epsilon"},{"location":"rustfst/algorithms/#rustfst.algorithms.rm_epsilon-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.rm_epsilon-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.rm_epsilon.rm_epsilon","text":"Return an equivalent FST with epsilon transitions removed. Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/algorithms/rm_epsilon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def rm_epsilon ( fst : VectorFst ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Args: fst: Fst Returns: Newly created FST with epsilon transitions removed. \"\"\" rm_epsilon_fst = ctypes . c_void_p () ret_code = lib . fst_rm_epsilon ( fst . ptr , ctypes . byref ( rm_epsilon_fst )) err_msg = \"Error during rm_epsilon\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = rm_epsilon_fst )","title":"rm_epsilon()"},{"location":"rustfst/algorithms/#rustfst.algorithms.project","text":"","title":"project"},{"location":"rustfst/algorithms/#rustfst.algorithms.project-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.project.ProjectType","text":"Bases: Enum Different types of labels projection in a Fst. Source code in rustfst/algorithms/project.py 12 13 14 15 16 17 18 19 20 21 22 23 24 class ProjectType ( Enum ): \"\"\" Different types of labels projection in a Fst. \"\"\" PROJECT_INPUT = 0 \"\"\" Input projection : output labels are replaced with input ones. \"\"\" PROJECT_OUTPUT = 1 \"\"\" Output projection : input labels are replaced with output ones. \"\"\" Attributes PROJECT_INPUT = 0 class-attribute Input projection : output labels are replaced with input ones. PROJECT_OUTPUT = 1 class-attribute Output projection : input labels are replaced with output ones.","title":"ProjectType"},{"location":"rustfst/algorithms/#rustfst.algorithms.project-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.project.project","text":"Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default fst VectorFst Fst on which to apply the algorithm. required proj_type ProjectType Whether to replace input labels or output labels. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/project.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: fst: Fst on which to apply the algorithm. proj_type: Whether to replace input labels or output labels. Returns: The resulting Fst. \"\"\" config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_project_type_new ( ctypes . c_size_t ( proj_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating ProjectType\" check_ffi_error ( ret_code , err_msg ) ret_code = lib . fst_project ( fst . ptr , config ) err_msg = \"Error during projection\" check_ffi_error ( ret_code , err_msg ) return fst","title":"project()"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize","text":"","title":"minimize"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize.MinimizeConfig","text":"Configuration for the minimization operation. Source code in rustfst/algorithms/minimize.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class MinimizeConfig : \"\"\" Configuration for the minimization operation. \"\"\" def __init__ ( self , delta = None , allow_nondet = False ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_minimize_config_new ( ctypes . c_float ( delta ), ctypes . c_bool ( allow_nondet ), ctypes . byref ( config ), ) err_msg = \"Error creating MinimizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"MinimizeConfig"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize.minimize","text":"Minimize an FST in-place Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst fst Source code in rustfst/algorithms/minimize.py 32 33 34 35 36 37 38 39 40 41 42 43 44 def minimize ( fst : VectorFst ) -> VectorFst : \"\"\" Minimize an FST in-place Params: fst: Fst Returns: fst \"\"\" ret_code = lib . fst_minimize ( fst . ptr ) err_msg = \"Error while minimizing FST\" check_ffi_error ( ret_code , err_msg ) return fst","title":"minimize()"},{"location":"rustfst/algorithms/#rustfst.algorithms.minimize.minimize_with_config","text":"Minimize an FST in-place Parameters: Name Type Description Default fst VectorFst Fst required config MinimizeConfig Configuration required Returns: Type Description VectorFst fst Source code in rustfst/algorithms/minimize.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def minimize_with_config ( fst : VectorFst , config : MinimizeConfig ) -> VectorFst : \"\"\" Minimize an FST in-place Params: fst: Fst config: Configuration Returns: fst \"\"\" ret_code = lib . fst_minimize_with_config ( fst . ptr , config . ptr ) err_msg = \"Error while minimizing FST\" check_ffi_error ( ret_code , err_msg ) return fst","title":"minimize_with_config()"},{"location":"rustfst/algorithms/#rustfst.algorithms.isomorphic","text":"","title":"isomorphic"},{"location":"rustfst/algorithms/#rustfst.algorithms.isomorphic-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.isomorphic-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.isomorphic.isomorphic","text":"Check if two Fsts are isomorphic. Parameters: Name Type Description Default fst VectorFst First Fst. required other_fst VectorFst Second Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/algorithms/isomorphic.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool : \"\"\" Check if two Fsts are isomorphic. Args: fst: First Fst. other_fst: Second Fst. Returns: Whether both Fsts are equal. \"\"\" is_isomorphic = ctypes . c_size_t () ret_code = lib . fst_isomorphic ( fst . ptr , other_fst . ptr , ctypes . byref ( is_isomorphic )) err_msg = \"Error checking isomorphic FSTs\" check_ffi_error ( ret_code , err_msg ) return bool ( is_isomorphic . value )","title":"isomorphic()"},{"location":"rustfst/algorithms/#rustfst.algorithms.reverse","text":"","title":"reverse"},{"location":"rustfst/algorithms/#rustfst.algorithms.reverse-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.reverse-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.reverse.reverse","text":"Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with inverse , which does something totally different! Parameters: Name Type Description Default fst VectorFst Fst to reverse required Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/algorithms/reverse.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def reverse ( fst : VectorFst ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with `inverse`, which does something totally different! Args: fst: Fst to reverse Returns: Newly created, reversed Fst. \"\"\" reversed_fst = ctypes . c_void_p () ret_code = lib . fst_reverse ( fst . ptr , ctypes . byref ( reversed_fst )) err_msg = \"Error during reverse\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = reversed_fst )","title":"reverse()"},{"location":"rustfst/algorithms/#rustfst.algorithms.replace","text":"","title":"replace"},{"location":"rustfst/algorithms/#rustfst.algorithms.replace-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.replace-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.replace.replace","text":"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_idx int required fst_list List [ Tuple [ int , VectorFst ]] required epsilon_on_replace bool required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/replace.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst : \"\"\" Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_idx: fst_list: epsilon_on_replace: Returns: The resulting Fst. \"\"\" pairs = [ LabelFstPair ( label , fst . ptr ) for ( label , fst ) in fst_list ] pairs_array = ( LabelFstPair * len ( pairs ))( * pairs ) res_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_replace ( ctypes . c_size_t ( root_idx ), ctypes . byref ( pairs_array ), ctypes . c_size_t ( len ( pairs )), ctypes . c_bool ( epsilon_on_replace ), ctypes . byref ( res_fst ), ) err_msg = \"Error performing replace\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = res_fst )","title":"replace()"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize","text":"","title":"determinize"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize.DeterminizeType","text":"Bases: Enum Enumeration defining the type of the determinization to perform. Source code in rustfst/algorithms/determinize.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class DeterminizeType ( Enum ): \"\"\" Enumeration defining the type of the determinization to perform. \"\"\" DETERMINIZE_FUNCTIONAL = 0 \"\"\" Input transducer is known to be functional (or error). \"\"\" DETERMINIZE_NON_FUNCTIONAL = 1 \"\"\" Input transducer is NOT known to be functional. \"\"\" DETERMINIZE_DISAMBIGUATE = 2 \"\"\" Input transducer is not known to be functional but only keep the min of of ambiguous outputs. \"\"\" Attributes DETERMINIZE_FUNCTIONAL = 0 class-attribute Input transducer is known to be functional (or error). DETERMINIZE_NON_FUNCTIONAL = 1 class-attribute Input transducer is NOT known to be functional. DETERMINIZE_DISAMBIGUATE = 2 class-attribute Input transducer is not known to be functional but only keep the min of of ambiguous outputs.","title":"DeterminizeType"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize.DeterminizeConfig","text":"Struct containing the parameters controlling the determinization algorithm. Source code in rustfst/algorithms/determinize.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class DeterminizeConfig : \"\"\" Struct containing the parameters controlling the determinization algorithm. \"\"\" def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions __init__ ( det_type : DeterminizeType , delta : Optional [ float ] = None ) Creates the configuration object. Parameters: Name Type Description Default det_type DeterminizeType Type of determinization to perform. required delta Optional [ float ] None Source code in rustfst/algorithms/determinize.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"DeterminizeConfig"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize.determinize","text":"Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def determinize ( fst : VectorFst ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize ( fst . ptr , ctypes . byref ( det_fst )) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst )","title":"determinize()"},{"location":"rustfst/algorithms/#rustfst.algorithms.determinize.determinize_with_config","text":"Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required config DeterminizeConfig Configuration of the determinization algorithm to use. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. config: Configuration of the determinization algorithm to use. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_with_config ( fst . ptr , config . ptr , ctypes . byref ( det_fst ) ) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst )","title":"determinize_with_config()"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_unique","text":"","title":"tr_unique"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_unique-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_unique-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.tr_unique.tr_unique","text":"Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Parameters: Name Type Description Default fst VectorFst Fst to modify required Source code in rustfst/algorithms/tr_unique.py 10 11 12 13 14 15 16 17 18 19 20 def tr_unique ( fst : VectorFst ): \"\"\" Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Args: fst: Fst to modify \"\"\" ret_code = lib . fst_tr_unique ( fst . ptr ) err_msg = \"Error during tr_unique\" check_ffi_error ( ret_code , err_msg )","title":"tr_unique()"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose","text":"","title":"compose"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose.ComposeConfig","text":"Configuration for compose operation. Parameters: Name Type Description Default compose_filter ComposeFilter Filter which determines allowable matches during composition operation. ComposeFilter.AUTOFILTER connect bool Connect the resulting FST after composition. True matcher1_config Optional [ MatcherConfig ] Matcher configuration for left-hand FST. None matcher2_config Optional [ MatcherConfig ] Matcher configuration for right-hand FST. None Source code in rustfst/algorithms/compose.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ComposeConfig : \"\"\" Configuration for compose operation. Args: compose_filter: Filter which determines allowable matches during composition operation. connect: Connect the resulting FST after composition. matcher1_config: Matcher configuration for left-hand FST. matcher2_config: Matcher configuration for right-hand FST. \"\"\" def __init__ ( self , compose_filter : ComposeFilter = ComposeFilter . AUTOFILTER , connect : bool = True , matcher1_config : Optional [ MatcherConfig ] = None , matcher2_config : Optional [ MatcherConfig ] = None , ): config = ctypes . pointer ( ctypes . c_void_p ()) m1_ptr = None if matcher1_config is not None : m1_ptr = matcher1_config . ptr m2_ptr = None if matcher2_config is not None : m2_ptr = matcher2_config . ptr ret_code = lib . fst_compose_config_new ( ctypes . c_size_t ( compose_filter . value ), ctypes . c_bool ( connect ), m1_ptr , m2_ptr , ctypes . byref ( config ), ) err_msg = \"Error creating ComposeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config def __del__ ( self ): lib . fst_compose_config_destroy ( self . ptr )","title":"ComposeConfig"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose.compose","text":"Compute the composition of two FSTs. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the composition of two FSTs. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose ( fst . ptr , other_fst . ptr , ctypes . byref ( composition )) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition )","title":"compose()"},{"location":"rustfst/algorithms/#rustfst.algorithms.compose.compose_with_config","text":"Compute the composition of two FSTs parametrized with a config. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required config ComposeConfig Config parameters of the composition. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst : \"\"\" Compute the composition of two FSTs parametrized with a config. Args: fst: Left fst. other_fst: Right fst. config: Config parameters of the composition. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose_with_config ( fst . ptr , other_fst . ptr , config . ptr , ctypes . byref ( composition ) ) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition )","title":"compose_with_config()"},{"location":"rustfst/algorithms/#rustfst.algorithms.union","text":"","title":"union"},{"location":"rustfst/algorithms/#rustfst.algorithms.union-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.union-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.union.union","text":"Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default fst VectorFst required other_fst VectorFst required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: fst: other_fst: Returns: The resulting Fst. \"\"\" ret_code = lib . fst_union ( fst . ptr , other_fst . ptr ) err_msg = \"Error during union\" check_ffi_error ( ret_code , err_msg ) return fst","title":"union()"},{"location":"rustfst/algorithms/#rustfst.algorithms.union.union_list","text":"Computes the union of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] The list of Fsts to produce the union. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def union_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Computes the union of a list of Fsts. Args: fsts: The list of Fsts to produce the union. Returns: The resulting Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] res_fst = fsts [ 0 ] for f in fsts [ 1 :]: res_fst = union ( res_fst , f ) return res_fst","title":"union_list()"},{"location":"rustfst/algorithms/#rustfst.algorithms.concat","text":"","title":"concat"},{"location":"rustfst/algorithms/#rustfst.algorithms.concat-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.concat-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.concat.concat","text":"Compute the concatenation of two Fsts. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/concat.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the concatenation of two Fsts. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" ret_code = lib . fst_concat ( fst . ptr , other_fst . ptr ) err_msg = \"Error during concat\" check_ffi_error ( ret_code , err_msg ) return fst","title":"concat()"},{"location":"rustfst/algorithms/#rustfst.algorithms.concat.concat_list","text":"Compute the concatenation of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] List of Fsts to concatenated required Returns: Type Description VectorFst The resulting concatenated Fst. Source code in rustfst/algorithms/concat.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def concat_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Compute the concatenation of a list of Fsts. Args: fsts: List of Fsts to concatenated Returns: The resulting concatenated Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] concatenated = fsts [ 0 ] for f in fsts [ 1 :]: concatenated = concatenated . concat ( f ) return concatenated","title":"concat_list()"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path","text":"","title":"shortest_path"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path.ShortestPathConfig","text":"Configuration for shortest-path operation. Parameters: Name Type Description Default nshortest int Number of shortest paths to return 1 unique bool Return only unique label sequences False delta Union [ float , None] Difference in weights considered significant None Source code in rustfst/algorithms/shortest_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ShortestPathConfig : \"\"\" Configuration for shortest-path operation. Args: nshortest: Number of shortest paths to return unique: Return only unique label sequences delta: Difference in weights considered significant \"\"\" def __init__ ( self , nshortest : int = 1 , unique : bool = False , delta : Union [ float , None ] = None ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_shortest_path_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( nshortest ), ctypes . c_bool ( unique ), ctypes . byref ( config ), ) err_msg = \"Error creating ShortestPathConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"ShortestPathConfig"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path.shortestpath","text":"Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def shortestpath ( fst : VectorFst ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path ( fst . ptr , ctypes . byref ( shortest_path )) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path )","title":"shortestpath()"},{"location":"rustfst/algorithms/#rustfst.algorithms.shortest_path.shortestpath_with_config","text":"Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required config ShortestPathConfig Configuration for shortest-path operation. required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path_with_config ( fst . ptr , config . ptr , ctypes . byref ( shortest_path ) ) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path )","title":"shortestpath_with_config()"},{"location":"rustfst/algorithms/#rustfst.algorithms.randgen","text":"","title":"randgen"},{"location":"rustfst/algorithms/#rustfst.algorithms.randgen-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/#rustfst.algorithms.randgen-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/#rustfst.algorithms.randgen.randgen","text":"Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the select argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Parameters: Name Type Description Default ifst Fst The input FST. required npath int The number of random paths to generate. 1 seed int An optional seed value for random path generation; if zero, the current time and process ID is used. 0 select str A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". 'uniform' max_length int The maximum length of each random path. 2147483647 weight bool Should the output be weighted by path count? False remove_total_weight bool Should the total weight be removed (ignored when weighted is False)? False Returns: Type Description VectorFst An FST containing one or more random paths. Raises: Type Description ValueError when something wrong happened. Source code in rustfst/algorithms/randgen.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = \"uniform\" , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False , ) -> VectorFst : \"\"\" Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the `select` argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Args: ifst: The input FST. npath: The number of random paths to generate. seed: An optional seed value for random path generation; if zero, the current time and process ID is used. select: A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". max_length: The maximum length of each random path. weight: Should the output be weighted by path count? remove_total_weight: Should the total weight be removed (ignored when `weighted` is False)? Returns: An FST containing one or more random paths. Raises: ValueError: when something wrong happened. \"\"\" if select != \"uniform\" : raise ValueError ( f \"Only the uniform distribution is supported for now. Found { select } \" ) npath = ctypes . c_size_t ( npath ) seed = ctypes . c_size_t ( seed ) max_length = ctypes . c_size_t ( max_length ) weight = ctypes . c_bool ( weight ) remove_total_weight = ctypes . c_bool ( remove_total_weight ) randgen_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_randgen ( ifst . ptr , npath , seed , max_length , weight , remove_total_weight , ctypes . byref ( randgen_fst ), ) err_msg = \"Error during randgen\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = randgen_fst )","title":"randgen()"},{"location":"rustfst/algorithms/compose/","text":"Classes ComposeConfig Configuration for compose operation. Parameters: Name Type Description Default compose_filter ComposeFilter Filter which determines allowable matches during composition operation. ComposeFilter.AUTOFILTER connect bool Connect the resulting FST after composition. True matcher1_config Optional [ MatcherConfig ] Matcher configuration for left-hand FST. None matcher2_config Optional [ MatcherConfig ] Matcher configuration for right-hand FST. None Source code in rustfst/algorithms/compose.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ComposeConfig : \"\"\" Configuration for compose operation. Args: compose_filter: Filter which determines allowable matches during composition operation. connect: Connect the resulting FST after composition. matcher1_config: Matcher configuration for left-hand FST. matcher2_config: Matcher configuration for right-hand FST. \"\"\" def __init__ ( self , compose_filter : ComposeFilter = ComposeFilter . AUTOFILTER , connect : bool = True , matcher1_config : Optional [ MatcherConfig ] = None , matcher2_config : Optional [ MatcherConfig ] = None , ): config = ctypes . pointer ( ctypes . c_void_p ()) m1_ptr = None if matcher1_config is not None : m1_ptr = matcher1_config . ptr m2_ptr = None if matcher2_config is not None : m2_ptr = matcher2_config . ptr ret_code = lib . fst_compose_config_new ( ctypes . c_size_t ( compose_filter . value ), ctypes . c_bool ( connect ), m1_ptr , m2_ptr , ctypes . byref ( config ), ) err_msg = \"Error creating ComposeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config def __del__ ( self ): lib . fst_compose_config_destroy ( self . ptr ) Functions compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Compute the composition of two FSTs. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the composition of two FSTs. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose ( fst . ptr , other_fst . ptr , ctypes . byref ( composition )) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition ) compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst Compute the composition of two FSTs parametrized with a config. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required config ComposeConfig Config parameters of the composition. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst : \"\"\" Compute the composition of two FSTs parametrized with a config. Args: fst: Left fst. other_fst: Right fst. config: Config parameters of the composition. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose_with_config ( fst . ptr , other_fst . ptr , config . ptr , ctypes . byref ( composition ) ) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition )","title":"compose"},{"location":"rustfst/algorithms/compose/#rustfst.algorithms.compose-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/compose/#rustfst.algorithms.compose.ComposeConfig","text":"Configuration for compose operation. Parameters: Name Type Description Default compose_filter ComposeFilter Filter which determines allowable matches during composition operation. ComposeFilter.AUTOFILTER connect bool Connect the resulting FST after composition. True matcher1_config Optional [ MatcherConfig ] Matcher configuration for left-hand FST. None matcher2_config Optional [ MatcherConfig ] Matcher configuration for right-hand FST. None Source code in rustfst/algorithms/compose.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class ComposeConfig : \"\"\" Configuration for compose operation. Args: compose_filter: Filter which determines allowable matches during composition operation. connect: Connect the resulting FST after composition. matcher1_config: Matcher configuration for left-hand FST. matcher2_config: Matcher configuration for right-hand FST. \"\"\" def __init__ ( self , compose_filter : ComposeFilter = ComposeFilter . AUTOFILTER , connect : bool = True , matcher1_config : Optional [ MatcherConfig ] = None , matcher2_config : Optional [ MatcherConfig ] = None , ): config = ctypes . pointer ( ctypes . c_void_p ()) m1_ptr = None if matcher1_config is not None : m1_ptr = matcher1_config . ptr m2_ptr = None if matcher2_config is not None : m2_ptr = matcher2_config . ptr ret_code = lib . fst_compose_config_new ( ctypes . c_size_t ( compose_filter . value ), ctypes . c_bool ( connect ), m1_ptr , m2_ptr , ctypes . byref ( config ), ) err_msg = \"Error creating ComposeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config def __del__ ( self ): lib . fst_compose_config_destroy ( self . ptr )","title":"ComposeConfig"},{"location":"rustfst/algorithms/compose/#rustfst.algorithms.compose-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/compose/#rustfst.algorithms.compose.compose","text":"Compute the composition of two FSTs. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def compose ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the composition of two FSTs. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose ( fst . ptr , other_fst . ptr , ctypes . byref ( composition )) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition )","title":"compose()"},{"location":"rustfst/algorithms/compose/#rustfst.algorithms.compose.compose_with_config","text":"Compute the composition of two FSTs parametrized with a config. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required config ComposeConfig Config parameters of the composition. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/compose.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def compose_with_config ( fst : VectorFst , other_fst : VectorFst , config : ComposeConfig ) -> VectorFst : \"\"\" Compute the composition of two FSTs parametrized with a config. Args: fst: Left fst. other_fst: Right fst. config: Config parameters of the composition. Returns: Resulting fst. \"\"\" composition = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_compose_with_config ( fst . ptr , other_fst . ptr , config . ptr , ctypes . byref ( composition ) ) err_msg = \"Error Composing FSTs\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = composition )","title":"compose_with_config()"},{"location":"rustfst/algorithms/concat/","text":"Classes Functions concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Compute the concatenation of two Fsts. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/concat.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the concatenation of two Fsts. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" ret_code = lib . fst_concat ( fst . ptr , other_fst . ptr ) err_msg = \"Error during concat\" check_ffi_error ( ret_code , err_msg ) return fst concat_list ( fsts : List [ VectorFst ]) -> VectorFst Compute the concatenation of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] List of Fsts to concatenated required Returns: Type Description VectorFst The resulting concatenated Fst. Source code in rustfst/algorithms/concat.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def concat_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Compute the concatenation of a list of Fsts. Args: fsts: List of Fsts to concatenated Returns: The resulting concatenated Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] concatenated = fsts [ 0 ] for f in fsts [ 1 :]: concatenated = concatenated . concat ( f ) return concatenated","title":"concat"},{"location":"rustfst/algorithms/concat/#rustfst.algorithms.concat-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/concat/#rustfst.algorithms.concat-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/concat/#rustfst.algorithms.concat.concat","text":"Compute the concatenation of two Fsts. Parameters: Name Type Description Default fst VectorFst Left fst. required other_fst VectorFst Right fst. required Returns: Type Description VectorFst Resulting fst. Source code in rustfst/algorithms/concat.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def concat ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Compute the concatenation of two Fsts. Args: fst: Left fst. other_fst: Right fst. Returns: Resulting fst. \"\"\" ret_code = lib . fst_concat ( fst . ptr , other_fst . ptr ) err_msg = \"Error during concat\" check_ffi_error ( ret_code , err_msg ) return fst","title":"concat()"},{"location":"rustfst/algorithms/concat/#rustfst.algorithms.concat.concat_list","text":"Compute the concatenation of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] List of Fsts to concatenated required Returns: Type Description VectorFst The resulting concatenated Fst. Source code in rustfst/algorithms/concat.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def concat_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Compute the concatenation of a list of Fsts. Args: fsts: List of Fsts to concatenated Returns: The resulting concatenated Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] concatenated = fsts [ 0 ] for f in fsts [ 1 :]: concatenated = concatenated . concat ( f ) return concatenated","title":"concat_list()"},{"location":"rustfst/algorithms/connect/","text":"Classes Functions connect ( fst : VectorFst ) -> VectorFst This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input : Output : Returns fst Source code in rustfst/algorithms/connect.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def connect ( fst : VectorFst ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input : ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output : ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns : fst \"\"\" ret_code = lib . fst_connect ( fst . ptr ) err_msg = \"Error during connect\" check_ffi_error ( ret_code , err_msg ) return fst","title":"connect"},{"location":"rustfst/algorithms/connect/#rustfst.algorithms.connect-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/connect/#rustfst.algorithms.connect-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/connect/#rustfst.algorithms.connect.connect","text":"This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input : Output : Returns fst Source code in rustfst/algorithms/connect.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def connect ( fst : VectorFst ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input : ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output : ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns : fst \"\"\" ret_code = lib . fst_connect ( fst . ptr ) err_msg = \"Error during connect\" check_ffi_error ( ret_code , err_msg ) return fst","title":"connect()"},{"location":"rustfst/algorithms/determinize/","text":"Classes DeterminizeType Bases: Enum Enumeration defining the type of the determinization to perform. Source code in rustfst/algorithms/determinize.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class DeterminizeType ( Enum ): \"\"\" Enumeration defining the type of the determinization to perform. \"\"\" DETERMINIZE_FUNCTIONAL = 0 \"\"\" Input transducer is known to be functional (or error). \"\"\" DETERMINIZE_NON_FUNCTIONAL = 1 \"\"\" Input transducer is NOT known to be functional. \"\"\" DETERMINIZE_DISAMBIGUATE = 2 \"\"\" Input transducer is not known to be functional but only keep the min of of ambiguous outputs. \"\"\" Attributes DETERMINIZE_FUNCTIONAL = 0 class-attribute Input transducer is known to be functional (or error). DETERMINIZE_NON_FUNCTIONAL = 1 class-attribute Input transducer is NOT known to be functional. DETERMINIZE_DISAMBIGUATE = 2 class-attribute Input transducer is not known to be functional but only keep the min of of ambiguous outputs. DeterminizeConfig Struct containing the parameters controlling the determinization algorithm. Source code in rustfst/algorithms/determinize.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class DeterminizeConfig : \"\"\" Struct containing the parameters controlling the determinization algorithm. \"\"\" def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions __init__ ( det_type : DeterminizeType , delta : Optional [ float ] = None ) Creates the configuration object. Parameters: Name Type Description Default det_type DeterminizeType Type of determinization to perform. required delta Optional [ float ] None Source code in rustfst/algorithms/determinize.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions determinize ( fst : VectorFst ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def determinize ( fst : VectorFst ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize ( fst . ptr , ctypes . byref ( det_fst )) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst ) determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required config DeterminizeConfig Configuration of the determinization algorithm to use. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. config: Configuration of the determinization algorithm to use. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_with_config ( fst . ptr , config . ptr , ctypes . byref ( det_fst ) ) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst )","title":"determinize"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeType","text":"Bases: Enum Enumeration defining the type of the determinization to perform. Source code in rustfst/algorithms/determinize.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class DeterminizeType ( Enum ): \"\"\" Enumeration defining the type of the determinization to perform. \"\"\" DETERMINIZE_FUNCTIONAL = 0 \"\"\" Input transducer is known to be functional (or error). \"\"\" DETERMINIZE_NON_FUNCTIONAL = 1 \"\"\" Input transducer is NOT known to be functional. \"\"\" DETERMINIZE_DISAMBIGUATE = 2 \"\"\" Input transducer is not known to be functional but only keep the min of of ambiguous outputs. \"\"\"","title":"DeterminizeType"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeType-attributes","text":"","title":"Attributes"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeType.DETERMINIZE_FUNCTIONAL","text":"Input transducer is known to be functional (or error).","title":"DETERMINIZE_FUNCTIONAL"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeType.DETERMINIZE_NON_FUNCTIONAL","text":"Input transducer is NOT known to be functional.","title":"DETERMINIZE_NON_FUNCTIONAL"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeType.DETERMINIZE_DISAMBIGUATE","text":"Input transducer is not known to be functional but only keep the min of of ambiguous outputs.","title":"DETERMINIZE_DISAMBIGUATE"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeConfig","text":"Struct containing the parameters controlling the determinization algorithm. Source code in rustfst/algorithms/determinize.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class DeterminizeConfig : \"\"\" Struct containing the parameters controlling the determinization algorithm. \"\"\" def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"DeterminizeConfig"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeConfig-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.DeterminizeConfig.__init__","text":"Creates the configuration object. Parameters: Name Type Description Default det_type DeterminizeType Type of determinization to perform. required delta Optional [ float ] None Source code in rustfst/algorithms/determinize.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , det_type : DeterminizeType , delta : Optional [ float ] = None ): \"\"\" Creates the configuration object. Args: det_type: Type of determinization to perform. delta: \"\"\" if delta is None : delta = KDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( det_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating DeterminizeConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"__init__()"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.determinize","text":"Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def determinize ( fst : VectorFst ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize ( fst . ptr , ctypes . byref ( det_fst )) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst )","title":"determinize()"},{"location":"rustfst/algorithms/determinize/#rustfst.algorithms.determinize.determinize_with_config","text":"Make an Fst deterministic Parameters: Name Type Description Default fst VectorFst The Fst to make deterministic. required config DeterminizeConfig Configuration of the determinization algorithm to use. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/determinize.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def determinize_with_config ( fst : VectorFst , config : DeterminizeConfig ) -> VectorFst : \"\"\" Make an Fst deterministic Args: fst: The Fst to make deterministic. config: Configuration of the determinization algorithm to use. Returns: The resulting Fst. \"\"\" det_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_determinize_with_config ( fst . ptr , config . ptr , ctypes . byref ( det_fst ) ) err_msg = \"Error during determinization\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = det_fst )","title":"determinize_with_config()"},{"location":"rustfst/algorithms/isomorphic/","text":"Classes Functions isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool Check if two Fsts are isomorphic. Parameters: Name Type Description Default fst VectorFst First Fst. required other_fst VectorFst Second Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/algorithms/isomorphic.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool : \"\"\" Check if two Fsts are isomorphic. Args: fst: First Fst. other_fst: Second Fst. Returns: Whether both Fsts are equal. \"\"\" is_isomorphic = ctypes . c_size_t () ret_code = lib . fst_isomorphic ( fst . ptr , other_fst . ptr , ctypes . byref ( is_isomorphic )) err_msg = \"Error checking isomorphic FSTs\" check_ffi_error ( ret_code , err_msg ) return bool ( is_isomorphic . value )","title":"isomorphic"},{"location":"rustfst/algorithms/isomorphic/#rustfst.algorithms.isomorphic-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/isomorphic/#rustfst.algorithms.isomorphic-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/isomorphic/#rustfst.algorithms.isomorphic.isomorphic","text":"Check if two Fsts are isomorphic. Parameters: Name Type Description Default fst VectorFst First Fst. required other_fst VectorFst Second Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/algorithms/isomorphic.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def isomorphic ( fst : VectorFst , other_fst : VectorFst ) -> bool : \"\"\" Check if two Fsts are isomorphic. Args: fst: First Fst. other_fst: Second Fst. Returns: Whether both Fsts are equal. \"\"\" is_isomorphic = ctypes . c_size_t () ret_code = lib . fst_isomorphic ( fst . ptr , other_fst . ptr , ctypes . byref ( is_isomorphic )) err_msg = \"Error checking isomorphic FSTs\" check_ffi_error ( ret_code , err_msg ) return bool ( is_isomorphic . value )","title":"isomorphic()"},{"location":"rustfst/algorithms/optimize/","text":"Classes Functions optimize ( fst : VectorFst ) Optimize an fst in-place Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 13 14 15 16 17 18 19 20 21 def optimize ( fst : VectorFst ): \"\"\" Optimize an fst in-place Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize ( fst . ptr ) err_msg = \"Error during optimize\" check_ffi_error ( ret_code , err_msg ) optimize_in_log ( fst : VectorFst ) Optimize an fst in-place in the log semiring. Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 24 25 26 27 28 29 30 31 32 def optimize_in_log ( fst : VectorFst ): \"\"\" Optimize an fst in-place in the log semiring. Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize_in_log ( ctypes . byref ( fst . ptr )) err_msg = \"Error during optimize_in_log\" check_ffi_error ( ret_code , err_msg )","title":"optimize"},{"location":"rustfst/algorithms/optimize/#rustfst.algorithms.optimize-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/optimize/#rustfst.algorithms.optimize-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/optimize/#rustfst.algorithms.optimize.optimize","text":"Optimize an fst in-place Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 13 14 15 16 17 18 19 20 21 def optimize ( fst : VectorFst ): \"\"\" Optimize an fst in-place Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize ( fst . ptr ) err_msg = \"Error during optimize\" check_ffi_error ( ret_code , err_msg )","title":"optimize()"},{"location":"rustfst/algorithms/optimize/#rustfst.algorithms.optimize.optimize_in_log","text":"Optimize an fst in-place in the log semiring. Parameters: Name Type Description Default fst VectorFst Fst to optimize. required Source code in rustfst/algorithms/optimize.py 24 25 26 27 28 29 30 31 32 def optimize_in_log ( fst : VectorFst ): \"\"\" Optimize an fst in-place in the log semiring. Args: fst: Fst to optimize. \"\"\" ret_code = lib . fst_optimize_in_log ( ctypes . byref ( fst . ptr )) err_msg = \"Error during optimize_in_log\" check_ffi_error ( ret_code , err_msg )","title":"optimize_in_log()"},{"location":"rustfst/algorithms/project/","text":"Classes ProjectType Bases: Enum Different types of labels projection in a Fst. Source code in rustfst/algorithms/project.py 12 13 14 15 16 17 18 19 20 21 22 23 24 class ProjectType ( Enum ): \"\"\" Different types of labels projection in a Fst. \"\"\" PROJECT_INPUT = 0 \"\"\" Input projection : output labels are replaced with input ones. \"\"\" PROJECT_OUTPUT = 1 \"\"\" Output projection : input labels are replaced with output ones. \"\"\" Attributes PROJECT_INPUT = 0 class-attribute Input projection : output labels are replaced with input ones. PROJECT_OUTPUT = 1 class-attribute Output projection : input labels are replaced with output ones. Functions project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default fst VectorFst Fst on which to apply the algorithm. required proj_type ProjectType Whether to replace input labels or output labels. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/project.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: fst: Fst on which to apply the algorithm. proj_type: Whether to replace input labels or output labels. Returns: The resulting Fst. \"\"\" config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_project_type_new ( ctypes . c_size_t ( proj_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating ProjectType\" check_ffi_error ( ret_code , err_msg ) ret_code = lib . fst_project ( fst . ptr , config ) err_msg = \"Error during projection\" check_ffi_error ( ret_code , err_msg ) return fst","title":"project"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project.ProjectType","text":"Bases: Enum Different types of labels projection in a Fst. Source code in rustfst/algorithms/project.py 12 13 14 15 16 17 18 19 20 21 22 23 24 class ProjectType ( Enum ): \"\"\" Different types of labels projection in a Fst. \"\"\" PROJECT_INPUT = 0 \"\"\" Input projection : output labels are replaced with input ones. \"\"\" PROJECT_OUTPUT = 1 \"\"\" Output projection : input labels are replaced with output ones. \"\"\"","title":"ProjectType"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project.ProjectType-attributes","text":"","title":"Attributes"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project.ProjectType.PROJECT_INPUT","text":"Input projection : output labels are replaced with input ones.","title":"PROJECT_INPUT"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project.ProjectType.PROJECT_OUTPUT","text":"Output projection : input labels are replaced with output ones.","title":"PROJECT_OUTPUT"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/project/#rustfst.algorithms.project.project","text":"Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default fst VectorFst Fst on which to apply the algorithm. required proj_type ProjectType Whether to replace input labels or output labels. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/project.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def project ( fst : VectorFst , proj_type : ProjectType ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: fst: Fst on which to apply the algorithm. proj_type: Whether to replace input labels or output labels. Returns: The resulting Fst. \"\"\" config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_project_type_new ( ctypes . c_size_t ( proj_type . value ), ctypes . byref ( config ), ) err_msg = \"Error creating ProjectType\" check_ffi_error ( ret_code , err_msg ) ret_code = lib . fst_project ( fst . ptr , config ) err_msg = \"Error during projection\" check_ffi_error ( ret_code , err_msg ) return fst","title":"project()"},{"location":"rustfst/algorithms/randgen/","text":"Classes Functions randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = 'uniform' , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False ) -> VectorFst Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the select argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Parameters: Name Type Description Default ifst Fst The input FST. required npath int The number of random paths to generate. 1 seed int An optional seed value for random path generation; if zero, the current time and process ID is used. 0 select str A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". 'uniform' max_length int The maximum length of each random path. 2147483647 weight bool Should the output be weighted by path count? False remove_total_weight bool Should the total weight be removed (ignored when weighted is False)? False Returns: Type Description VectorFst An FST containing one or more random paths. Raises: Type Description ValueError when something wrong happened. Source code in rustfst/algorithms/randgen.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = \"uniform\" , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False , ) -> VectorFst : \"\"\" Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the `select` argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Args: ifst: The input FST. npath: The number of random paths to generate. seed: An optional seed value for random path generation; if zero, the current time and process ID is used. select: A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". max_length: The maximum length of each random path. weight: Should the output be weighted by path count? remove_total_weight: Should the total weight be removed (ignored when `weighted` is False)? Returns: An FST containing one or more random paths. Raises: ValueError: when something wrong happened. \"\"\" if select != \"uniform\" : raise ValueError ( f \"Only the uniform distribution is supported for now. Found { select } \" ) npath = ctypes . c_size_t ( npath ) seed = ctypes . c_size_t ( seed ) max_length = ctypes . c_size_t ( max_length ) weight = ctypes . c_bool ( weight ) remove_total_weight = ctypes . c_bool ( remove_total_weight ) randgen_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_randgen ( ifst . ptr , npath , seed , max_length , weight , remove_total_weight , ctypes . byref ( randgen_fst ), ) err_msg = \"Error during randgen\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = randgen_fst )","title":"randgen"},{"location":"rustfst/algorithms/randgen/#rustfst.algorithms.randgen-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/randgen/#rustfst.algorithms.randgen-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/randgen/#rustfst.algorithms.randgen.randgen","text":"Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the select argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Parameters: Name Type Description Default ifst Fst The input FST. required npath int The number of random paths to generate. 1 seed int An optional seed value for random path generation; if zero, the current time and process ID is used. 0 select str A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". 'uniform' max_length int The maximum length of each random path. 2147483647 weight bool Should the output be weighted by path count? False remove_total_weight bool Should the total weight be removed (ignored when weighted is False)? False Returns: Type Description VectorFst An FST containing one or more random paths. Raises: Type Description ValueError when something wrong happened. Source code in rustfst/algorithms/randgen.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def randgen ( ifst : Fst , npath : int = 1 , seed : int = 0 , select : str = \"uniform\" , max_length : int = 2147483647 , weight : bool = False , remove_total_weight : bool = False , ) -> VectorFst : \"\"\" Randomly generate successful paths in an FST. This operation randomly generates a set of successful paths in the input FST. This relies on a mechanism for selecting arcs, specified using the `select` argument. The default selector, \"uniform\", randomly selects a transition using a uniform distribution. The \"log_prob\" selector randomly selects a transition w.r.t. the weights treated as negative log probabilities after normalizing for the total weight leaving the state. In all cases, finality is treated as a transition to a super-final state. Args: ifst: The input FST. npath: The number of random paths to generate. seed: An optional seed value for random path generation; if zero, the current time and process ID is used. select: A string matching a known random arc selection type; one of: \"uniform\", \"log_prob\", \"fast_log_prob\". max_length: The maximum length of each random path. weight: Should the output be weighted by path count? remove_total_weight: Should the total weight be removed (ignored when `weighted` is False)? Returns: An FST containing one or more random paths. Raises: ValueError: when something wrong happened. \"\"\" if select != \"uniform\" : raise ValueError ( f \"Only the uniform distribution is supported for now. Found { select } \" ) npath = ctypes . c_size_t ( npath ) seed = ctypes . c_size_t ( seed ) max_length = ctypes . c_size_t ( max_length ) weight = ctypes . c_bool ( weight ) remove_total_weight = ctypes . c_bool ( remove_total_weight ) randgen_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_randgen ( ifst . ptr , npath , seed , max_length , weight , remove_total_weight , ctypes . byref ( randgen_fst ), ) err_msg = \"Error during randgen\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = randgen_fst )","title":"randgen()"},{"location":"rustfst/algorithms/replace/","text":"Classes Functions replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_idx int required fst_list List [ Tuple [ int , VectorFst ]] required epsilon_on_replace bool required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/replace.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst : \"\"\" Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_idx: fst_list: epsilon_on_replace: Returns: The resulting Fst. \"\"\" pairs = [ LabelFstPair ( label , fst . ptr ) for ( label , fst ) in fst_list ] pairs_array = ( LabelFstPair * len ( pairs ))( * pairs ) res_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_replace ( ctypes . c_size_t ( root_idx ), ctypes . byref ( pairs_array ), ctypes . c_size_t ( len ( pairs )), ctypes . c_bool ( epsilon_on_replace ), ctypes . byref ( res_fst ), ) err_msg = \"Error performing replace\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = res_fst )","title":"replace"},{"location":"rustfst/algorithms/replace/#rustfst.algorithms.replace-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/replace/#rustfst.algorithms.replace-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/replace/#rustfst.algorithms.replace.replace","text":"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_idx int required fst_list List [ Tuple [ int , VectorFst ]] required epsilon_on_replace bool required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/replace.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def replace ( root_idx : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool ) -> VectorFst : \"\"\" Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). One FST represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_idx: fst_list: epsilon_on_replace: Returns: The resulting Fst. \"\"\" pairs = [ LabelFstPair ( label , fst . ptr ) for ( label , fst ) in fst_list ] pairs_array = ( LabelFstPair * len ( pairs ))( * pairs ) res_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_replace ( ctypes . c_size_t ( root_idx ), ctypes . byref ( pairs_array ), ctypes . c_size_t ( len ( pairs )), ctypes . c_bool ( epsilon_on_replace ), ctypes . byref ( res_fst ), ) err_msg = \"Error performing replace\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = res_fst )","title":"replace()"},{"location":"rustfst/algorithms/reverse/","text":"Classes Functions reverse ( fst : VectorFst ) -> VectorFst Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with inverse , which does something totally different! Parameters: Name Type Description Default fst VectorFst Fst to reverse required Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/algorithms/reverse.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def reverse ( fst : VectorFst ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with `inverse`, which does something totally different! Args: fst: Fst to reverse Returns: Newly created, reversed Fst. \"\"\" reversed_fst = ctypes . c_void_p () ret_code = lib . fst_reverse ( fst . ptr , ctypes . byref ( reversed_fst )) err_msg = \"Error during reverse\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = reversed_fst )","title":"reverse"},{"location":"rustfst/algorithms/reverse/#rustfst.algorithms.reverse-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/reverse/#rustfst.algorithms.reverse-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/reverse/#rustfst.algorithms.reverse.reverse","text":"Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with inverse , which does something totally different! Parameters: Name Type Description Default fst VectorFst Fst to reverse required Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/algorithms/reverse.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def reverse ( fst : VectorFst ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Not to be confused with `inverse`, which does something totally different! Args: fst: Fst to reverse Returns: Newly created, reversed Fst. \"\"\" reversed_fst = ctypes . c_void_p () ret_code = lib . fst_reverse ( fst . ptr , ctypes . byref ( reversed_fst )) err_msg = \"Error during reverse\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = reversed_fst )","title":"reverse()"},{"location":"rustfst/algorithms/rm_epsilon/","text":"Classes Functions rm_epsilon ( fst : VectorFst ) -> VectorFst Return an equivalent FST with epsilon transitions removed. Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/algorithms/rm_epsilon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def rm_epsilon ( fst : VectorFst ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Args: fst: Fst Returns: Newly created FST with epsilon transitions removed. \"\"\" rm_epsilon_fst = ctypes . c_void_p () ret_code = lib . fst_rm_epsilon ( fst . ptr , ctypes . byref ( rm_epsilon_fst )) err_msg = \"Error during rm_epsilon\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = rm_epsilon_fst )","title":"rm_epsilon"},{"location":"rustfst/algorithms/rm_epsilon/#rustfst.algorithms.rm_epsilon-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/rm_epsilon/#rustfst.algorithms.rm_epsilon-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/rm_epsilon/#rustfst.algorithms.rm_epsilon.rm_epsilon","text":"Return an equivalent FST with epsilon transitions removed. Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/algorithms/rm_epsilon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def rm_epsilon ( fst : VectorFst ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Args: fst: Fst Returns: Newly created FST with epsilon transitions removed. \"\"\" rm_epsilon_fst = ctypes . c_void_p () ret_code = lib . fst_rm_epsilon ( fst . ptr , ctypes . byref ( rm_epsilon_fst )) err_msg = \"Error during rm_epsilon\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = rm_epsilon_fst )","title":"rm_epsilon()"},{"location":"rustfst/algorithms/shortest_path/","text":"Classes ShortestPathConfig Configuration for shortest-path operation. Parameters: Name Type Description Default nshortest int Number of shortest paths to return 1 unique bool Return only unique label sequences False delta Union [ float , None] Difference in weights considered significant None Source code in rustfst/algorithms/shortest_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ShortestPathConfig : \"\"\" Configuration for shortest-path operation. Args: nshortest: Number of shortest paths to return unique: Return only unique label sequences delta: Difference in weights considered significant \"\"\" def __init__ ( self , nshortest : int = 1 , unique : bool = False , delta : Union [ float , None ] = None ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_shortest_path_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( nshortest ), ctypes . c_bool ( unique ), ctypes . byref ( config ), ) err_msg = \"Error creating ShortestPathConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config Functions shortestpath ( fst : VectorFst ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def shortestpath ( fst : VectorFst ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path ( fst . ptr , ctypes . byref ( shortest_path )) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path ) shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required config ShortestPathConfig Configuration for shortest-path operation. required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path_with_config ( fst . ptr , config . ptr , ctypes . byref ( shortest_path ) ) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path )","title":"shortest_path"},{"location":"rustfst/algorithms/shortest_path/#rustfst.algorithms.shortest_path-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/shortest_path/#rustfst.algorithms.shortest_path.ShortestPathConfig","text":"Configuration for shortest-path operation. Parameters: Name Type Description Default nshortest int Number of shortest paths to return 1 unique bool Return only unique label sequences False delta Union [ float , None] Difference in weights considered significant None Source code in rustfst/algorithms/shortest_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ShortestPathConfig : \"\"\" Configuration for shortest-path operation. Args: nshortest: Number of shortest paths to return unique: Return only unique label sequences delta: Difference in weights considered significant \"\"\" def __init__ ( self , nshortest : int = 1 , unique : bool = False , delta : Union [ float , None ] = None ): if delta is None : delta = KSHORTESTDELTA config = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_shortest_path_config_new ( ctypes . c_float ( delta ), ctypes . c_size_t ( nshortest ), ctypes . c_bool ( unique ), ctypes . byref ( config ), ) err_msg = \"Error creating ShortestPathConfig\" check_ffi_error ( ret_code , err_msg ) self . ptr = config","title":"ShortestPathConfig"},{"location":"rustfst/algorithms/shortest_path/#rustfst.algorithms.shortest_path-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/shortest_path/#rustfst.algorithms.shortest_path.shortestpath","text":"Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def shortestpath ( fst : VectorFst ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path ( fst . ptr , ctypes . byref ( shortest_path )) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path )","title":"shortestpath()"},{"location":"rustfst/algorithms/shortest_path/#rustfst.algorithms.shortest_path.shortestpath_with_config","text":"Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default fst VectorFst Fst required config ShortestPathConfig Configuration for shortest-path operation. required Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/algorithms/shortest_path.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def shortestpath_with_config ( fst : VectorFst , config : ShortestPathConfig ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: fst: Fst config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" shortest_path = ctypes . c_void_p () ret_code = lib . fst_shortest_path_with_config ( fst . ptr , config . ptr , ctypes . byref ( shortest_path ) ) err_msg = \"Error computing shortest path\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = shortest_path )","title":"shortestpath_with_config()"},{"location":"rustfst/algorithms/top_sort/","text":"Classes Functions top_sort ( fst : VectorFst ) -> VectorFst This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Parameters: Name Type Description Default fst VectorFst Fst to top_sort. required Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/algorithms/top_sort.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def top_sort ( fst : VectorFst ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Args: fst: Fst to top_sort. Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" top_sorted_fst = ctypes . c_void_p () ret_code = lib . fst_top_sort ( fst . ptr , ctypes . byref ( top_sorted_fst )) err_msg = \"Error during top_sort\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = top_sorted_fst )","title":"top_sort"},{"location":"rustfst/algorithms/top_sort/#rustfst.algorithms.top_sort-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/top_sort/#rustfst.algorithms.top_sort-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/top_sort/#rustfst.algorithms.top_sort.top_sort","text":"This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Parameters: Name Type Description Default fst VectorFst Fst to top_sort. required Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/algorithms/top_sort.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def top_sort ( fst : VectorFst ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Args: fst: Fst to top_sort. Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" top_sorted_fst = ctypes . c_void_p () ret_code = lib . fst_top_sort ( fst . ptr , ctypes . byref ( top_sorted_fst )) err_msg = \"Error during top_sort\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( ptr = top_sorted_fst )","title":"top_sort()"},{"location":"rustfst/algorithms/tr_sort/","text":"Classes Functions tr_sort ( fst : VectorFst , ilabel_cmp : bool ) tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool Source code in rustfst/algorithms/tr_sort.py 11 12 13 14 15 16 17 18 19 20 21 def tr_sort ( fst : VectorFst , ilabel_cmp : bool ): \"\"\" tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool \"\"\" ret_code = lib . fst_tr_sort ( fst . ptr , ctypes . c_bool ( ilabel_cmp )) err_msg = \"Error during tr_sort\" check_ffi_error ( ret_code , err_msg )","title":"tr_sort"},{"location":"rustfst/algorithms/tr_sort/#rustfst.algorithms.tr_sort-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/tr_sort/#rustfst.algorithms.tr_sort-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/tr_sort/#rustfst.algorithms.tr_sort.tr_sort","text":"tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool Source code in rustfst/algorithms/tr_sort.py 11 12 13 14 15 16 17 18 19 20 21 def tr_sort ( fst : VectorFst , ilabel_cmp : bool ): \"\"\" tr_sort(fst) sort fst trs according to their ilabel or olabel :param fst: Fst :param ilabel_cmp: bool \"\"\" ret_code = lib . fst_tr_sort ( fst . ptr , ctypes . c_bool ( ilabel_cmp )) err_msg = \"Error during tr_sort\" check_ffi_error ( ret_code , err_msg )","title":"tr_sort()"},{"location":"rustfst/algorithms/tr_unique/","text":"Classes Functions tr_unique ( fst : VectorFst ) Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Parameters: Name Type Description Default fst VectorFst Fst to modify required Source code in rustfst/algorithms/tr_unique.py 10 11 12 13 14 15 16 17 18 19 20 def tr_unique ( fst : VectorFst ): \"\"\" Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Args: fst: Fst to modify \"\"\" ret_code = lib . fst_tr_unique ( fst . ptr ) err_msg = \"Error during tr_unique\" check_ffi_error ( ret_code , err_msg )","title":"tr_unique"},{"location":"rustfst/algorithms/tr_unique/#rustfst.algorithms.tr_unique-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/tr_unique/#rustfst.algorithms.tr_unique-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/tr_unique/#rustfst.algorithms.tr_unique.tr_unique","text":"Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Parameters: Name Type Description Default fst VectorFst Fst to modify required Source code in rustfst/algorithms/tr_unique.py 10 11 12 13 14 15 16 17 18 19 20 def tr_unique ( fst : VectorFst ): \"\"\" Keep a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Args: fst: Fst to modify \"\"\" ret_code = lib . fst_tr_unique ( fst . ptr ) err_msg = \"Error during tr_unique\" check_ffi_error ( ret_code , err_msg )","title":"tr_unique()"},{"location":"rustfst/algorithms/union/","text":"Classes Functions union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default fst VectorFst required other_fst VectorFst required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: fst: other_fst: Returns: The resulting Fst. \"\"\" ret_code = lib . fst_union ( fst . ptr , other_fst . ptr ) err_msg = \"Error during union\" check_ffi_error ( ret_code , err_msg ) return fst union_list ( fsts : List [ VectorFst ]) -> VectorFst Computes the union of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] The list of Fsts to produce the union. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def union_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Computes the union of a list of Fsts. Args: fsts: The list of Fsts to produce the union. Returns: The resulting Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] res_fst = fsts [ 0 ] for f in fsts [ 1 :]: res_fst = union ( res_fst , f ) return res_fst","title":"union"},{"location":"rustfst/algorithms/union/#rustfst.algorithms.union-classes","text":"","title":"Classes"},{"location":"rustfst/algorithms/union/#rustfst.algorithms.union-functions","text":"","title":"Functions"},{"location":"rustfst/algorithms/union/#rustfst.algorithms.union.union","text":"Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default fst VectorFst required other_fst VectorFst required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def union ( fst : VectorFst , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: fst: other_fst: Returns: The resulting Fst. \"\"\" ret_code = lib . fst_union ( fst . ptr , other_fst . ptr ) err_msg = \"Error during union\" check_ffi_error ( ret_code , err_msg ) return fst","title":"union()"},{"location":"rustfst/algorithms/union/#rustfst.algorithms.union.union_list","text":"Computes the union of a list of Fsts. Parameters: Name Type Description Default fsts List [ VectorFst ] The list of Fsts to produce the union. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/algorithms/union.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def union_list ( fsts : List [ VectorFst ]) -> VectorFst : \"\"\" Computes the union of a list of Fsts. Args: fsts: The list of Fsts to produce the union. Returns: The resulting Fst. \"\"\" if not fsts : raise ValueError ( \"fsts must be at least of len 1\" ) fsts = [ f . copy () for f in fsts ] res_fst = fsts [ 0 ] for f in fsts [ 1 :]: res_fst = union ( res_fst , f ) return res_fst","title":"union_list()"},{"location":"rustfst/drawing_config/","text":"Classes DrawingConfig Source code in rustfst/drawing_config.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class DrawingConfig : def __init__ ( self , acceptor : bool = False , title : str = \"\" , width : Optional [ float ] = None , height : Optional [ float ] = None , portrait : bool = True , vertical : bool = False , ranksep : Optional [ float ] = None , nodesep : Optional [ float ] = None , fontsize : int = 14 , show_weight_one : bool = True , print_weight : bool = True , ): \"\"\" Args: acceptor: Should the figure be rendered in acceptor format if possible? title: An optional string indicating the figure title. width: The figure width, in inches. height: The figure height, in inches. portrait: Should the figure be rendered in portrait rather than landscape? vertical: Should the figure be rendered bottom-to-top rather than left-to-right? ranksep: The minimum separation separation between ranks, in inches. nodesep: The minimum separation between nodes, in inches. fontsize: Font size, in points. show_weight_one: Should weights equivalent to semiring One be printed? print_weight: Should weights be printed \"\"\" self . acceptor = acceptor self . title = title self . width = width self . height = height self . portrait = portrait self . vertical = vertical self . ranksep = ranksep self . nodesep = nodesep self . fontsize = fontsize self . show_weight_one = show_weight_one self . print_weight = print_weight Functions __init__ ( acceptor : bool = False , title : str = '' , width : Optional [ float ] = None , height : Optional [ float ] = None , portrait : bool = True , vertical : bool = False , ranksep : Optional [ float ] = None , nodesep : Optional [ float ] = None , fontsize : int = 14 , show_weight_one : bool = True , print_weight : bool = True ) Parameters: Name Type Description Default acceptor bool Should the figure be rendered in acceptor format if possible? False title str An optional string indicating the figure title. '' width Optional [ float ] The figure width, in inches. None height Optional [ float ] The figure height, in inches. None portrait bool Should the figure be rendered in portrait rather than landscape? True vertical bool Should the figure be rendered bottom-to-top rather than left-to-right? False ranksep Optional [ float ] The minimum separation separation between ranks, in inches. None nodesep Optional [ float ] The minimum separation between nodes, in inches. None fontsize int Font size, in points. 14 show_weight_one bool Should weights equivalent to semiring One be printed? True print_weight bool Should weights be printed True Source code in rustfst/drawing_config.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , acceptor : bool = False , title : str = \"\" , width : Optional [ float ] = None , height : Optional [ float ] = None , portrait : bool = True , vertical : bool = False , ranksep : Optional [ float ] = None , nodesep : Optional [ float ] = None , fontsize : int = 14 , show_weight_one : bool = True , print_weight : bool = True , ): \"\"\" Args: acceptor: Should the figure be rendered in acceptor format if possible? title: An optional string indicating the figure title. width: The figure width, in inches. height: The figure height, in inches. portrait: Should the figure be rendered in portrait rather than landscape? vertical: Should the figure be rendered bottom-to-top rather than left-to-right? ranksep: The minimum separation separation between ranks, in inches. nodesep: The minimum separation between nodes, in inches. fontsize: Font size, in points. show_weight_one: Should weights equivalent to semiring One be printed? print_weight: Should weights be printed \"\"\" self . acceptor = acceptor self . title = title self . width = width self . height = height self . portrait = portrait self . vertical = vertical self . ranksep = ranksep self . nodesep = nodesep self . fontsize = fontsize self . show_weight_one = show_weight_one self . print_weight = print_weight","title":"drawing_config"},{"location":"rustfst/drawing_config/#rustfst.drawing_config-classes","text":"","title":"Classes"},{"location":"rustfst/drawing_config/#rustfst.drawing_config.DrawingConfig","text":"Source code in rustfst/drawing_config.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class DrawingConfig : def __init__ ( self , acceptor : bool = False , title : str = \"\" , width : Optional [ float ] = None , height : Optional [ float ] = None , portrait : bool = True , vertical : bool = False , ranksep : Optional [ float ] = None , nodesep : Optional [ float ] = None , fontsize : int = 14 , show_weight_one : bool = True , print_weight : bool = True , ): \"\"\" Args: acceptor: Should the figure be rendered in acceptor format if possible? title: An optional string indicating the figure title. width: The figure width, in inches. height: The figure height, in inches. portrait: Should the figure be rendered in portrait rather than landscape? vertical: Should the figure be rendered bottom-to-top rather than left-to-right? ranksep: The minimum separation separation between ranks, in inches. nodesep: The minimum separation between nodes, in inches. fontsize: Font size, in points. show_weight_one: Should weights equivalent to semiring One be printed? print_weight: Should weights be printed \"\"\" self . acceptor = acceptor self . title = title self . width = width self . height = height self . portrait = portrait self . vertical = vertical self . ranksep = ranksep self . nodesep = nodesep self . fontsize = fontsize self . show_weight_one = show_weight_one self . print_weight = print_weight","title":"DrawingConfig"},{"location":"rustfst/drawing_config/#rustfst.drawing_config.DrawingConfig-functions","text":"","title":"Functions"},{"location":"rustfst/drawing_config/#rustfst.drawing_config.DrawingConfig.__init__","text":"Parameters: Name Type Description Default acceptor bool Should the figure be rendered in acceptor format if possible? False title str An optional string indicating the figure title. '' width Optional [ float ] The figure width, in inches. None height Optional [ float ] The figure height, in inches. None portrait bool Should the figure be rendered in portrait rather than landscape? True vertical bool Should the figure be rendered bottom-to-top rather than left-to-right? False ranksep Optional [ float ] The minimum separation separation between ranks, in inches. None nodesep Optional [ float ] The minimum separation between nodes, in inches. None fontsize int Font size, in points. 14 show_weight_one bool Should weights equivalent to semiring One be printed? True print_weight bool Should weights be printed True Source code in rustfst/drawing_config.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , acceptor : bool = False , title : str = \"\" , width : Optional [ float ] = None , height : Optional [ float ] = None , portrait : bool = True , vertical : bool = False , ranksep : Optional [ float ] = None , nodesep : Optional [ float ] = None , fontsize : int = 14 , show_weight_one : bool = True , print_weight : bool = True , ): \"\"\" Args: acceptor: Should the figure be rendered in acceptor format if possible? title: An optional string indicating the figure title. width: The figure width, in inches. height: The figure height, in inches. portrait: Should the figure be rendered in portrait rather than landscape? vertical: Should the figure be rendered bottom-to-top rather than left-to-right? ranksep: The minimum separation separation between ranks, in inches. nodesep: The minimum separation between nodes, in inches. fontsize: Font size, in points. show_weight_one: Should weights equivalent to semiring One be printed? print_weight: Should weights be printed \"\"\" self . acceptor = acceptor self . title = title self . width = width self . height = height self . portrait = portrait self . vertical = vertical self . ranksep = ranksep self . nodesep = nodesep self . fontsize = fontsize self . show_weight_one = show_weight_one self . print_weight = print_weight","title":"__init__()"},{"location":"rustfst/fst/","text":"Classes Fst This class is the base class for every Fst objects. Source code in rustfst/fst/__init__.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 class Fst : \"\"\" This class is the base class for every Fst objects. \"\"\" def __init__ ( self , ptr , isymt = None , osymt = None ): self . ptr = ptr self . _input_symbols = isymt self . _output_symbols = osymt def start ( self ) -> Optional [ int ]: \"\"\" Returns the start state. Returns : The start state or None. \"\"\" start = ctypes . c_size_t () ret_code = lib . fst_start ( self . ptr , ctypes . byref ( start )) err_msg = \"Error getting start state\" check_ffi_error ( ret_code , err_msg ) if start is None : return None return int ( start . value ) def final ( self , state : int ) -> Optional [ float ]: \"\"\" Returns the final weight of a state. Args: state: The integer index of a state. Returns: The final Weight of that state. Raises: Exception: If State index out of range. \"\"\" state = ctypes . c_size_t ( state ) weight = ctypes . c_float () ret_code = lib . fst_final_weight ( self . ptr , state , ctypes . byref ( weight )) err_msg = \"Error getting final weight\" check_ffi_error ( ret_code , err_msg ) if weight is None : return None return weight . value def num_trs ( self , state : int ) -> int : \"\"\" Returns the number of trs leaving a state. Args: state: The integer index of a state. Returns: The number of trs leaving that state. Raises: Exception: If State index out of range. See also: `num_states`. \"\"\" num_trs = ctypes . c_size_t () state = ctypes . c_size_t ( state ) ret_code = lib . fst_num_trs ( self . ptr , state , ctypes . byref ( num_trs )) err_msg = \"Error getting number of trs\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value ) def trs ( self , state : int ) -> TrsIterator : \"\"\" Returns an iterator over trs leaving the specified state. Args: state: The source state ID. Returns: An TrsIterator. See also: `mutable_trs`, `states`. \"\"\" return TrsIterator ( self , state ) def is_final ( self , state_id : int ) -> bool : \"\"\" Check if a state is final Args : state_id: Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_final = ctypes . c_size_t () ret_code = lib . fst_is_final ( self . ptr , state , ctypes . byref ( is_final )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_final . value ) def is_start ( self , state_id : int ) -> bool : \"\"\" Check if a state is a start state. Args : state_id: Integer index of the state. Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_start = ctypes . c_size_t () ret_code = lib . fst_is_start ( self . ptr , state , ctypes . byref ( is_start )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_start . value ) def input_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's input symbol table, or None if none is present. Returns : The Fst's input symbol table, or None if none is present. See also: `output_symbols`. \"\"\" if self . _input_symbols : return self . _input_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None def output_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's output symbol table, or None if none is present. Returns : The Fst's output symbol table, or None if none is present. See also: `input_symbols`. \"\"\" if self . _output_symbols : return self . _output_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting output symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None def set_input_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the input symbol table. Passing None as a value will delete the input symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_output_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_input_symbols ( self . ptr ) err_msg = \"Error unsetting input symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _input_symbols = None return self table = syms . ptr ret_code = lib . fst_set_input_symbols ( self . ptr , table ) err_msg = \"Error setting input symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _input_symbols = syms return self def set_output_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the output symbol table. Passing None as a value will delete the output symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_input_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_output_symbols ( self . ptr ) err_msg = \"Error unsetting output symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _output_symbols = None return self table = syms . ptr ret_code = lib . fst_set_output_symbols ( self . ptr , table ) err_msg = \"Error setting output symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _output_symbols = syms return self def remove_input_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_input_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_input_symbols\" check_ffi_error ( ret_code , err_msg ) return self def remove_output_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_output_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_outout_symbols\" check_ffi_error ( ret_code , err_msg ) return self def __eq__ ( self , y : Fst ): \"\"\"x.__eq__(y) <==> x==y\"\"\" return self . equals ( y ) def __repr__ ( self ): return f \"<rustfst.fst.Fst at { id ( self ) } >\" def __del__ ( self ): lib . fst_destroy ( self . ptr ) Functions start () -> Optional [ int ] Returns the start state. Returns The start state or None. Source code in rustfst/fst/__init__.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def start ( self ) -> Optional [ int ]: \"\"\" Returns the start state. Returns : The start state or None. \"\"\" start = ctypes . c_size_t () ret_code = lib . fst_start ( self . ptr , ctypes . byref ( start )) err_msg = \"Error getting start state\" check_ffi_error ( ret_code , err_msg ) if start is None : return None return int ( start . value ) final ( state : int ) -> Optional [ float ] Returns the final weight of a state. Parameters: Name Type Description Default state int The integer index of a state. required Returns: Type Description Optional [ float ] The final Weight of that state. Raises: Type Description Exception If State index out of range. Source code in rustfst/fst/__init__.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def final ( self , state : int ) -> Optional [ float ]: \"\"\" Returns the final weight of a state. Args: state: The integer index of a state. Returns: The final Weight of that state. Raises: Exception: If State index out of range. \"\"\" state = ctypes . c_size_t ( state ) weight = ctypes . c_float () ret_code = lib . fst_final_weight ( self . ptr , state , ctypes . byref ( weight )) err_msg = \"Error getting final weight\" check_ffi_error ( ret_code , err_msg ) if weight is None : return None return weight . value num_trs ( state : int ) -> int Returns the number of trs leaving a state. Parameters: Name Type Description Default state int The integer index of a state. required Returns: Type Description int The number of trs leaving that state. Raises: Type Description Exception If State index out of range. See also: num_states . Source code in rustfst/fst/__init__.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def num_trs ( self , state : int ) -> int : \"\"\" Returns the number of trs leaving a state. Args: state: The integer index of a state. Returns: The number of trs leaving that state. Raises: Exception: If State index out of range. See also: `num_states`. \"\"\" num_trs = ctypes . c_size_t () state = ctypes . c_size_t ( state ) ret_code = lib . fst_num_trs ( self . ptr , state , ctypes . byref ( num_trs )) err_msg = \"Error getting number of trs\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value ) trs ( state : int ) -> TrsIterator Returns an iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description TrsIterator An TrsIterator. See also: mutable_trs , states . Source code in rustfst/fst/__init__.py 79 80 81 82 83 84 85 86 87 88 def trs ( self , state : int ) -> TrsIterator : \"\"\" Returns an iterator over trs leaving the specified state. Args: state: The source state ID. Returns: An TrsIterator. See also: `mutable_trs`, `states`. \"\"\" return TrsIterator ( self , state ) is_final ( state_id : int ) -> bool Check if a state is final Args state_id: Returns bool Source code in rustfst/fst/__init__.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def is_final ( self , state_id : int ) -> bool : \"\"\" Check if a state is final Args : state_id: Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_final = ctypes . c_size_t () ret_code = lib . fst_is_final ( self . ptr , state , ctypes . byref ( is_final )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_final . value ) is_start ( state_id : int ) -> bool Check if a state is a start state. Args state_id: Integer index of the state. Returns bool Source code in rustfst/fst/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def is_start ( self , state_id : int ) -> bool : \"\"\" Check if a state is a start state. Args : state_id: Integer index of the state. Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_start = ctypes . c_size_t () ret_code = lib . fst_is_start ( self . ptr , state , ctypes . byref ( is_start )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_start . value ) input_symbols () -> Optional [ SymbolTable ] Returns the Fst's input symbol table, or None if none is present. Returns The Fst's input symbol table, or None if none is present. See also: output_symbols . Source code in rustfst/fst/__init__.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def input_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's input symbol table, or None if none is present. Returns : The Fst's input symbol table, or None if none is present. See also: `output_symbols`. \"\"\" if self . _input_symbols : return self . _input_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None output_symbols () -> Optional [ SymbolTable ] Returns the Fst's output symbol table, or None if none is present. Returns The Fst's output symbol table, or None if none is present. See also: input_symbols . Source code in rustfst/fst/__init__.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def output_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's output symbol table, or None if none is present. Returns : The Fst's output symbol table, or None if none is present. See also: `input_symbols`. \"\"\" if self . _output_symbols : return self . _output_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting output symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None set_input_symbols ( syms : Optional [ SymbolTable ]) -> Fst Sets the input symbol table. Passing None as a value will delete the input symbol table. Parameters: Name Type Description Default syms Optional [ SymbolTable ] A SymbolTable. required Returns: Type Description Fst self. See also: set_output_symbols . Source code in rustfst/fst/__init__.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def set_input_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the input symbol table. Passing None as a value will delete the input symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_output_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_input_symbols ( self . ptr ) err_msg = \"Error unsetting input symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _input_symbols = None return self table = syms . ptr ret_code = lib . fst_set_input_symbols ( self . ptr , table ) err_msg = \"Error setting input symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _input_symbols = syms return self set_output_symbols ( syms : Optional [ SymbolTable ]) -> Fst Sets the output symbol table. Passing None as a value will delete the output symbol table. Parameters: Name Type Description Default syms Optional [ SymbolTable ] A SymbolTable. required Returns: Type Description Fst self. See also: set_input_symbols . Source code in rustfst/fst/__init__.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def set_output_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the output symbol table. Passing None as a value will delete the output symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_input_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_output_symbols ( self . ptr ) err_msg = \"Error unsetting output symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _output_symbols = None return self table = syms . ptr ret_code = lib . fst_set_output_symbols ( self . ptr , table ) err_msg = \"Error setting output symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _output_symbols = syms return self remove_input_symbols ( symbols : list [ int ]) -> Fst Parameters: Name Type Description Default symbols list [ int ] List[int] required Returns: Type Description Fst self. Source code in rustfst/fst/__init__.py 220 221 222 223 224 225 226 227 228 229 230 231 232 233 def remove_input_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_input_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_input_symbols\" check_ffi_error ( ret_code , err_msg ) return self remove_output_symbols ( symbols : list [ int ]) -> Fst Parameters: Name Type Description Default symbols list [ int ] List[int] required Returns: Type Description Fst self. Source code in rustfst/fst/__init__.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def remove_output_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_output_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_outout_symbols\" check_ffi_error ( ret_code , err_msg ) return self __eq__ ( y : Fst ) x. eq (y) <==> x==y Source code in rustfst/fst/__init__.py 250 251 252 def __eq__ ( self , y : Fst ): \"\"\"x.__eq__(y) <==> x==y\"\"\" return self . equals ( y ) Modules const_fst Classes ConstFst Bases: Fst Source code in rustfst/fst/const_fst.pyclass ConstFst ( Fst ): def __init__ ( self , ptr = None ): if ptr : self . ptr = ptr else : raise ValueError ( \"Const fst should be init with a pointer or loaded from a file\" ) super () . __init__ ( self . ptr ) def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . const_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying ConstFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) Functions draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/const_fst.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> ConstFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description ConstFst An FST. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/const_fst.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) from_vector_fst ( fst : VectorFst ) -> ConstFst classmethod Converts a given VectorFst to ConstFst Parameters: Name Type Description Default fst VectorFst The VectorFst that should be converted required Returns: Type Description ConstFst A ConstFst Raises: Type Description ValueError Conversion failed Source code in rustfst/fst/const_fst.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/const_fst.py 127 128 129 130 131 132 133 134 135 136 137 138 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other Args other: Fst instance Returns: Type Description bool bool Source code in rustfst/fst/const_fst.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> ConstFst Returns Deepcopy of the Fst. Source code in rustfst/fst/const_fst.py 156 157 158 159 160 161 162 163 164 165 166 def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst ) vector_fst Classes VectorFst Bases: Fst Source code in rustfst/fst/vector_fst.pyclass VectorFst ( Fst ): def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . vec_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying VectorFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self ) Functions __init__ ( ptr = None ) Creates an empty VectorFst. Source code in rustfst/fst/vector_fst.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) add_tr ( state : int , tr : Tr ) -> Fst Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Parameters: Name Type Description Default state int The integer index of the source state. required tr Tr The tr to add. required Returns: Type Description Fst self. Raises: Type Description SnipsFstException If State index out of range. See also: add_state . Source code in rustfst/fst/vector_fst.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self add_state () -> int Adds a new state to the FST and returns the state ID. Returns: Type Description int The integer index of the new state. See also: add_tr , set_start , set_final . Source code in rustfst/fst/vector_fst.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value set_final ( state : int , weight : Union [ float , None ] = None ) Sets the final weight for a state. Parameters: Name Type Description Default state int The integer index of a state. required weight Union [ float , None] A float indicating the desired final weight; if omitted, it is set to semiring One. None Raises: Type Description ValueError State index out of range or Incompatible or invalid weight. See also: set_start . Source code in rustfst/fst/vector_fst.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) unset_final ( state : int ) Unset the final weight of a state. As a result, the state is no longer final. Parameters: Name Type Description Default state int The integer index of a state required Raises: Type Description ValueError State index out of range. Source code in rustfst/fst/vector_fst.py 121 122 123 124 125 126 127 128 129 130 131 132 def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) mutable_trs ( state : int ) -> MutableTrsIterator Returns a mutable iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description MutableTrsIterator A MutableTrsIterator. See also: trs , states . Source code in rustfst/fst/vector_fst.py 134 135 136 137 138 139 140 141 142 143 def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) delete_states () Delete all the states Source code in rustfst/fst/vector_fst.py 145 146 147 148 149 150 151 def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) num_states () -> int Returns the number of states. Returns: Type Description int Number of states present in the Fst. Source code in rustfst/fst/vector_fst.py 153 154 155 156 157 158 159 160 161 162 163 164 def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) set_start ( state : int ) Sets a state to be the initial state state. Parameters: Name Type Description Default state int The integer index of a state. required Raises: Type Description ValueError If State index out of range. See also: set_final . Source code in rustfst/fst/vector_fst.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) states () -> StateIterator Returns an iterator over all states in the FST. Returns: Type Description StateIterator A StateIterator object for the FST. See also: trs , mutable_trs . Source code in rustfst/fst/vector_fst.py 180 181 182 183 184 185 186 187 def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) relabel_tables ( * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True ) -> VectorFst Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new SymbolTable . If the Fst has a label 1 corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Parameters: Name Type Description Default old_isymbols Optional [ SymbolTable ] Input SymbolTable used to build the Fst. If None , uses the Input SymbolTable attached to the Fst. None new_isymbols SymbolTable New Input SymbolTable to use. required attach_new_isymbols bool Whether to attach the new Input SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Input SymbolTable . True old_osymbols Optional [ SymbolTable ] Output SymbolTable used to build the Fst. If None , uses the Output SymbolTable attached to the Fst None new_osymbols SymbolTable New Output SymbolTable to use. required attach_new_osymbols bool Whether to attach the new Output SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Output SymbolTable . True Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/vector_fst.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> VectorFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description VectorFst An Fst. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/vector_fst.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in vector binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/vector_fst.py 330 331 332 333 334 335 336 337 338 339 340 341 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) from_bytes ( data : bytes ) -> VectorFst classmethod Load a VectorFst from a sequence of bytes. Parameters: Name Type Description Default data bytes Sequence of bytes. required Returns: Type Description VectorFst Loaded VectorFst . Source code in rustfst/fst/vector_fst.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) to_bytes () -> bytes Turns the VectorFst into bytes. Returns: Type Description bytes Sequence of bytes. Source code in rustfst/fst/vector_fst.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other. Parameters: Name Type Description Default other Fst Fst instance required Returns: Type Description bool Whether both Fst are equals. Source code in rustfst/fst/vector_fst.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> VectorFst Returns: Type Description VectorFst A copy of the Fst. Source code in rustfst/fst/vector_fst.py 406 407 408 409 410 411 412 413 414 415 416 def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) compose ( other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst Compute composition of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to compose with. required config Union [ ComposeConfig , None] Config parameters of the composition. None Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) concat ( other : VectorFst ) -> VectorFst Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to concatenate with. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) connect () -> VectorFst This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input Output Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) top_sort () -> VectorFst This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/fst/vector_fst.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) determinize ( config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default config Union [ DeterminizeConfig , None] Configuration for the determinization operation. None Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 496 497 498 499 500 501 502 503 504 505 506 507 508 def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) minimize ( config : Union [ MinimizeConfig , None ] = None ) -> VectorFst Minimize an FST in place Parameters: Name Type Description Default config Union [ MinimizeConfig , None] Configuration for the minimization operation. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 510 511 512 513 514 515 516 517 518 519 520 521 522 def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) project ( proj_type : Union [ ProjectType , None ] = None ) -> VectorFst Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default proj_type Union [ ProjectType , None] Whether to replace input labels or output labels. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) replace ( root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False ) -> VectorFst Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_label int Label for self required fst_list List [ Tuple [ int , VectorFst ]] Other FSTs required epsilon_on_replace bool False Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) reverse () -> VectorFst Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/fst/vector_fst.py 598 599 600 601 602 603 604 605 606 607 608 def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) rm_epsilon () -> VectorFst Return an equivalent FST with epsilon transitions removed. Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/fst/vector_fst.py 610 611 612 613 614 615 616 617 618 def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) shortest_path ( config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default config Union [ ShortestPathConfig , None] Configuration for shortest-path operation. None Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/fst/vector_fst.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) union ( other_fst : VectorFst ) -> VectorFst Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default other_fst VectorFst Fst to perform union with this one. required Returns: Type Description VectorFst The resulting newly-created Fst. Source code in rustfst/fst/vector_fst.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) optimize () -> VectorFst Optimize an FST in-place. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 668 669 670 671 672 673 674 675 676 677 def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self optimize_in_log () -> VectorFst Optimize an fst in-place in the log semiring. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 679 680 681 682 683 684 685 686 687 688 def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self tr_sort ( ilabel_cmp : bool = True ) Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to ArcSort in OpenFST. Parameters: Name Type Description Default ilabel_cmp bool Sort on input labels if True , output labels if False . True Source code in rustfst/fst/vector_fst.py 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) tr_unique () Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Source code in rustfst/fst/vector_fst.py 705 706 707 708 709 710 711 712 def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) isomorphic ( other : VectorFst ) -> bool Check if this Fst is isomorphic with another Parameters: Name Type Description Default other VectorFst Other Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/fst/vector_fst.py 714 715 716 717 718 719 720 721 722 723 724 def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) __add__ ( other : VectorFst ) -> VectorFst fst_1 + fst_2 is a shortcut to perform the concatenation of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to concatenate after the current Fst. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 726 727 728 729 730 731 732 733 734 735 736 737 def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) __mul__ ( other : VectorFst ) -> VectorFst fst_1 * fst_2 is a shortcut to perform the composition of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to compose with. required Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 739 740 741 742 743 744 745 746 747 748 749 def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) __or__ ( other : VectorFst ) -> VectorFst fst_1 | fst_2 is a shortcut to perform the union of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to perform the union with. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 751 752 753 754 755 756 757 758 759 760 761 762 def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) string_paths () -> StringPathsIterator Return an iterator over input/output label sequences in this FST, in no particular order . Note that this does not return the best path first. If you want to do this, you will have to first apply shortest_path . Returns: Type Description StringPathsIterator A iterator over the paths through this FST. Source code in rustfst/fst/vector_fst.py 772 773 774 775 776 777 778 779 780 781 782 783 def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self ) Functions","title":"fst"},{"location":"rustfst/fst/#rustfst.fst-classes","text":"","title":"Classes"},{"location":"rustfst/fst/#rustfst.fst.Fst","text":"This class is the base class for every Fst objects. Source code in rustfst/fst/__init__.pyclass Fst : \"\"\" This class is the base class for every Fst objects. \"\"\" def __init__ ( self , ptr , isymt = None , osymt = None ): self . ptr = ptr self . _input_symbols = isymt self . _output_symbols = osymt def start ( self ) -> Optional [ int ]: \"\"\" Returns the start state. Returns : The start state or None. \"\"\" start = ctypes . c_size_t () ret_code = lib . fst_start ( self . ptr , ctypes . byref ( start )) err_msg = \"Error getting start state\" check_ffi_error ( ret_code , err_msg ) if start is None : return None return int ( start . value ) def final ( self , state : int ) -> Optional [ float ]: \"\"\" Returns the final weight of a state. Args: state: The integer index of a state. Returns: The final Weight of that state. Raises: Exception: If State index out of range. \"\"\" state = ctypes . c_size_t ( state ) weight = ctypes . c_float () ret_code = lib . fst_final_weight ( self . ptr , state , ctypes . byref ( weight )) err_msg = \"Error getting final weight\" check_ffi_error ( ret_code , err_msg ) if weight is None : return None return weight . value def num_trs ( self , state : int ) -> int : \"\"\" Returns the number of trs leaving a state. Args: state: The integer index of a state. Returns: The number of trs leaving that state. Raises: Exception: If State index out of range. See also: `num_states`. \"\"\" num_trs = ctypes . c_size_t () state = ctypes . c_size_t ( state ) ret_code = lib . fst_num_trs ( self . ptr , state , ctypes . byref ( num_trs )) err_msg = \"Error getting number of trs\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value ) def trs ( self , state : int ) -> TrsIterator : \"\"\" Returns an iterator over trs leaving the specified state. Args: state: The source state ID. Returns: An TrsIterator. See also: `mutable_trs`, `states`. \"\"\" return TrsIterator ( self , state ) def is_final ( self , state_id : int ) -> bool : \"\"\" Check if a state is final Args : state_id: Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_final = ctypes . c_size_t () ret_code = lib . fst_is_final ( self . ptr , state , ctypes . byref ( is_final )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_final . value ) def is_start ( self , state_id : int ) -> bool : \"\"\" Check if a state is a start state. Args : state_id: Integer index of the state. Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_start = ctypes . c_size_t () ret_code = lib . fst_is_start ( self . ptr , state , ctypes . byref ( is_start )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_start . value ) def input_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's input symbol table, or None if none is present. Returns : The Fst's input symbol table, or None if none is present. See also: `output_symbols`. \"\"\" if self . _input_symbols : return self . _input_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None def output_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's output symbol table, or None if none is present. Returns : The Fst's output symbol table, or None if none is present. See also: `input_symbols`. \"\"\" if self . _output_symbols : return self . _output_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting output symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None def set_input_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the input symbol table. Passing None as a value will delete the input symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_output_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_input_symbols ( self . ptr ) err_msg = \"Error unsetting input symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _input_symbols = None return self table = syms . ptr ret_code = lib . fst_set_input_symbols ( self . ptr , table ) err_msg = \"Error setting input symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _input_symbols = syms return self def set_output_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the output symbol table. Passing None as a value will delete the output symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_input_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_output_symbols ( self . ptr ) err_msg = \"Error unsetting output symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _output_symbols = None return self table = syms . ptr ret_code = lib . fst_set_output_symbols ( self . ptr , table ) err_msg = \"Error setting output symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _output_symbols = syms return self def remove_input_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_input_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_input_symbols\" check_ffi_error ( ret_code , err_msg ) return self def remove_output_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_output_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_outout_symbols\" check_ffi_error ( ret_code , err_msg ) return self def __eq__ ( self , y : Fst ): \"\"\"x.__eq__(y) <==> x==y\"\"\" return self . equals ( y ) def __repr__ ( self ): return f \"<rustfst.fst.Fst at { id ( self ) } >\" def __del__ ( self ): lib . fst_destroy ( self . ptr )","title":"Fst"},{"location":"rustfst/fst/#rustfst.fst.Fst-functions","text":"","title":"Functions"},{"location":"rustfst/fst/#rustfst.fst.Fst.start","text":"Returns the start state. Returns The start state or None. Source code in rustfst/fst/__init__.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def start ( self ) -> Optional [ int ]: \"\"\" Returns the start state. Returns : The start state or None. \"\"\" start = ctypes . c_size_t () ret_code = lib . fst_start ( self . ptr , ctypes . byref ( start )) err_msg = \"Error getting start state\" check_ffi_error ( ret_code , err_msg ) if start is None : return None return int ( start . value )","title":"start()"},{"location":"rustfst/fst/#rustfst.fst.Fst.final","text":"Returns the final weight of a state. Parameters: Name Type Description Default state int The integer index of a state. required Returns: Type Description Optional [ float ] The final Weight of that state. Raises: Type Description Exception If State index out of range. Source code in rustfst/fst/__init__.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def final ( self , state : int ) -> Optional [ float ]: \"\"\" Returns the final weight of a state. Args: state: The integer index of a state. Returns: The final Weight of that state. Raises: Exception: If State index out of range. \"\"\" state = ctypes . c_size_t ( state ) weight = ctypes . c_float () ret_code = lib . fst_final_weight ( self . ptr , state , ctypes . byref ( weight )) err_msg = \"Error getting final weight\" check_ffi_error ( ret_code , err_msg ) if weight is None : return None return weight . value","title":"final()"},{"location":"rustfst/fst/#rustfst.fst.Fst.num_trs","text":"Returns the number of trs leaving a state. Parameters: Name Type Description Default state int The integer index of a state. required Returns: Type Description int The number of trs leaving that state. Raises: Type Description Exception If State index out of range. See also: num_states . Source code in rustfst/fst/__init__.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def num_trs ( self , state : int ) -> int : \"\"\" Returns the number of trs leaving a state. Args: state: The integer index of a state. Returns: The number of trs leaving that state. Raises: Exception: If State index out of range. See also: `num_states`. \"\"\" num_trs = ctypes . c_size_t () state = ctypes . c_size_t ( state ) ret_code = lib . fst_num_trs ( self . ptr , state , ctypes . byref ( num_trs )) err_msg = \"Error getting number of trs\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value )","title":"num_trs()"},{"location":"rustfst/fst/#rustfst.fst.Fst.trs","text":"Returns an iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description TrsIterator An TrsIterator. See also: mutable_trs , states . Source code in rustfst/fst/__init__.py 79 80 81 82 83 84 85 86 87 88 def trs ( self , state : int ) -> TrsIterator : \"\"\" Returns an iterator over trs leaving the specified state. Args: state: The source state ID. Returns: An TrsIterator. See also: `mutable_trs`, `states`. \"\"\" return TrsIterator ( self , state )","title":"trs()"},{"location":"rustfst/fst/#rustfst.fst.Fst.is_final","text":"Check if a state is final Args state_id: Returns bool Source code in rustfst/fst/__init__.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def is_final ( self , state_id : int ) -> bool : \"\"\" Check if a state is final Args : state_id: Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_final = ctypes . c_size_t () ret_code = lib . fst_is_final ( self . ptr , state , ctypes . byref ( is_final )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_final . value )","title":"is_final()"},{"location":"rustfst/fst/#rustfst.fst.Fst.is_start","text":"Check if a state is a start state. Args state_id: Integer index of the state. Returns bool Source code in rustfst/fst/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def is_start ( self , state_id : int ) -> bool : \"\"\" Check if a state is a start state. Args : state_id: Integer index of the state. Returns : bool \"\"\" state = ctypes . c_size_t ( state_id ) is_start = ctypes . c_size_t () ret_code = lib . fst_is_start ( self . ptr , state , ctypes . byref ( is_start )) err_msg = \"Error checking if state is final\" check_ffi_error ( ret_code , err_msg ) return bool ( is_start . value )","title":"is_start()"},{"location":"rustfst/fst/#rustfst.fst.Fst.input_symbols","text":"Returns the Fst's input symbol table, or None if none is present. Returns The Fst's input symbol table, or None if none is present. See also: output_symbols . Source code in rustfst/fst/__init__.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def input_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's input symbol table, or None if none is present. Returns : The Fst's input symbol table, or None if none is present. See also: `output_symbols`. \"\"\" if self . _input_symbols : return self . _input_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None","title":"input_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.output_symbols","text":"Returns the Fst's output symbol table, or None if none is present. Returns The Fst's output symbol table, or None if none is present. See also: input_symbols . Source code in rustfst/fst/__init__.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def output_symbols ( self ) -> Optional [ SymbolTable ]: \"\"\" Returns the Fst's output symbol table, or None if none is present. Returns : The Fst's output symbol table, or None if none is present. See also: `input_symbols`. \"\"\" if self . _output_symbols : return self . _output_symbols table = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( table )) err_msg = \"Error getting output symbols\" check_ffi_error ( ret_code , err_msg ) if table . contents : return SymbolTable ( ptr = table ) return None","title":"output_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.set_input_symbols","text":"Sets the input symbol table. Passing None as a value will delete the input symbol table. Parameters: Name Type Description Default syms Optional [ SymbolTable ] A SymbolTable. required Returns: Type Description Fst self. See also: set_output_symbols . Source code in rustfst/fst/__init__.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def set_input_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the input symbol table. Passing None as a value will delete the input symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_output_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_input_symbols ( self . ptr ) err_msg = \"Error unsetting input symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _input_symbols = None return self table = syms . ptr ret_code = lib . fst_set_input_symbols ( self . ptr , table ) err_msg = \"Error setting input symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _input_symbols = syms return self","title":"set_input_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.set_output_symbols","text":"Sets the output symbol table. Passing None as a value will delete the output symbol table. Parameters: Name Type Description Default syms Optional [ SymbolTable ] A SymbolTable. required Returns: Type Description Fst self. See also: set_input_symbols . Source code in rustfst/fst/__init__.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def set_output_symbols ( self , syms : Optional [ SymbolTable ]) -> Fst : \"\"\" Sets the output symbol table. Passing None as a value will delete the output symbol table. Args: syms: A SymbolTable. Returns: self. See also: `set_input_symbols`. \"\"\" if syms is None : ret_code = lib . fst_unset_output_symbols ( self . ptr ) err_msg = \"Error unsetting output symbols\" check_ffi_error ( ret_code , err_msg ) # detach symbol table from fst self . _output_symbols = None return self table = syms . ptr ret_code = lib . fst_set_output_symbols ( self . ptr , table ) err_msg = \"Error setting output symbols\" check_ffi_error ( ret_code , err_msg ) # attach symbol table to fst (prevent early gc of syms) self . _output_symbols = syms return self","title":"set_output_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.remove_input_symbols","text":"Parameters: Name Type Description Default symbols list [ int ] List[int] required Returns: Type Description Fst self. Source code in rustfst/fst/__init__.py 220 221 222 223 224 225 226 227 228 229 230 231 232 233 def remove_input_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_input_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_input_symbols\" check_ffi_error ( ret_code , err_msg ) return self","title":"remove_input_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.remove_output_symbols","text":"Parameters: Name Type Description Default symbols list [ int ] List[int] required Returns: Type Description Fst self. Source code in rustfst/fst/__init__.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def remove_output_symbols ( self , symbols : list [ int ]) -> Fst : \"\"\" Args: symbols: List[int] Returns: self. \"\"\" symbols_ptr = ( ctypes . c_int * len ( symbols ))( * symbols ) symbols_len = ctypes . c_size_t ( len ( symbols )) ret_code = lib . fst_remove_output_symbols ( self . ptr , symbols_ptr , symbols_len ) err_msg = \"Error during remove_outout_symbols\" check_ffi_error ( ret_code , err_msg ) return self","title":"remove_output_symbols()"},{"location":"rustfst/fst/#rustfst.fst.Fst.__eq__","text":"x. eq (y) <==> x==y Source code in rustfst/fst/__init__.py 250 251 252 def __eq__ ( self , y : Fst ): \"\"\"x.__eq__(y) <==> x==y\"\"\" return self . equals ( y )","title":"__eq__()"},{"location":"rustfst/fst/#rustfst.fst-modules","text":"","title":"Modules"},{"location":"rustfst/fst/#rustfst.fst.const_fst","text":"","title":"const_fst"},{"location":"rustfst/fst/#rustfst.fst.const_fst-classes","text":"","title":"Classes"},{"location":"rustfst/fst/#rustfst.fst.const_fst.ConstFst","text":"Bases: Fst Source code in rustfst/fst/const_fst.pyclass ConstFst ( Fst ): def __init__ ( self , ptr = None ): if ptr : self . ptr = ptr else : raise ValueError ( \"Const fst should be init with a pointer or loaded from a file\" ) super () . __init__ ( self . ptr ) def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . const_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying ConstFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) Functions draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/const_fst.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> ConstFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description ConstFst An FST. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/const_fst.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) from_vector_fst ( fst : VectorFst ) -> ConstFst classmethod Converts a given VectorFst to ConstFst Parameters: Name Type Description Default fst VectorFst The VectorFst that should be converted required Returns: Type Description ConstFst A ConstFst Raises: Type Description ValueError Conversion failed Source code in rustfst/fst/const_fst.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/const_fst.py 127 128 129 130 131 132 133 134 135 136 137 138 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other Args other: Fst instance Returns: Type Description bool bool Source code in rustfst/fst/const_fst.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> ConstFst Returns Deepcopy of the Fst. Source code in rustfst/fst/const_fst.py 156 157 158 159 160 161 162 163 164 165 166 def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst )","title":"ConstFst"},{"location":"rustfst/fst/#rustfst.fst.vector_fst","text":"","title":"vector_fst"},{"location":"rustfst/fst/#rustfst.fst.vector_fst-classes","text":"","title":"Classes"},{"location":"rustfst/fst/#rustfst.fst.vector_fst.VectorFst","text":"Bases: Fst Source code in rustfst/fst/vector_fst.pyclass VectorFst ( Fst ): def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . vec_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying VectorFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self ) Functions __init__ ( ptr = None ) Creates an empty VectorFst. Source code in rustfst/fst/vector_fst.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) add_tr ( state : int , tr : Tr ) -> Fst Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Parameters: Name Type Description Default state int The integer index of the source state. required tr Tr The tr to add. required Returns: Type Description Fst self. Raises: Type Description SnipsFstException If State index out of range. See also: add_state . Source code in rustfst/fst/vector_fst.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self add_state () -> int Adds a new state to the FST and returns the state ID. Returns: Type Description int The integer index of the new state. See also: add_tr , set_start , set_final . Source code in rustfst/fst/vector_fst.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value set_final ( state : int , weight : Union [ float , None ] = None ) Sets the final weight for a state. Parameters: Name Type Description Default state int The integer index of a state. required weight Union [ float , None] A float indicating the desired final weight; if omitted, it is set to semiring One. None Raises: Type Description ValueError State index out of range or Incompatible or invalid weight. See also: set_start . Source code in rustfst/fst/vector_fst.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) unset_final ( state : int ) Unset the final weight of a state. As a result, the state is no longer final. Parameters: Name Type Description Default state int The integer index of a state required Raises: Type Description ValueError State index out of range. Source code in rustfst/fst/vector_fst.py 121 122 123 124 125 126 127 128 129 130 131 132 def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) mutable_trs ( state : int ) -> MutableTrsIterator Returns a mutable iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description MutableTrsIterator A MutableTrsIterator. See also: trs , states . Source code in rustfst/fst/vector_fst.py 134 135 136 137 138 139 140 141 142 143 def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) delete_states () Delete all the states Source code in rustfst/fst/vector_fst.py 145 146 147 148 149 150 151 def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) num_states () -> int Returns the number of states. Returns: Type Description int Number of states present in the Fst. Source code in rustfst/fst/vector_fst.py 153 154 155 156 157 158 159 160 161 162 163 164 def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) set_start ( state : int ) Sets a state to be the initial state state. Parameters: Name Type Description Default state int The integer index of a state. required Raises: Type Description ValueError If State index out of range. See also: set_final . Source code in rustfst/fst/vector_fst.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) states () -> StateIterator Returns an iterator over all states in the FST. Returns: Type Description StateIterator A StateIterator object for the FST. See also: trs , mutable_trs . Source code in rustfst/fst/vector_fst.py 180 181 182 183 184 185 186 187 def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) relabel_tables ( * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True ) -> VectorFst Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new SymbolTable . If the Fst has a label 1 corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Parameters: Name Type Description Default old_isymbols Optional [ SymbolTable ] Input SymbolTable used to build the Fst. If None , uses the Input SymbolTable attached to the Fst. None new_isymbols SymbolTable New Input SymbolTable to use. required attach_new_isymbols bool Whether to attach the new Input SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Input SymbolTable . True old_osymbols Optional [ SymbolTable ] Output SymbolTable used to build the Fst. If None , uses the Output SymbolTable attached to the Fst None new_osymbols SymbolTable New Output SymbolTable to use. required attach_new_osymbols bool Whether to attach the new Output SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Output SymbolTable . True Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/vector_fst.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> VectorFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description VectorFst An Fst. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/vector_fst.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in vector binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/vector_fst.py 330 331 332 333 334 335 336 337 338 339 340 341 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) from_bytes ( data : bytes ) -> VectorFst classmethod Load a VectorFst from a sequence of bytes. Parameters: Name Type Description Default data bytes Sequence of bytes. required Returns: Type Description VectorFst Loaded VectorFst . Source code in rustfst/fst/vector_fst.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) to_bytes () -> bytes Turns the VectorFst into bytes. Returns: Type Description bytes Sequence of bytes. Source code in rustfst/fst/vector_fst.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other. Parameters: Name Type Description Default other Fst Fst instance required Returns: Type Description bool Whether both Fst are equals. Source code in rustfst/fst/vector_fst.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> VectorFst Returns: Type Description VectorFst A copy of the Fst. Source code in rustfst/fst/vector_fst.py 406 407 408 409 410 411 412 413 414 415 416 def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) compose ( other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst Compute composition of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to compose with. required config Union [ ComposeConfig , None] Config parameters of the composition. None Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) concat ( other : VectorFst ) -> VectorFst Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to concatenate with. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) connect () -> VectorFst This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input Output Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) top_sort () -> VectorFst This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/fst/vector_fst.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) determinize ( config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default config Union [ DeterminizeConfig , None] Configuration for the determinization operation. None Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 496 497 498 499 500 501 502 503 504 505 506 507 508 def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) minimize ( config : Union [ MinimizeConfig , None ] = None ) -> VectorFst Minimize an FST in place Parameters: Name Type Description Default config Union [ MinimizeConfig , None] Configuration for the minimization operation. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 510 511 512 513 514 515 516 517 518 519 520 521 522 def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) project ( proj_type : Union [ ProjectType , None ] = None ) -> VectorFst Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default proj_type Union [ ProjectType , None] Whether to replace input labels or output labels. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) replace ( root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False ) -> VectorFst Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_label int Label for self required fst_list List [ Tuple [ int , VectorFst ]] Other FSTs required epsilon_on_replace bool False Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) reverse () -> VectorFst Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/fst/vector_fst.py 598 599 600 601 602 603 604 605 606 607 608 def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) rm_epsilon () -> VectorFst Return an equivalent FST with epsilon transitions removed. Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/fst/vector_fst.py 610 611 612 613 614 615 616 617 618 def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) shortest_path ( config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default config Union [ ShortestPathConfig , None] Configuration for shortest-path operation. None Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/fst/vector_fst.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) union ( other_fst : VectorFst ) -> VectorFst Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default other_fst VectorFst Fst to perform union with this one. required Returns: Type Description VectorFst The resulting newly-created Fst. Source code in rustfst/fst/vector_fst.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) optimize () -> VectorFst Optimize an FST in-place. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 668 669 670 671 672 673 674 675 676 677 def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self optimize_in_log () -> VectorFst Optimize an fst in-place in the log semiring. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 679 680 681 682 683 684 685 686 687 688 def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self tr_sort ( ilabel_cmp : bool = True ) Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to ArcSort in OpenFST. Parameters: Name Type Description Default ilabel_cmp bool Sort on input labels if True , output labels if False . True Source code in rustfst/fst/vector_fst.py 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) tr_unique () Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Source code in rustfst/fst/vector_fst.py 705 706 707 708 709 710 711 712 def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) isomorphic ( other : VectorFst ) -> bool Check if this Fst is isomorphic with another Parameters: Name Type Description Default other VectorFst Other Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/fst/vector_fst.py 714 715 716 717 718 719 720 721 722 723 724 def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) __add__ ( other : VectorFst ) -> VectorFst fst_1 + fst_2 is a shortcut to perform the concatenation of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to concatenate after the current Fst. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 726 727 728 729 730 731 732 733 734 735 736 737 def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) __mul__ ( other : VectorFst ) -> VectorFst fst_1 * fst_2 is a shortcut to perform the composition of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to compose with. required Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 739 740 741 742 743 744 745 746 747 748 749 def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) __or__ ( other : VectorFst ) -> VectorFst fst_1 | fst_2 is a shortcut to perform the union of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to perform the union with. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 751 752 753 754 755 756 757 758 759 760 761 762 def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) string_paths () -> StringPathsIterator Return an iterator over input/output label sequences in this FST, in no particular order . Note that this does not return the best path first. If you want to do this, you will have to first apply shortest_path . Returns: Type Description StringPathsIterator A iterator over the paths through this FST. Source code in rustfst/fst/vector_fst.py 772 773 774 775 776 777 778 779 780 781 782 783 def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self )","title":"VectorFst"},{"location":"rustfst/fst/#rustfst.fst.vector_fst-functions","text":"","title":"Functions"},{"location":"rustfst/fst/const_fst/","text":"Classes ConstFst Bases: Fst Source code in rustfst/fst/const_fst.pyclass ConstFst ( Fst ): def __init__ ( self , ptr = None ): if ptr : self . ptr = ptr else : raise ValueError ( \"Const fst should be init with a pointer or loaded from a file\" ) super () . __init__ ( self . ptr ) def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . const_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying ConstFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) Functions draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/const_fst.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> ConstFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description ConstFst An FST. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/const_fst.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) from_vector_fst ( fst : VectorFst ) -> ConstFst classmethod Converts a given VectorFst to ConstFst Parameters: Name Type Description Default fst VectorFst The VectorFst that should be converted required Returns: Type Description ConstFst A ConstFst Raises: Type Description ValueError Conversion failed Source code in rustfst/fst/const_fst.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/const_fst.py 127 128 129 130 131 132 133 134 135 136 137 138 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other Args other: Fst instance Returns: Type Description bool bool Source code in rustfst/fst/const_fst.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> ConstFst Returns Deepcopy of the Fst. Source code in rustfst/fst/const_fst.py 156 157 158 159 160 161 162 163 164 165 166 def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst )","title":"const_fst"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst-classes","text":"","title":"Classes"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst","text":"Bases: Fst Source code in rustfst/fst/const_fst.pyclass ConstFst ( Fst ): def __init__ ( self , ptr = None ): if ptr : self . ptr = ptr else : raise ValueError ( \"Const fst should be init with a pointer or loaded from a file\" ) super () . __init__ ( self . ptr ) def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . const_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying ConstFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" )","title":"ConstFst"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst-functions","text":"","title":"Functions"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.draw","text":"Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/const_fst.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . const_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg )","title":"draw()"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.read","text":"Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description ConstFst An FST. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/const_fst.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @classmethod def read ( cls , filename : Union [ str , Path ]) -> ConstFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An FST. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst )","title":"read()"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.from_vector_fst","text":"Converts a given VectorFst to ConstFst Parameters: Name Type Description Default fst VectorFst The VectorFst that should be converted required Returns: Type Description ConstFst A ConstFst Raises: Type Description ValueError Conversion failed Source code in rustfst/fst/const_fst.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @classmethod def from_vector_fst ( cls , fst : VectorFst ) -> ConstFst : \"\"\" Converts a given `VectorFst` to `ConstFst` Args: fst: The `VectorFst` that should be converted Returns: A `ConstFst` Raises: ValueError: Conversion failed \"\"\" const_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . const_fst_from_vec_fst ( fst . ptr , ctypes . byref ( const_fst )) err_msg = \"Failed to convert VectorFST to ConstFST\" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = const_fst )","title":"from_vector_fst()"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.write","text":"Serializes FST to a file. This method writes the FST to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/const_fst.py 127 128 129 130 131 132 133 134 135 136 137 138 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . const_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg )","title":"write()"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.equals","text":"Check if this Fst is equal to the other Args other: Fst instance Returns: Type Description bool bool Source code in rustfst/fst/const_fst.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other Args : other: Fst instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . const_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value )","title":"equals()"},{"location":"rustfst/fst/const_fst/#rustfst.fst.const_fst.ConstFst.copy","text":"Returns Deepcopy of the Fst. Source code in rustfst/fst/const_fst.py 156 157 158 159 160 161 162 163 164 165 166 def copy ( self ) -> ConstFst : \"\"\" Returns : Deepcopy of the Fst. \"\"\" cloned_fst = ctypes . c_size_t () ret_code = lib . const_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return ConstFst ( cloned_fst )","title":"copy()"},{"location":"rustfst/fst/vector_fst/","text":"Classes VectorFst Bases: Fst Source code in rustfst/fst/vector_fst.pyclass VectorFst ( Fst ): def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . vec_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying VectorFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self ) Functions __init__ ( ptr = None ) Creates an empty VectorFst. Source code in rustfst/fst/vector_fst.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) add_tr ( state : int , tr : Tr ) -> Fst Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Parameters: Name Type Description Default state int The integer index of the source state. required tr Tr The tr to add. required Returns: Type Description Fst self. Raises: Type Description SnipsFstException If State index out of range. See also: add_state . Source code in rustfst/fst/vector_fst.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self add_state () -> int Adds a new state to the FST and returns the state ID. Returns: Type Description int The integer index of the new state. See also: add_tr , set_start , set_final . Source code in rustfst/fst/vector_fst.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value set_final ( state : int , weight : Union [ float , None ] = None ) Sets the final weight for a state. Parameters: Name Type Description Default state int The integer index of a state. required weight Union [ float , None] A float indicating the desired final weight; if omitted, it is set to semiring One. None Raises: Type Description ValueError State index out of range or Incompatible or invalid weight. See also: set_start . Source code in rustfst/fst/vector_fst.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) unset_final ( state : int ) Unset the final weight of a state. As a result, the state is no longer final. Parameters: Name Type Description Default state int The integer index of a state required Raises: Type Description ValueError State index out of range. Source code in rustfst/fst/vector_fst.py 121 122 123 124 125 126 127 128 129 130 131 132 def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) mutable_trs ( state : int ) -> MutableTrsIterator Returns a mutable iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description MutableTrsIterator A MutableTrsIterator. See also: trs , states . Source code in rustfst/fst/vector_fst.py 134 135 136 137 138 139 140 141 142 143 def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) delete_states () Delete all the states Source code in rustfst/fst/vector_fst.py 145 146 147 148 149 150 151 def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) num_states () -> int Returns the number of states. Returns: Type Description int Number of states present in the Fst. Source code in rustfst/fst/vector_fst.py 153 154 155 156 157 158 159 160 161 162 163 164 def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) set_start ( state : int ) Sets a state to be the initial state state. Parameters: Name Type Description Default state int The integer index of a state. required Raises: Type Description ValueError If State index out of range. See also: set_final . Source code in rustfst/fst/vector_fst.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) states () -> StateIterator Returns an iterator over all states in the FST. Returns: Type Description StateIterator A StateIterator object for the FST. See also: trs , mutable_trs . Source code in rustfst/fst/vector_fst.py 180 181 182 183 184 185 186 187 def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) relabel_tables ( * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True ) -> VectorFst Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new SymbolTable . If the Fst has a label 1 corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Parameters: Name Type Description Default old_isymbols Optional [ SymbolTable ] Input SymbolTable used to build the Fst. If None , uses the Input SymbolTable attached to the Fst. None new_isymbols SymbolTable New Input SymbolTable to use. required attach_new_isymbols bool Whether to attach the new Input SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Input SymbolTable . True old_osymbols Optional [ SymbolTable ] Output SymbolTable used to build the Fst. If None , uses the Output SymbolTable attached to the Fst None new_osymbols SymbolTable New Output SymbolTable to use. required attach_new_osymbols bool Whether to attach the new Output SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Output SymbolTable . True Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self draw ( filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig ()) Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/vector_fst.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) read ( filename : Union [ str , Path ]) -> VectorFst classmethod Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description VectorFst An Fst. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/vector_fst.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) write ( filename : Union [ str , Path ]) Serializes FST to a file. This method writes the FST to a file in vector binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/vector_fst.py 330 331 332 333 334 335 336 337 338 339 340 341 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) from_bytes ( data : bytes ) -> VectorFst classmethod Load a VectorFst from a sequence of bytes. Parameters: Name Type Description Default data bytes Sequence of bytes. required Returns: Type Description VectorFst Loaded VectorFst . Source code in rustfst/fst/vector_fst.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) to_bytes () -> bytes Turns the VectorFst into bytes. Returns: Type Description bytes Sequence of bytes. Source code in rustfst/fst/vector_fst.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) equals ( other : Fst ) -> bool Check if this Fst is equal to the other. Parameters: Name Type Description Default other Fst Fst instance required Returns: Type Description bool Whether both Fst are equals. Source code in rustfst/fst/vector_fst.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) copy () -> VectorFst Returns: Type Description VectorFst A copy of the Fst. Source code in rustfst/fst/vector_fst.py 406 407 408 409 410 411 412 413 414 415 416 def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) compose ( other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst Compute composition of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to compose with. required config Union [ ComposeConfig , None] Config parameters of the composition. None Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) concat ( other : VectorFst ) -> VectorFst Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to concatenate with. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) connect () -> VectorFst This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input Output Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) top_sort () -> VectorFst This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/fst/vector_fst.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) determinize ( config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst Make an Fst deterministic Parameters: Name Type Description Default config Union [ DeterminizeConfig , None] Configuration for the determinization operation. None Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 496 497 498 499 500 501 502 503 504 505 506 507 508 def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) minimize ( config : Union [ MinimizeConfig , None ] = None ) -> VectorFst Minimize an FST in place Parameters: Name Type Description Default config Union [ MinimizeConfig , None] Configuration for the minimization operation. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 510 511 512 513 514 515 516 517 518 519 520 521 522 def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) project ( proj_type : Union [ ProjectType , None ] = None ) -> VectorFst Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default proj_type Union [ ProjectType , None] Whether to replace input labels or output labels. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) replace ( root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False ) -> VectorFst Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_label int Label for self required fst_list List [ Tuple [ int , VectorFst ]] Other FSTs required epsilon_on_replace bool False Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) reverse () -> VectorFst Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/fst/vector_fst.py 598 599 600 601 602 603 604 605 606 607 608 def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) rm_epsilon () -> VectorFst Return an equivalent FST with epsilon transitions removed. Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/fst/vector_fst.py 610 611 612 613 614 615 616 617 618 def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) shortest_path ( config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default config Union [ ShortestPathConfig , None] Configuration for shortest-path operation. None Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/fst/vector_fst.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) union ( other_fst : VectorFst ) -> VectorFst Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default other_fst VectorFst Fst to perform union with this one. required Returns: Type Description VectorFst The resulting newly-created Fst. Source code in rustfst/fst/vector_fst.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) optimize () -> VectorFst Optimize an FST in-place. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 668 669 670 671 672 673 674 675 676 677 def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self optimize_in_log () -> VectorFst Optimize an fst in-place in the log semiring. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 679 680 681 682 683 684 685 686 687 688 def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self tr_sort ( ilabel_cmp : bool = True ) Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to ArcSort in OpenFST. Parameters: Name Type Description Default ilabel_cmp bool Sort on input labels if True , output labels if False . True Source code in rustfst/fst/vector_fst.py 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) tr_unique () Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Source code in rustfst/fst/vector_fst.py 705 706 707 708 709 710 711 712 def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) isomorphic ( other : VectorFst ) -> bool Check if this Fst is isomorphic with another Parameters: Name Type Description Default other VectorFst Other Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/fst/vector_fst.py 714 715 716 717 718 719 720 721 722 723 724 def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) __add__ ( other : VectorFst ) -> VectorFst fst_1 + fst_2 is a shortcut to perform the concatenation of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to concatenate after the current Fst. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 726 727 728 729 730 731 732 733 734 735 736 737 def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) __mul__ ( other : VectorFst ) -> VectorFst fst_1 * fst_2 is a shortcut to perform the composition of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to compose with. required Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 739 740 741 742 743 744 745 746 747 748 749 def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) __or__ ( other : VectorFst ) -> VectorFst fst_1 | fst_2 is a shortcut to perform the union of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to perform the union with. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 751 752 753 754 755 756 757 758 759 760 761 762 def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) string_paths () -> StringPathsIterator Return an iterator over input/output label sequences in this FST, in no particular order . Note that this does not return the best path first. If you want to do this, you will have to first apply shortest_path . Returns: Type Description StringPathsIterator A iterator over the paths through this FST. Source code in rustfst/fst/vector_fst.py 772 773 774 775 776 777 778 779 780 781 782 783 def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self ) Functions","title":"vector_fst"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst-classes","text":"","title":"Classes"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst","text":"Bases: Fst Source code in rustfst/fst/vector_fst.pyclass VectorFst ( Fst ): def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols ) def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg ) def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg ) def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state ) def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg ) def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value ) def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg ) def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self ) def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr ) def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] ) def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst ) def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other ) def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other ) def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self ) def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self ) def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self ) def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self ) def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type ) def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace ) def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self ) def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self ) def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self ) def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst ) def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp ) def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self ) def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other ) def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other ) def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other ) def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other ) def __str__ ( self ): s = ctypes . c_void_p () ret_code = lib . vec_fst_display ( self . ptr , ctypes . byref ( s )) err_msg = \"Error displaying VectorFst\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( s ) . decode ( \"utf8\" ) def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self )","title":"VectorFst"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst-functions","text":"","title":"Functions"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.__init__","text":"Creates an empty VectorFst. Source code in rustfst/fst/vector_fst.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def __init__ ( self , ptr = None ): \"\"\" Creates an empty VectorFst. \"\"\" self . _input_symbols = None self . _output_symbols = None if ptr : self . ptr = ptr # Check if isymt inside isymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_input_symbols ( self . ptr , ctypes . byref ( isymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if isymt . contents : self . _input_symbols = SymbolTable ( ptr = isymt ) # Check if osymt inside osymt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . fst_output_symbols ( self . ptr , ctypes . byref ( osymt )) err_msg = \"Error getting input symbols\" check_ffi_error ( ret_code , err_msg ) if osymt . contents : self . _output_symbols = SymbolTable ( ptr = osymt ) else : fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_new ( ctypes . byref ( fst_ptr )) err_msg = \"Something went wrong when creating the Fst struct\" check_ffi_error ( ret_code , err_msg ) self . ptr = fst_ptr super () . __init__ ( self . ptr , self . _input_symbols , self . _output_symbols )","title":"__init__()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.add_tr","text":"Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Parameters: Name Type Description Default state int The integer index of the source state. required tr Tr The tr to add. required Returns: Type Description Fst self. Raises: Type Description SnipsFstException If State index out of range. See also: add_state . Source code in rustfst/fst/vector_fst.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def add_tr ( self , state : int , tr : Tr ) -> Fst : \"\"\" Adds a new tr to the FST and return self. Note the tr should be considered consumed and is not safe to use it after. Args: state: The integer index of the source state. tr: The tr to add. Returns: self. Raises: SnipsFstException: If State index out of range. See also: `add_state`. \"\"\" ret_code = lib . vec_fst_add_tr ( self . ptr , ctypes . c_size_t ( state ), tr . ptr ) err_msg = \"Error during `add_tr`\" check_ffi_error ( ret_code , err_msg ) return self","title":"add_tr()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.add_state","text":"Adds a new state to the FST and returns the state ID. Returns: Type Description int The integer index of the new state. See also: add_tr , set_start , set_final . Source code in rustfst/fst/vector_fst.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def add_state ( self ) -> int : \"\"\" Adds a new state to the FST and returns the state ID. Returns: The integer index of the new state. See also: `add_tr`, `set_start`, `set_final`. \"\"\" state_id = ctypes . c_size_t () ret_code = lib . vec_fst_add_state ( self . ptr , ctypes . byref ( state_id )) err_msg = \"Error during `add_state`\" check_ffi_error ( ret_code , err_msg ) return state_id . value","title":"add_state()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.set_final","text":"Sets the final weight for a state. Parameters: Name Type Description Default state int The integer index of a state. required weight Union [ float , None] A float indicating the desired final weight; if omitted, it is set to semiring One. None Raises: Type Description ValueError State index out of range or Incompatible or invalid weight. See also: set_start . Source code in rustfst/fst/vector_fst.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def set_final ( self , state : int , weight : Union [ float , None ] = None ): \"\"\" Sets the final weight for a state. Args: state: The integer index of a state. weight: A float indicating the desired final weight; if omitted, it is set to semiring One. Raises: ValueError: State index out of range or Incompatible or invalid weight. See also: `set_start`. \"\"\" if weight is None : weight = weight_one () cstate = ctypes . c_size_t ( state ) cweight = ctypes . c_float ( weight ) ret_code = lib . vec_fst_set_final ( self . ptr , cstate , cweight ) err_msg = \"Error setting final state\" check_ffi_error ( ret_code , err_msg )","title":"set_final()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.unset_final","text":"Unset the final weight of a state. As a result, the state is no longer final. Parameters: Name Type Description Default state int The integer index of a state required Raises: Type Description ValueError State index out of range. Source code in rustfst/fst/vector_fst.py 121 122 123 124 125 126 127 128 129 130 131 132 def unset_final ( self , state : int ): \"\"\" Unset the final weight of a state. As a result, the state is no longer final. Args: state: The integer index of a state Raises: ValueError: State index out of range. \"\"\" cstate = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_del_final_weight ( self . ptr , cstate ) err_msg = \"Error unsetting final state\" check_ffi_error ( ret_code , err_msg )","title":"unset_final()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.mutable_trs","text":"Returns a mutable iterator over trs leaving the specified state. Parameters: Name Type Description Default state int The source state ID. required Returns: Type Description MutableTrsIterator A MutableTrsIterator. See also: trs , states . Source code in rustfst/fst/vector_fst.py 134 135 136 137 138 139 140 141 142 143 def mutable_trs ( self , state : int ) -> MutableTrsIterator : \"\"\" Returns a mutable iterator over trs leaving the specified state. Args: state: The source state ID. Returns: A MutableTrsIterator. See also: `trs`, `states`. \"\"\" return MutableTrsIterator ( self , state )","title":"mutable_trs()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.delete_states","text":"Delete all the states Source code in rustfst/fst/vector_fst.py 145 146 147 148 149 150 151 def delete_states ( self ): \"\"\" Delete all the states \"\"\" ret_code = lib . vec_fst_delete_states ( self . ptr ) err_msg = \"Error deleting states\" check_ffi_error ( ret_code , err_msg )","title":"delete_states()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.num_states","text":"Returns the number of states. Returns: Type Description int Number of states present in the Fst. Source code in rustfst/fst/vector_fst.py 153 154 155 156 157 158 159 160 161 162 163 164 def num_states ( self ) -> int : \"\"\" Returns the number of states. Returns: Number of states present in the Fst. \"\"\" num_states = ctypes . c_size_t () ret_code = lib . vec_fst_num_states ( self . ptr , ctypes . byref ( num_states )) err_msg = \"Error getting number of states\" check_ffi_error ( ret_code , err_msg ) return int ( num_states . value )","title":"num_states()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.set_start","text":"Sets a state to be the initial state state. Parameters: Name Type Description Default state int The integer index of a state. required Raises: Type Description ValueError If State index out of range. See also: set_final . Source code in rustfst/fst/vector_fst.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def set_start ( self , state : int ): \"\"\" Sets a state to be the initial state state. Args: state: The integer index of a state. Raises: ValueError: If State index out of range. See also: `set_final`. \"\"\" state_id = ctypes . c_size_t ( state ) ret_code = lib . vec_fst_set_start ( self . ptr , state_id ) err_msg = \"Error setting start state\" check_ffi_error ( ret_code , err_msg )","title":"set_start()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.states","text":"Returns an iterator over all states in the FST. Returns: Type Description StateIterator A StateIterator object for the FST. See also: trs , mutable_trs . Source code in rustfst/fst/vector_fst.py 180 181 182 183 184 185 186 187 def states ( self ) -> StateIterator : \"\"\" Returns an iterator over all states in the FST. Returns: A StateIterator object for the FST. See also: `trs`, `mutable_trs`. \"\"\" return StateIterator ( self )","title":"states()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.relabel_tables","text":"Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new SymbolTable . If the Fst has a label 1 corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Parameters: Name Type Description Default old_isymbols Optional [ SymbolTable ] Input SymbolTable used to build the Fst. If None , uses the Input SymbolTable attached to the Fst. None new_isymbols SymbolTable New Input SymbolTable to use. required attach_new_isymbols bool Whether to attach the new Input SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Input SymbolTable . True old_osymbols Optional [ SymbolTable ] Output SymbolTable used to build the Fst. If None , uses the Output SymbolTable attached to the Fst None new_osymbols SymbolTable New Output SymbolTable to use. required attach_new_osymbols bool Whether to attach the new Output SymbolTable to the Fst. If False, the resulting Fst won't contain any attached Output SymbolTable . True Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def relabel_tables ( self , * , old_isymbols : Optional [ SymbolTable ] = None , new_isymbols : SymbolTable , attach_new_isymbols : bool = True , old_osymbols : Optional [ SymbolTable ] = None , new_osymbols : SymbolTable , attach_new_osymbols : bool = True , ) -> VectorFst : \"\"\" Destructively relabel the Fst with new Symbol Tables. Relabelling refers to the operation where all the labels of an Fst are mapped to the equivalent labels of a new `SymbolTable`. If the Fst has a label `1` corresponding to the symbol \"alpha\" in the current symbol table and \"alpha\" is mapped to 4 in a new SymbolTable, then all the 1 are going to be mapped to 4. Args: old_isymbols: Input `SymbolTable` used to build the Fst. If `None`, uses the Input `SymbolTable` attached to the Fst. new_isymbols: New Input `SymbolTable` to use. attach_new_isymbols: Whether to attach the new Input `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Input `SymbolTable`. old_osymbols: Output `SymbolTable` used to build the Fst. If `None`, uses the Output `SymbolTable` attached to the Fst new_osymbols: New Output `SymbolTable` to use. attach_new_osymbols: Whether to attach the new Output `SymbolTable` to the Fst. If False, the resulting Fst won't contain any attached Output `SymbolTable`. Returns: self \"\"\" old_isymbols_ptr = old_isymbols . ptr if old_isymbols is not None else None old_osymbols_ptr = old_osymbols . ptr if old_osymbols is not None else None ret_code = lib . vec_fst_relabel_tables ( self . ptr , old_isymbols_ptr , new_isymbols . ptr , ctypes . c_size_t ( attach_new_isymbols ), old_osymbols_ptr , new_osymbols . ptr , ctypes . c_size_t ( attach_new_osymbols ), ) err_msg = \"Relabel tables failed\" check_ffi_error ( ret_code , err_msg ) # Necessary because the symts are cached on the python side. if attach_new_isymbols : self . _input_symbols = new_isymbols else : self . _input_symbols = None if attach_new_osymbols : self . _output_symbols = new_osymbols else : self . _output_symbols = None return self","title":"relabel_tables()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.draw","text":"Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the dot executable provided by Graphviz. Parameters: Name Type Description Default filename str The string location of the output dot/Graphviz file. required isymbols Optional [ SymbolTable ] An optional symbol table used to label input symbols. None osymbols Optional [ SymbolTable ] An optional symbol table used to label output symbols. None drawing_config DrawingConfig Drawing configuration to use. DrawingConfig() See also: text . Source code in rustfst/fst/vector_fst.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def draw ( self , filename : str , isymbols : Optional [ SymbolTable ] = None , osymbols : Optional [ SymbolTable ] = None , drawing_config : DrawingConfig = DrawingConfig (), ): \"\"\" Writes out the FST in Graphviz text format. This method writes out the FST in the dot graph description language. The graph can be rendered using the `dot` executable provided by Graphviz. Args: filename: The string location of the output dot/Graphviz file. isymbols: An optional symbol table used to label input symbols. osymbols: An optional symbol table used to label output symbols. drawing_config: Drawing configuration to use. See also: `text`. \"\"\" isymbols_ptr = isymbols . ptr if isymbols is not None else None osymbols_ptr = osymbols . ptr if osymbols is not None else None if drawing_config . width is None : width = ctypes . c_float ( - 1.0 ) else : width = ctypes . c_float ( drawing_config . width ) if drawing_config . height is None : height = ctypes . c_float ( - 1.0 ) else : height = ctypes . c_float ( drawing_config . height ) if drawing_config . ranksep is None : ranksep = ctypes . c_float ( - 1.0 ) else : ranksep = ctypes . c_float ( drawing_config . ranksep ) if drawing_config . nodesep is None : nodesep = ctypes . c_float ( - 1.0 ) else : nodesep = ctypes . c_float ( drawing_config . nodesep ) ret_code = lib . vec_fst_draw ( self . ptr , isymbols_ptr , osymbols_ptr , filename . encode ( \"utf-8\" ), drawing_config . title . encode ( \"utf-8\" ), ctypes . c_size_t ( drawing_config . acceptor ), width , height , ctypes . c_size_t ( drawing_config . portrait ), ctypes . c_size_t ( drawing_config . vertical ), ranksep , nodesep , ctypes . c_size_t ( drawing_config . fontsize ), ctypes . c_size_t ( drawing_config . show_weight_one ), ctypes . c_size_t ( drawing_config . print_weight ), ) err_msg = \"fst draw failed\" check_ffi_error ( ret_code , err_msg )","title":"draw()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.read","text":"Read a Fst at a given path. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input file. required Returns: Type Description VectorFst An Fst. Raises: Type Description ValueError Read failed. Source code in rustfst/fst/vector_fst.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 @classmethod def read ( cls , filename : Union [ str , Path ]) -> VectorFst : \"\"\" Read a Fst at a given path. Args: filename: The string location of the input file. Returns: An Fst. Raises: ValueError: Read failed. \"\"\" fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_from_path ( ctypes . byref ( fst ), str ( filename ) . encode ( \"utf-8\" ) ) err_msg = f \"Read failed. file: { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = fst )","title":"read()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.write","text":"Serializes FST to a file. This method writes the FST to a file in vector binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description ValueError Write failed. Source code in rustfst/fst/vector_fst.py 330 331 332 333 334 335 336 337 338 339 340 341 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes FST to a file. This method writes the FST to a file in vector binary format. Args: filename: The string location of the output file. Raises: ValueError: Write failed. \"\"\" ret_code = lib . vec_fst_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" )) err_msg = f \"Write failed. file: { filename } \" check_ffi_error ( ret_code , err_msg )","title":"write()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.from_bytes","text":"Load a VectorFst from a sequence of bytes. Parameters: Name Type Description Default data bytes Sequence of bytes. required Returns: Type Description VectorFst Loaded VectorFst . Source code in rustfst/fst/vector_fst.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @classmethod def from_bytes ( cls , data : bytes ) -> VectorFst : \"\"\" Load a `VectorFst` from a sequence of bytes. Args: data: Sequence of bytes. Returns: Loaded `VectorFst`. \"\"\" fst_ptr = ctypes . pointer ( ctypes . c_void_p ()) # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_char_p ), ( \"size\" , ctypes . c_size_t )] c_bytes = BytesArray ( data , len ( data )) ret_code = lib . vec_fst_from_bytes ( ctypes . byref ( c_bytes ), ctypes . byref ( fst_ptr )) error_msg = \"`from_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return VectorFst ( ptr = fst_ptr )","title":"from_bytes()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.to_bytes","text":"Turns the VectorFst into bytes. Returns: Type Description bytes Sequence of bytes. Source code in rustfst/fst/vector_fst.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def to_bytes ( self ) -> bytes : \"\"\" Turns the `VectorFst` into bytes. Returns: Sequence of bytes. \"\"\" # Define a temporary struct to hold the bytes array class BytesArray ( ctypes . Structure ): _fields_ = [( \"data_ptr\" , ctypes . c_void_p ), ( \"size\" , ctypes . c_size_t )] bytes_ptr = ctypes . pointer ( BytesArray ()) ret_code = lib . vec_fst_to_bytes ( self . ptr , ctypes . byref ( bytes_ptr )) error_msg = \"`to_bytes` failed\" check_ffi_error ( ret_code , error_msg ) return bytes ( [ ctypes . c_ubyte . from_address ( bytes_ptr . contents . data_ptr + i ) . value for i in range ( bytes_ptr . contents . size ) ] )","title":"to_bytes()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.equals","text":"Check if this Fst is equal to the other. Parameters: Name Type Description Default other Fst Fst instance required Returns: Type Description bool Whether both Fst are equals. Source code in rustfst/fst/vector_fst.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 def equals ( self , other : Fst ) -> bool : \"\"\" Check if this Fst is equal to the other. Args: other: Fst instance Returns: Whether both Fst are equals. \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . vec_fst_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value )","title":"equals()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.copy","text":"Returns: Type Description VectorFst A copy of the Fst. Source code in rustfst/fst/vector_fst.py 406 407 408 409 410 411 412 413 414 415 416 def copy ( self ) -> VectorFst : \"\"\" Returns: A copy of the Fst. \"\"\" cloned_fst = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . vec_fst_copy ( self . ptr , ctypes . byref ( cloned_fst )) err_msg = \"Error copying fst\" check_ffi_error ( ret_code , err_msg ) return VectorFst ( cloned_fst )","title":"copy()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.compose","text":"Compute composition of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to compose with. required config Union [ ComposeConfig , None] Config parameters of the composition. None Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def compose ( self , other : VectorFst , config : Union [ ComposeConfig , None ] = None ) -> VectorFst : \"\"\" Compute composition of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to compose with. config: Config parameters of the composition. Returns: The composed Fst. \"\"\" from rustfst.algorithms.compose import compose , compose_with_config if config : return compose_with_config ( self , other , config ) return compose ( self , other )","title":"compose()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.concat","text":"Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Parameters: Name Type Description Default other VectorFst Fst to concatenate with. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def concat ( self , other : VectorFst ) -> VectorFst : \"\"\" Compute Fst Concatenation of this Fst with another Fst, returning the resulting Fst. Args: other: Fst to concatenate with. Returns: The concatenated Fst. \"\"\" from rustfst.algorithms.concat import concat return concat ( self , other )","title":"concat()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.connect","text":"This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : Input Output Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 def connect ( self ) -> VectorFst : \"\"\" This operation trims an Fst in-place, removing states and trs that are not on successful paths. Examples : - Input ![connect_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_in.svg?sanitize=true) - Output ![connect_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/connect_out.svg?sanitize=true) Returns: self \"\"\" from rustfst.algorithms.connect import connect return connect ( self )","title":"connect()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.top_sort","text":"This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : Input Output Returns: Type Description VectorFst Equivalent top sorted Fst. Modification also happens in-place. Source code in rustfst/fst/vector_fst.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def top_sort ( self ) -> VectorFst : \"\"\" This operation topologically sorts its input. When sorted, all transitions are from lower to higher state IDs. Examples : - Input ![topsort_in](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_in.svg?sanitize=true) - Output ![topsort_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/topsort_out.svg?sanitize=true) Returns: Equivalent top sorted Fst. Modification also happens in-place. \"\"\" from rustfst.algorithms.top_sort import top_sort return top_sort ( self )","title":"top_sort()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.determinize","text":"Make an Fst deterministic Parameters: Name Type Description Default config Union [ DeterminizeConfig , None] Configuration for the determinization operation. None Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 496 497 498 499 500 501 502 503 504 505 506 507 508 def determinize ( self , config : Union [ DeterminizeConfig , None ] = None ) -> VectorFst : \"\"\" Make an Fst deterministic Args: config: Configuration for the determinization operation. Returns: The resulting Fst. \"\"\" from rustfst.algorithms.determinize import determinize , determinize_with_config if config : return determinize_with_config ( self , config ) return determinize ( self )","title":"determinize()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.minimize","text":"Minimize an FST in place Parameters: Name Type Description Default config Union [ MinimizeConfig , None] Configuration for the minimization operation. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 510 511 512 513 514 515 516 517 518 519 520 521 522 def minimize ( self , config : Union [ MinimizeConfig , None ] = None ) -> VectorFst : \"\"\" Minimize an FST in place Args: config: Configuration for the minimization operation. Returns: self \"\"\" from rustfst.algorithms.minimize import minimize , minimize_with_config if config : return minimize_with_config ( self , config ) return minimize ( self )","title":"minimize()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.project","text":"Convert a Fst to an acceptor using input or output labels. Parameters: Name Type Description Default proj_type Union [ ProjectType , None] Whether to replace input labels or output labels. None Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def project ( self , proj_type : Union [ ProjectType , None ] = None ) -> VectorFst : \"\"\" Convert a Fst to an acceptor using input or output labels. Args: proj_type: Whether to replace input labels or output labels. Returns: self \"\"\" from rustfst.algorithms.project import project , ProjectType # noqa: W0621 if proj_type : return project ( self , proj_type ) proj_type = ProjectType . PROJECT_INPUT return project ( self , proj_type )","title":"project()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.replace","text":"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: Root Fst : Fst for non-terminal #NAME : Fst for non-terminal #FIRSTNAME : Fst for non-terminal #LASTNAME : Output : Parameters: Name Type Description Default root_label int Label for self required fst_list List [ Tuple [ int , VectorFst ]] Other FSTs required epsilon_on_replace bool False Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def replace ( self , root_label : int , fst_list : List [ Tuple [ int , VectorFst ]], epsilon_on_replace : bool = False , ) -> VectorFst : \"\"\"Recursively replaces trs in the root FSTs with other FSTs. Replace supports replacement of trs in one Fst with another FST. This replacement is recursive. Replace takes an array of FST(s). The FST on which this method is called represents the root (or topology) machine. The root FST refers to other FSTs by recursively replacing trs labeled as non-terminals with the matching non-terminal FST. Currently Replace uses the output symbols of the trs to determine whether the transition is a non-terminal transition or not. A non-terminal can be any label that is not a non-zero terminal label in the output alphabet. Note that input argument is a vector of pairs. These correspond to the tuple of non-terminal Label and corresponding FST. Examples: - Root Fst : ![replace_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_1.svg?sanitize=true) - Fst for non-terminal #NAME : ![replace_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_2.svg?sanitize=true) - Fst for non-terminal #FIRSTNAME : ![replace_in_3](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_3.svg?sanitize=true) - Fst for non-terminal #LASTNAME : ![replace_in_4](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_in_4.svg?sanitize=true) - Output : ![replace_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/replace_out.svg?sanitize=true) Args: root_label: Label for self fst_list: Other FSTs epsilon_on_replace: Returns: The resulting Fst. \"\"\" from rustfst.algorithms.replace import replace complete_fst_list = [( root_label , self )] + fst_list return replace ( root_label , complete_fst_list , epsilon_on_replace )","title":"replace()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.reverse","text":"Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Type Description VectorFst Newly created, reversed Fst. Source code in rustfst/fst/vector_fst.py 598 599 600 601 602 603 604 605 606 607 608 def reverse ( self ) -> VectorFst : \"\"\" Reverse an Fst, returning a new Fst which accepts the same language in reverse order. Returns: Newly created, reversed Fst. \"\"\" from rustfst.algorithms.reverse import reverse return reverse ( self )","title":"reverse()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.rm_epsilon","text":"Return an equivalent FST with epsilon transitions removed. Returns: Type Description VectorFst Newly created FST with epsilon transitions removed. Source code in rustfst/fst/vector_fst.py 610 611 612 613 614 615 616 617 618 def rm_epsilon ( self ) -> VectorFst : \"\"\" Return an equivalent FST with epsilon transitions removed. Returns: Newly created FST with epsilon transitions removed. \"\"\" from rustfst.algorithms.rm_epsilon import rm_epsilon return rm_epsilon ( self )","title":"rm_epsilon()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.shortest_path","text":"Construct a FST containing the shortest path of the input FST Parameters: Name Type Description Default config Union [ ShortestPathConfig , None] Configuration for shortest-path operation. None Returns: Type Description VectorFst Newly-created FST containing only the shortest path of the input FST. Source code in rustfst/fst/vector_fst.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def shortest_path ( self , config : Union [ ShortestPathConfig , None ] = None ) -> VectorFst : \"\"\" Construct a FST containing the shortest path of the input FST Args: config: Configuration for shortest-path operation. Returns: Newly-created FST containing only the shortest path of the input FST. \"\"\" from rustfst.algorithms.shortest_path import ( shortestpath , shortestpath_with_config , ) if config : return shortestpath_with_config ( self , config ) return shortestpath ( self )","title":"shortest_path()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.union","text":"Performs the union of two wFSTs. If A transduces string x to y with weight a and B transduces string w to v with weight b , then their union transduces x to y with weight a and w to v with weight b . Examples: Input Fst 1: Input Fst 2: Union: Parameters: Name Type Description Default other_fst VectorFst Fst to perform union with this one. required Returns: Type Description VectorFst The resulting newly-created Fst. Source code in rustfst/fst/vector_fst.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def union ( self , other_fst : VectorFst ) -> VectorFst : \"\"\" Performs the union of two wFSTs. If A transduces string `x` to `y` with weight `a` and `B` transduces string `w` to `v` with weight `b`, then their union transduces `x` to `y` with weight `a` and `w` to `v` with weight `b`. Examples: - Input Fst 1: ![union_in_1](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_1.svg?sanitize=true) - Input Fst 2: ![union_in_2](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_in_2.svg?sanitize=true) - Union: ![union_out](https://raw.githubusercontent.com/Garvys/rustfst-images-doc/master/images/union_out.svg?sanitize=true) Args: other_fst: Fst to perform union with this one. Returns: The resulting newly-created Fst. \"\"\" from rustfst.algorithms.union import union return union ( self , other_fst )","title":"union()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.optimize","text":"Optimize an FST in-place. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 668 669 670 671 672 673 674 675 676 677 def optimize ( self ) -> VectorFst : \"\"\" Optimize an FST in-place. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize optimize ( self ) return self","title":"optimize()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.optimize_in_log","text":"Optimize an fst in-place in the log semiring. Returns: Type Description VectorFst self Source code in rustfst/fst/vector_fst.py 679 680 681 682 683 684 685 686 687 688 def optimize_in_log ( self ) -> VectorFst : \"\"\" Optimize an fst in-place in the log semiring. Returns: self \"\"\" from rustfst.algorithms.optimize import optimize_in_log optimize_in_log ( self ) return self","title":"optimize_in_log()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.tr_sort","text":"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to ArcSort in OpenFST. Parameters: Name Type Description Default ilabel_cmp bool Sort on input labels if True , output labels if False . True Source code in rustfst/fst/vector_fst.py 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def tr_sort ( self , ilabel_cmp : bool = True ): \"\"\"Sort trs for an FST in-place according to their input or output label. This is often necessary for composition to work properly. It corresponds to `ArcSort` in OpenFST. Args: ilabel_cmp: Sort on input labels if `True`, output labels if `False`. \"\"\" from rustfst.algorithms.tr_sort import tr_sort tr_sort ( self , ilabel_cmp )","title":"tr_sort()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.tr_unique","text":"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. Source code in rustfst/fst/vector_fst.py 705 706 707 708 709 710 711 712 def tr_unique ( self ): \"\"\"Modify an FST in-place, keeping a single instance of trs leaving the same state, going to the same state and with the same input labels, output labels and weight. \"\"\" from rustfst.algorithms.tr_unique import tr_unique tr_unique ( self )","title":"tr_unique()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.isomorphic","text":"Check if this Fst is isomorphic with another Parameters: Name Type Description Default other VectorFst Other Fst. required Returns: Type Description bool Whether both Fsts are equal. Source code in rustfst/fst/vector_fst.py 714 715 716 717 718 719 720 721 722 723 724 def isomorphic ( self , other : VectorFst ) -> bool : \"\"\" Check if this Fst is isomorphic with another Args: other: Other Fst. Returns: Whether both Fsts are equal. \"\"\" from rustfst.algorithms.isomorphic import isomorphic return isomorphic ( self , other )","title":"isomorphic()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.__add__","text":"fst_1 + fst_2 is a shortcut to perform the concatenation of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to concatenate after the current Fst. required Returns: Type Description VectorFst The concatenated Fst. Source code in rustfst/fst/vector_fst.py 726 727 728 729 730 731 732 733 734 735 736 737 def __add__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 + fst_2` is a shortcut to perform the concatenation of `fst_1` and `fst_2`. Args: other: VectorFst to concatenate after the current Fst. Returns: The concatenated Fst. \"\"\" x = self . copy () return x . concat ( other )","title":"__add__()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.__mul__","text":"fst_1 * fst_2 is a shortcut to perform the composition of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to compose with. required Returns: Type Description VectorFst The composed Fst. Source code in rustfst/fst/vector_fst.py 739 740 741 742 743 744 745 746 747 748 749 def __mul__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 * fst_2` is a shortcut to perform the composition of `fst_1` and `fst_2`. Args: other: VectorFst to compose with. Returns: The composed Fst. \"\"\" return self . compose ( other )","title":"__mul__()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.__or__","text":"fst_1 | fst_2 is a shortcut to perform the union of fst_1 and fst_2 . Parameters: Name Type Description Default other VectorFst VectorFst to perform the union with. required Returns: Type Description VectorFst The resulting Fst. Source code in rustfst/fst/vector_fst.py 751 752 753 754 755 756 757 758 759 760 761 762 def __or__ ( self , other : VectorFst ) -> VectorFst : \"\"\" `fst_1 | fst_2` is a shortcut to perform the union of `fst_1` and `fst_2`. Args: other: VectorFst to perform the union with. Returns: The resulting Fst. \"\"\" x = self . copy () return x . union ( other )","title":"__or__()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst.VectorFst.string_paths","text":"Return an iterator over input/output label sequences in this FST, in no particular order . Note that this does not return the best path first. If you want to do this, you will have to first apply shortest_path . Returns: Type Description StringPathsIterator A iterator over the paths through this FST. Source code in rustfst/fst/vector_fst.py 772 773 774 775 776 777 778 779 780 781 782 783 def string_paths ( self ) -> StringPathsIterator : \"\"\"Return an iterator over input/output label sequences in this FST, *in no particular order*. Note that this does not return the best path first. If you want to do this, you will have to first apply `shortest_path`. Returns: A iterator over the paths through this FST. \"\"\" return StringPathsIterator ( self )","title":"string_paths()"},{"location":"rustfst/fst/vector_fst/#rustfst.fst.vector_fst-functions","text":"","title":"Functions"},{"location":"rustfst/iterators/","text":"Classes TrsIterator TrsIterator(fst, state) This class is used for iterating over the trs leaving some state of a FST. Source code in rustfst/iterators.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class TrsIterator : \"\"\" TrsIterator(fst, state) This class is used for iterating over the trs leaving some state of a FST. \"\"\" def __init__ ( self , fst : Fst , state : int ): self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) state = ctypes . c_size_t ( state ) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_new ( fst . ptr , state , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ) -> Optional [ Tr ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_next ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . trs_iterator_reset ( self . _ptr ) err_msg = \"`reset` failed\" check_ffi_error ( ret_code , err_msg ) def __iter__ ( self ) -> TrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<TrsIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . trs_iterator_destroy ( self . _ptr ) Functions done () -> bool done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) __next__ () -> Optional [ Tr ] x.next() -> the next value, or raise StopIteration Source code in rustfst/iterators.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def __next__ ( self ) -> Optional [ Tr ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_next ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) reset () reset(self) Resets the iterator to the initial position. Source code in rustfst/iterators.py 59 60 61 62 63 64 65 66 def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . trs_iterator_reset ( self . _ptr ) err_msg = \"`reset` failed\" check_ffi_error ( ret_code , err_msg ) __iter__ () -> TrsIterator x. iter () <==> iter(x) Source code in rustfst/iterators.py 68 69 70 def __iter__ ( self ) -> TrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self __repr__ () x. repr () <==> repr(x) Source code in rustfst/iterators.py 72 73 74 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<TrsIterator at 0x { id ( self ) : x } >\" MutableTrsIterator MutableTrsIterator(ifst, state) This class is used for iterating over the trs leaving some state of a FST, also permitting mutation of the current tr. Source code in rustfst/iterators.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 class MutableTrsIterator : \"\"\" MutableTrsIterator(ifst, state) This class is used for iterating over the trs leaving some state of a FST, also permitting mutation of the current tr. \"\"\" def __init__ ( self , fst : Fst , state_id : int ) -> MutableTrsIterator : self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) state_id = ctypes . c_size_t ( state_id ) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_new ( fst . ptr , state_id , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . mut_trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ): \"\"\" Advances the internal tr iterator. :return: None \"\"\" ret_code = lib . mut_trs_iterator_next ( self . _ptr ) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . mut_trs_iterator_reset ( self . _ptr ) err_msg = \"`reset`failed\" check_ffi_error ( ret_code , err_msg ) def set_value ( self , tr : Tr ): \"\"\" set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. \"\"\" ret_code = lib . mut_trs_iterator_set_value ( self . _ptr , tr . ptr ) err_msg = \"`set_value` failed\" check_ffi_error ( ret_code , err_msg ) def value ( self ) -> Optional [ Tr ]: \"\"\" value(self) Returns the current tr. \"\"\" tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_value ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`value` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) def __iter__ ( self ) -> MutableTrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<MutableTrsIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . mut_trs_iterator_destroy ( self . _ptr ) Functions done () -> bool done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . mut_trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) __next__ () Advances the internal tr iterator. :return: None Source code in rustfst/iterators.py 113 114 115 116 117 118 119 120 def __next__ ( self ): \"\"\" Advances the internal tr iterator. :return: None \"\"\" ret_code = lib . mut_trs_iterator_next ( self . _ptr ) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) reset () reset(self) Resets the iterator to the initial position. Source code in rustfst/iterators.py 122 123 124 125 126 127 128 129 def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . mut_trs_iterator_reset ( self . _ptr ) err_msg = \"`reset`failed\" check_ffi_error ( ret_code , err_msg ) set_value ( tr : Tr ) set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. Source code in rustfst/iterators.py 131 132 133 134 135 136 137 138 139 140 def set_value ( self , tr : Tr ): \"\"\" set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. \"\"\" ret_code = lib . mut_trs_iterator_set_value ( self . _ptr , tr . ptr ) err_msg = \"`set_value` failed\" check_ffi_error ( ret_code , err_msg ) value () -> Optional [ Tr ] value(self) Returns the current tr. Source code in rustfst/iterators.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def value ( self ) -> Optional [ Tr ]: \"\"\" value(self) Returns the current tr. \"\"\" tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_value ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`value` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) __iter__ () -> MutableTrsIterator x. iter () <==> iter(x) Source code in rustfst/iterators.py 157 158 159 def __iter__ ( self ) -> MutableTrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self __repr__ () x. repr () <==> repr(x) Source code in rustfst/iterators.py 161 162 163 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<MutableTrsIterator at 0x { id ( self ) : x } >\" StateIterator StateIterator(fst) This class is used for iterating over the states in a FST. Source code in rustfst/iterators.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 class StateIterator : \"\"\" StateIterator(fst) This class is used for iterating over the states in a FST. \"\"\" def __init__ ( self , fst : Fst ) -> StateIterator : self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . state_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . state_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ) -> Optional [ int ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration next_state = ctypes . c_size_t () ret_code = lib . state_iterator_next ( self . _ptr , ctypes . byref ( next_state )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if next_state is None : return None return int ( next_state . value ) def __iter__ ( self ) -> StateIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<StateIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . state_iterator_destroy ( self . _ptr ) Functions done () -> bool done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . state_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) __next__ () -> Optional [ int ] x.next() -> the next value, or raise StopIteration Source code in rustfst/iterators.py 200 201 202 203 204 205 206 207 208 209 210 211 212 def __next__ ( self ) -> Optional [ int ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration next_state = ctypes . c_size_t () ret_code = lib . state_iterator_next ( self . _ptr , ctypes . byref ( next_state )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if next_state is None : return None return int ( next_state . value ) __iter__ () -> StateIterator x. iter () <==> iter(x) Source code in rustfst/iterators.py 214 215 216 def __iter__ ( self ) -> StateIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self __repr__ () x. repr () <==> repr(x) Source code in rustfst/iterators.py 218 219 220 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<StateIterator at 0x { id ( self ) : x } >\"","title":"iterators"},{"location":"rustfst/iterators/#rustfst.iterators-classes","text":"","title":"Classes"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator","text":"TrsIterator(fst, state) This class is used for iterating over the trs leaving some state of a FST. Source code in rustfst/iterators.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class TrsIterator : \"\"\" TrsIterator(fst, state) This class is used for iterating over the trs leaving some state of a FST. \"\"\" def __init__ ( self , fst : Fst , state : int ): self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) state = ctypes . c_size_t ( state ) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_new ( fst . ptr , state , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ) -> Optional [ Tr ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_next ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . trs_iterator_reset ( self . _ptr ) err_msg = \"`reset` failed\" check_ffi_error ( ret_code , err_msg ) def __iter__ ( self ) -> TrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<TrsIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . trs_iterator_destroy ( self . _ptr )","title":"TrsIterator"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator-functions","text":"","title":"Functions"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator.done","text":"done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value )","title":"done()"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator.__next__","text":"x.next() -> the next value, or raise StopIteration Source code in rustfst/iterators.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def __next__ ( self ) -> Optional [ Tr ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . trs_iterator_next ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr )","title":"__next__()"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator.reset","text":"reset(self) Resets the iterator to the initial position. Source code in rustfst/iterators.py 59 60 61 62 63 64 65 66 def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . trs_iterator_reset ( self . _ptr ) err_msg = \"`reset` failed\" check_ffi_error ( ret_code , err_msg )","title":"reset()"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator.__iter__","text":"x. iter () <==> iter(x) Source code in rustfst/iterators.py 68 69 70 def __iter__ ( self ) -> TrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self","title":"__iter__()"},{"location":"rustfst/iterators/#rustfst.iterators.TrsIterator.__repr__","text":"x. repr () <==> repr(x) Source code in rustfst/iterators.py 72 73 74 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<TrsIterator at 0x { id ( self ) : x } >\"","title":"__repr__()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator","text":"MutableTrsIterator(ifst, state) This class is used for iterating over the trs leaving some state of a FST, also permitting mutation of the current tr. Source code in rustfst/iterators.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 class MutableTrsIterator : \"\"\" MutableTrsIterator(ifst, state) This class is used for iterating over the trs leaving some state of a FST, also permitting mutation of the current tr. \"\"\" def __init__ ( self , fst : Fst , state_id : int ) -> MutableTrsIterator : self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) state_id = ctypes . c_size_t ( state_id ) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_new ( fst . ptr , state_id , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . mut_trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ): \"\"\" Advances the internal tr iterator. :return: None \"\"\" ret_code = lib . mut_trs_iterator_next ( self . _ptr ) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . mut_trs_iterator_reset ( self . _ptr ) err_msg = \"`reset`failed\" check_ffi_error ( ret_code , err_msg ) def set_value ( self , tr : Tr ): \"\"\" set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. \"\"\" ret_code = lib . mut_trs_iterator_set_value ( self . _ptr , tr . ptr ) err_msg = \"`set_value` failed\" check_ffi_error ( ret_code , err_msg ) def value ( self ) -> Optional [ Tr ]: \"\"\" value(self) Returns the current tr. \"\"\" tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_value ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`value` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr ) def __iter__ ( self ) -> MutableTrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<MutableTrsIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . mut_trs_iterator_destroy ( self . _ptr )","title":"MutableTrsIterator"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator-functions","text":"","title":"Functions"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.done","text":"done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . mut_trs_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value )","title":"done()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.__next__","text":"Advances the internal tr iterator. :return: None Source code in rustfst/iterators.py 113 114 115 116 117 118 119 120 def __next__ ( self ): \"\"\" Advances the internal tr iterator. :return: None \"\"\" ret_code = lib . mut_trs_iterator_next ( self . _ptr ) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg )","title":"__next__()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.reset","text":"reset(self) Resets the iterator to the initial position. Source code in rustfst/iterators.py 122 123 124 125 126 127 128 129 def reset ( self ): \"\"\" reset(self) Resets the iterator to the initial position. \"\"\" ret_code = lib . mut_trs_iterator_reset ( self . _ptr ) err_msg = \"`reset`failed\" check_ffi_error ( ret_code , err_msg )","title":"reset()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.set_value","text":"set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. Source code in rustfst/iterators.py 131 132 133 134 135 136 137 138 139 140 def set_value ( self , tr : Tr ): \"\"\" set_value(self, tr) Replace the current tr with a new tr. Args: tr: The tr to replace the current tr with. \"\"\" ret_code = lib . mut_trs_iterator_set_value ( self . _ptr , tr . ptr ) err_msg = \"`set_value` failed\" check_ffi_error ( ret_code , err_msg )","title":"set_value()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.value","text":"value(self) Returns the current tr. Source code in rustfst/iterators.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def value ( self ) -> Optional [ Tr ]: \"\"\" value(self) Returns the current tr. \"\"\" tr_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . mut_trs_iterator_value ( self . _ptr , ctypes . byref ( tr_ptr )) err_msg = \"`value` failed\" check_ffi_error ( ret_code , err_msg ) if tr_ptr is None : return None return Tr ( tr_ptr )","title":"value()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.__iter__","text":"x. iter () <==> iter(x) Source code in rustfst/iterators.py 157 158 159 def __iter__ ( self ) -> MutableTrsIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self","title":"__iter__()"},{"location":"rustfst/iterators/#rustfst.iterators.MutableTrsIterator.__repr__","text":"x. repr () <==> repr(x) Source code in rustfst/iterators.py 161 162 163 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<MutableTrsIterator at 0x { id ( self ) : x } >\"","title":"__repr__()"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator","text":"StateIterator(fst) This class is used for iterating over the states in a FST. Source code in rustfst/iterators.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 class StateIterator : \"\"\" StateIterator(fst) This class is used for iterating over the states in a FST. \"\"\" def __init__ ( self , fst : Fst ) -> StateIterator : self . ptr = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . state_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) err_msg = \"`__init__` failed\" check_ffi_error ( ret_code , err_msg ) self . _ptr = iter_ptr def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . state_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value ) def __next__ ( self ) -> Optional [ int ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration next_state = ctypes . c_size_t () ret_code = lib . state_iterator_next ( self . _ptr , ctypes . byref ( next_state )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if next_state is None : return None return int ( next_state . value ) def __iter__ ( self ) -> StateIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<StateIterator at 0x { id ( self ) : x } >\" def __del__ ( self ): lib . state_iterator_destroy ( self . _ptr )","title":"StateIterator"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator-functions","text":"","title":"Functions"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator.done","text":"done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. Source code in rustfst/iterators.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 def done ( self ) -> bool : \"\"\" done(self) Indicates whether the iterator is exhausted or not. Returns: True if the iterator is exhausted, False otherwise. \"\"\" done = ctypes . c_size_t () ret_code = lib . state_iterator_done ( self . _ptr , ctypes . byref ( done )) err_msg = \"`done` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( done . value )","title":"done()"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator.__next__","text":"x.next() -> the next value, or raise StopIteration Source code in rustfst/iterators.py 200 201 202 203 204 205 206 207 208 209 210 211 212 def __next__ ( self ) -> Optional [ int ]: \"\"\"x.next() -> the next value, or raise StopIteration\"\"\" if self . done (): raise StopIteration next_state = ctypes . c_size_t () ret_code = lib . state_iterator_next ( self . _ptr , ctypes . byref ( next_state )) err_msg = \"`next` failed\" check_ffi_error ( ret_code , err_msg ) if next_state is None : return None return int ( next_state . value )","title":"__next__()"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator.__iter__","text":"x. iter () <==> iter(x) Source code in rustfst/iterators.py 214 215 216 def __iter__ ( self ) -> StateIterator : \"\"\"x.__iter__() <==> iter(x)\"\"\" return self","title":"__iter__()"},{"location":"rustfst/iterators/#rustfst.iterators.StateIterator.__repr__","text":"x. repr () <==> repr(x) Source code in rustfst/iterators.py 218 219 220 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<StateIterator at 0x { id ( self ) : x } >\"","title":"__repr__()"},{"location":"rustfst/string_path/","text":"Classes StringPath Struct representing a Path recognized by an Fst allowing to retrieve the input string, the output string and the weight of the Path. Source code in rustfst/string_path.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 class StringPath : \"\"\" Struct representing a Path recognized by an Fst allowing to retrieve the input string, the output string and the weight of the Path. \"\"\" def __init__ ( self , ptr ): self . ptr = ptr def weight ( self ) -> float : \"\"\" Returns the weight of the path. Returns: Weight of the path. \"\"\" weight = ctypes . c_float () ret_code = lib . string_path_weight ( self . ptr , ctypes . byref ( weight )) error_msg = \"`weight` failed\" check_ffi_error ( ret_code , error_msg ) return weight . value def istring ( self ) -> str : \"\"\" Returns the input string of the Path. Returns: Input string of the Path. \"\"\" istring = ctypes . c_void_p () ret_code = lib . string_path_istring ( self . ptr , ctypes . byref ( istring )) error_msg = \"`istring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( istring ) . decode ( \"utf8\" ) def ostring ( self ) -> str : \"\"\" Returns the output string of the Path. Returns: Output string of the Path. \"\"\" ostring = ctypes . c_void_p () ret_code = lib . string_path_ostring ( self . ptr , ctypes . byref ( ostring )) error_msg = \"`ostring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( ostring ) . decode ( \"utf8\" ) def __del__ ( self ): lib . string_path_destroy ( self . ptr ) Functions weight () -> float Returns the weight of the path. Returns: Type Description float Weight of the path. Source code in rustfst/string_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def weight ( self ) -> float : \"\"\" Returns the weight of the path. Returns: Weight of the path. \"\"\" weight = ctypes . c_float () ret_code = lib . string_path_weight ( self . ptr , ctypes . byref ( weight )) error_msg = \"`weight` failed\" check_ffi_error ( ret_code , error_msg ) return weight . value istring () -> str Returns the input string of the Path. Returns: Type Description str Input string of the Path. Source code in rustfst/string_path.py 28 29 30 31 32 33 34 35 36 37 38 39 40 def istring ( self ) -> str : \"\"\" Returns the input string of the Path. Returns: Input string of the Path. \"\"\" istring = ctypes . c_void_p () ret_code = lib . string_path_istring ( self . ptr , ctypes . byref ( istring )) error_msg = \"`istring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( istring ) . decode ( \"utf8\" ) ostring () -> str Returns the output string of the Path. Returns: Type Description str Output string of the Path. Source code in rustfst/string_path.py 42 43 44 45 46 47 48 49 50 51 52 53 54 def ostring ( self ) -> str : \"\"\" Returns the output string of the Path. Returns: Output string of the Path. \"\"\" ostring = ctypes . c_void_p () ret_code = lib . string_path_ostring ( self . ptr , ctypes . byref ( ostring )) error_msg = \"`ostring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( ostring ) . decode ( \"utf8\" )","title":"string_path"},{"location":"rustfst/string_path/#rustfst.string_path-classes","text":"","title":"Classes"},{"location":"rustfst/string_path/#rustfst.string_path.StringPath","text":"Struct representing a Path recognized by an Fst allowing to retrieve the input string, the output string and the weight of the Path. Source code in rustfst/string_path.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 class StringPath : \"\"\" Struct representing a Path recognized by an Fst allowing to retrieve the input string, the output string and the weight of the Path. \"\"\" def __init__ ( self , ptr ): self . ptr = ptr def weight ( self ) -> float : \"\"\" Returns the weight of the path. Returns: Weight of the path. \"\"\" weight = ctypes . c_float () ret_code = lib . string_path_weight ( self . ptr , ctypes . byref ( weight )) error_msg = \"`weight` failed\" check_ffi_error ( ret_code , error_msg ) return weight . value def istring ( self ) -> str : \"\"\" Returns the input string of the Path. Returns: Input string of the Path. \"\"\" istring = ctypes . c_void_p () ret_code = lib . string_path_istring ( self . ptr , ctypes . byref ( istring )) error_msg = \"`istring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( istring ) . decode ( \"utf8\" ) def ostring ( self ) -> str : \"\"\" Returns the output string of the Path. Returns: Output string of the Path. \"\"\" ostring = ctypes . c_void_p () ret_code = lib . string_path_ostring ( self . ptr , ctypes . byref ( ostring )) error_msg = \"`ostring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( ostring ) . decode ( \"utf8\" ) def __del__ ( self ): lib . string_path_destroy ( self . ptr )","title":"StringPath"},{"location":"rustfst/string_path/#rustfst.string_path.StringPath-functions","text":"","title":"Functions"},{"location":"rustfst/string_path/#rustfst.string_path.StringPath.weight","text":"Returns the weight of the path. Returns: Type Description float Weight of the path. Source code in rustfst/string_path.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def weight ( self ) -> float : \"\"\" Returns the weight of the path. Returns: Weight of the path. \"\"\" weight = ctypes . c_float () ret_code = lib . string_path_weight ( self . ptr , ctypes . byref ( weight )) error_msg = \"`weight` failed\" check_ffi_error ( ret_code , error_msg ) return weight . value","title":"weight()"},{"location":"rustfst/string_path/#rustfst.string_path.StringPath.istring","text":"Returns the input string of the Path. Returns: Type Description str Input string of the Path. Source code in rustfst/string_path.py 28 29 30 31 32 33 34 35 36 37 38 39 40 def istring ( self ) -> str : \"\"\" Returns the input string of the Path. Returns: Input string of the Path. \"\"\" istring = ctypes . c_void_p () ret_code = lib . string_path_istring ( self . ptr , ctypes . byref ( istring )) error_msg = \"`istring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( istring ) . decode ( \"utf8\" )","title":"istring()"},{"location":"rustfst/string_path/#rustfst.string_path.StringPath.ostring","text":"Returns the output string of the Path. Returns: Type Description str Output string of the Path. Source code in rustfst/string_path.py 42 43 44 45 46 47 48 49 50 51 52 53 54 def ostring ( self ) -> str : \"\"\" Returns the output string of the Path. Returns: Output string of the Path. \"\"\" ostring = ctypes . c_void_p () ret_code = lib . string_path_ostring ( self . ptr , ctypes . byref ( ostring )) error_msg = \"`ostring` failed\" check_ffi_error ( ret_code , error_msg ) return ctypes . string_at ( ostring ) . decode ( \"utf8\" )","title":"ostring()"},{"location":"rustfst/string_paths_iterator/","text":"Classes StringPathsIterator Iterator allowing to loop through all the paths recognized by an Fst. Source code in rustfst/string_paths_iterator.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class StringPathsIterator : \"\"\" Iterator allowing to loop through all the paths recognized by an Fst. \"\"\" def __init__ ( self , fst : VectorFst ): \"\"\" Constructor of the Iterator. Args: fst: Fst on which we want to loop though the valid paths. \"\"\" self . _fst = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) error_msg = \"Something went wrong when creating a StringPathsIterator\" check_ffi_error ( ret_code , error_msg ) self . ptr = iter_ptr def __iter__ ( self ): \"\"\" \"\"\" return self def __next__ ( self ) -> StringPath : \"\"\" \"\"\" string_path_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_next ( self . ptr , ctypes . byref ( string_path_ptr ) ) error_msg = \"`next` failed\" check_ffi_error ( ret_code , error_msg ) if not string_path_ptr : raise StopIteration return StringPath ( string_path_ptr ) def done ( self ) -> bool : \"\"\" Returns whether we're at the end of the Iterator. Returns: True or False \"\"\" done = ctypes . c_size_t () ret_code = lib . string_paths_iterator_done ( self . ptr , ctypes . byref ( done )) error_msg = \"`done` failed\" check_ffi_error ( ret_code , error_msg ) return bool ( done ) def __del__ ( self ): if hasattr ( self , \"ptr\" ): lib . string_paths_iterator_destroy ( self . ptr ) Functions __init__ ( fst : VectorFst ) Constructor of the Iterator. Parameters: Name Type Description Default fst VectorFst Fst on which we want to loop though the valid paths. required Source code in rustfst/string_paths_iterator.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , fst : VectorFst ): \"\"\" Constructor of the Iterator. Args: fst: Fst on which we want to loop though the valid paths. \"\"\" self . _fst = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) error_msg = \"Something went wrong when creating a StringPathsIterator\" check_ffi_error ( ret_code , error_msg ) self . ptr = iter_ptr done () -> bool Returns whether we're at the end of the Iterator. Returns: Type Description bool True or False Source code in rustfst/string_paths_iterator.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def done ( self ) -> bool : \"\"\" Returns whether we're at the end of the Iterator. Returns: True or False \"\"\" done = ctypes . c_size_t () ret_code = lib . string_paths_iterator_done ( self . ptr , ctypes . byref ( done )) error_msg = \"`done` failed\" check_ffi_error ( ret_code , error_msg ) return bool ( done )","title":"string_paths_iterator"},{"location":"rustfst/string_paths_iterator/#rustfst.string_paths_iterator-classes","text":"","title":"Classes"},{"location":"rustfst/string_paths_iterator/#rustfst.string_paths_iterator.StringPathsIterator","text":"Iterator allowing to loop through all the paths recognized by an Fst. Source code in rustfst/string_paths_iterator.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class StringPathsIterator : \"\"\" Iterator allowing to loop through all the paths recognized by an Fst. \"\"\" def __init__ ( self , fst : VectorFst ): \"\"\" Constructor of the Iterator. Args: fst: Fst on which we want to loop though the valid paths. \"\"\" self . _fst = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) error_msg = \"Something went wrong when creating a StringPathsIterator\" check_ffi_error ( ret_code , error_msg ) self . ptr = iter_ptr def __iter__ ( self ): \"\"\" \"\"\" return self def __next__ ( self ) -> StringPath : \"\"\" \"\"\" string_path_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_next ( self . ptr , ctypes . byref ( string_path_ptr ) ) error_msg = \"`next` failed\" check_ffi_error ( ret_code , error_msg ) if not string_path_ptr : raise StopIteration return StringPath ( string_path_ptr ) def done ( self ) -> bool : \"\"\" Returns whether we're at the end of the Iterator. Returns: True or False \"\"\" done = ctypes . c_size_t () ret_code = lib . string_paths_iterator_done ( self . ptr , ctypes . byref ( done )) error_msg = \"`done` failed\" check_ffi_error ( ret_code , error_msg ) return bool ( done ) def __del__ ( self ): if hasattr ( self , \"ptr\" ): lib . string_paths_iterator_destroy ( self . ptr )","title":"StringPathsIterator"},{"location":"rustfst/string_paths_iterator/#rustfst.string_paths_iterator.StringPathsIterator-functions","text":"","title":"Functions"},{"location":"rustfst/string_paths_iterator/#rustfst.string_paths_iterator.StringPathsIterator.__init__","text":"Constructor of the Iterator. Parameters: Name Type Description Default fst VectorFst Fst on which we want to loop though the valid paths. required Source code in rustfst/string_paths_iterator.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , fst : VectorFst ): \"\"\" Constructor of the Iterator. Args: fst: Fst on which we want to loop though the valid paths. \"\"\" self . _fst = fst # reference fst to prolong its lifetime (prevent early gc) iter_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . string_paths_iterator_new ( fst . ptr , ctypes . byref ( iter_ptr )) error_msg = \"Something went wrong when creating a StringPathsIterator\" check_ffi_error ( ret_code , error_msg ) self . ptr = iter_ptr","title":"__init__()"},{"location":"rustfst/string_paths_iterator/#rustfst.string_paths_iterator.StringPathsIterator.done","text":"Returns whether we're at the end of the Iterator. Returns: Type Description bool True or False Source code in rustfst/string_paths_iterator.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def done ( self ) -> bool : \"\"\" Returns whether we're at the end of the Iterator. Returns: True or False \"\"\" done = ctypes . c_size_t () ret_code = lib . string_paths_iterator_done ( self . ptr , ctypes . byref ( done )) error_msg = \"`done` failed\" check_ffi_error ( ret_code , error_msg ) return bool ( done )","title":"done()"},{"location":"rustfst/symbol_table/","text":"Classes SymbolTable SymbolTable class. This class wraps the SymbolTable struct. Source code in rustfst/symbol_table.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 class SymbolTable : \"\"\" `SymbolTable` class. This class wraps the `SymbolTable` struct. \"\"\" def __init__ ( self , ptr = None ): \"\"\" Creates an empty `SymbolTable`. \"\"\" if ptr : self . ptr = ptr else : symt_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_new ( ctypes . byref ( symt_ptr )) err_msg = \"__init__ failed\" check_ffi_error ( ret_code , err_msg ) self . ptr = symt_ptr def add_symbol ( self , symbol : str ) -> int : \"\"\" Adds a symbol to the table and returns the index. Args: symbol: A symbol unicode string. Returns: The integer key of the new symbol. \"\"\" try : symbol = symbol . encode ( \"utf-8\" ) except UnicodeDecodeError : symbol = ctypes . c_char_p ( symbol ) integer_key = ctypes . c_size_t () ret_code = lib . symt_add_symbol ( self . ptr , symbol , ctypes . byref ( integer_key )) err_msg = \"`add_symbol` failed\" check_ffi_error ( ret_code , err_msg ) return int ( integer_key . value ) def add_table ( self , syms : SymbolTable ): \"\"\" This method merges another symbol table into the current table. All key values will be offset by the current available key. Args: syms: A `SymbolTable` to be merged with the current table. \"\"\" ret_code = lib . symt_add_table ( self . ptr , syms . ptr ) err_msg = \"`add_table` failed\" check_ffi_error ( ret_code , err_msg ) def copy ( self ) -> SymbolTable : \"\"\" Returns: A mutable copy of the `SymbolTable`. \"\"\" clone = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_copy ( self . ptr , ctypes . byref ( clone )) err_msg = \"`copy` failed.\" check_ffi_error ( ret_code , err_msg ) return SymbolTable ( ptr = clone ) def find ( self , key : Union [ int , str ]) -> Union [ int , str ]: \"\"\" Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Args: key: Either a string or an index. Returns: If key is a string, the associated index; if key is an integer, the associated symbol. Raises: KeyError: Key not found. \"\"\" if isinstance ( key , int ): return self . _find_index ( key ) if isinstance ( key , str ): return self . _find_symbol ( key ) raise f \"key can only be a string or integer. Not { type ( key ) } \" def _find_index ( self , key : int ) -> str : key = ctypes . c_size_t ( key ) symbol = ctypes . c_void_p () ret_code = lib . symt_find_index ( self . ptr , key , ctypes . byref ( symbol )) err_msg = \"`find` failed\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( symbol ) . decode ( \"utf8\" ) def _find_symbol ( self , symbol : str ) -> int : symbol = symbol . encode ( \"utf-8\" ) index = ctypes . c_size_t () ret_code = lib . symt_find_symbol ( self . ptr , symbol , ctypes . byref ( index )) err_msg = \"`find` failed\" check_ffi_error ( ret_code , err_msg ) return int ( index . value ) def member ( self , key : Union [ int , str ]) -> bool : \"\"\" Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Args: key: Either a string or an index. Returns: Whether or not the key is present (as a string or a index) in the table. \"\"\" is_present = ctypes . c_size_t () ret_code = None if isinstance ( key , int ): index = ctypes . c_size_t ( key ) ret_code = lib . symt_member_index ( self . ptr , index , ctypes . byref ( is_present )) elif isinstance ( key , str ): symbol = key . encode ( \"utf-8\" ) ret_code = lib . symt_member_symbol ( self . ptr , symbol , ctypes . byref ( is_present ) ) else : raise f \"key can only be a string or integer. Not { type ( key ) } \" err_msg = \"`member` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( is_present . value ) def num_symbols ( self ) -> int : \"\"\" Returns: The number of symbols in the symbol table. \"\"\" num_symbols = ctypes . c_size_t () ret_code = lib . symt_num_symbols ( self . ptr , ctypes . byref ( num_symbols )) err_msg = \"`num_symbols` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_symbols . value ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Args: filename: The string location of the input binary file. Returns: A new SymbolTable instance. See also: `SymbolTable.read_fst`, `SymbolTable.read_text`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Read failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) @classmethod def read_text ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Args: filename: The string location of the input text file. Returns: A new SymbolTable instance. See also: `SymbolTable.read`, `SymbolTable.read_fst`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Read failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Write failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) def write_text ( self , filename : Union [ str , Path ]): \"\"\" Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Write failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : SymbolTable ) -> bool : \"\"\" Check if this SymbolTable is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . symt_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def __eq__ ( self , other : SymbolTable ) -> bool : \"\"\" Check if this `SymbolTable` is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" return self . equals ( other ) def __iter__ ( self ) -> SymbolTableIterator : \"\"\" Returns an Iterator over the SymbolTable. Returns: An iterator over the SymbolTable. \"\"\" return SymbolTableIterator ( self ) @classmethod def from_symbols ( cls , symbols : List [ str ]) -> SymbolTable : \"\"\" Constructs a SymbolTable from list of strings. Args: symbols: List of symbols Returns: A new `SymbolTable`. \"\"\" symt = cls () for symbol in symbols : symt . add_symbol ( symbol ) return symt def __del__ ( self ): lib . symt_destroy ( self . ptr ) Functions __init__ ( ptr = None ) Creates an empty SymbolTable . Source code in rustfst/symbol_table.py 15 16 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , ptr = None ): \"\"\" Creates an empty `SymbolTable`. \"\"\" if ptr : self . ptr = ptr else : symt_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_new ( ctypes . byref ( symt_ptr )) err_msg = \"__init__ failed\" check_ffi_error ( ret_code , err_msg ) self . ptr = symt_ptr add_symbol ( symbol : str ) -> int Adds a symbol to the table and returns the index. Parameters: Name Type Description Default symbol str A symbol unicode string. required Returns: Type Description int The integer key of the new symbol. Source code in rustfst/symbol_table.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def add_symbol ( self , symbol : str ) -> int : \"\"\" Adds a symbol to the table and returns the index. Args: symbol: A symbol unicode string. Returns: The integer key of the new symbol. \"\"\" try : symbol = symbol . encode ( \"utf-8\" ) except UnicodeDecodeError : symbol = ctypes . c_char_p ( symbol ) integer_key = ctypes . c_size_t () ret_code = lib . symt_add_symbol ( self . ptr , symbol , ctypes . byref ( integer_key )) err_msg = \"`add_symbol` failed\" check_ffi_error ( ret_code , err_msg ) return int ( integer_key . value ) add_table ( syms : SymbolTable ) This method merges another symbol table into the current table. All key values will be offset by the current available key. Parameters: Name Type Description Default syms SymbolTable A SymbolTable to be merged with the current table. required Source code in rustfst/symbol_table.py 50 51 52 53 54 55 56 57 58 59 def add_table ( self , syms : SymbolTable ): \"\"\" This method merges another symbol table into the current table. All key values will be offset by the current available key. Args: syms: A `SymbolTable` to be merged with the current table. \"\"\" ret_code = lib . symt_add_table ( self . ptr , syms . ptr ) err_msg = \"`add_table` failed\" check_ffi_error ( ret_code , err_msg ) copy () -> SymbolTable Returns: Type Description SymbolTable A mutable copy of the SymbolTable . Source code in rustfst/symbol_table.py 61 62 63 64 65 66 67 68 69 70 71 72 def copy ( self ) -> SymbolTable : \"\"\" Returns: A mutable copy of the `SymbolTable`. \"\"\" clone = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_copy ( self . ptr , ctypes . byref ( clone )) err_msg = \"`copy` failed.\" check_ffi_error ( ret_code , err_msg ) return SymbolTable ( ptr = clone ) find ( key : Union [ int , str ]) -> Union [ int , str ] Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Parameters: Name Type Description Default key Union [ int , str ] Either a string or an index. required Returns: Type Description Union [ int , str ] If key is a string, the associated index; if key is an integer, the associated symbol. Raises: Type Description KeyError Key not found. Source code in rustfst/symbol_table.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def find ( self , key : Union [ int , str ]) -> Union [ int , str ]: \"\"\" Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Args: key: Either a string or an index. Returns: If key is a string, the associated index; if key is an integer, the associated symbol. Raises: KeyError: Key not found. \"\"\" if isinstance ( key , int ): return self . _find_index ( key ) if isinstance ( key , str ): return self . _find_symbol ( key ) raise f \"key can only be a string or integer. Not { type ( key ) } \" member ( key : Union [ int , str ]) -> bool Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Parameters: Name Type Description Default key Union [ int , str ] Either a string or an index. required Returns: Type Description bool Whether or not the key is present (as a string or a index) in the table. Source code in rustfst/symbol_table.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def member ( self , key : Union [ int , str ]) -> bool : \"\"\" Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Args: key: Either a string or an index. Returns: Whether or not the key is present (as a string or a index) in the table. \"\"\" is_present = ctypes . c_size_t () ret_code = None if isinstance ( key , int ): index = ctypes . c_size_t ( key ) ret_code = lib . symt_member_index ( self . ptr , index , ctypes . byref ( is_present )) elif isinstance ( key , str ): symbol = key . encode ( \"utf-8\" ) ret_code = lib . symt_member_symbol ( self . ptr , symbol , ctypes . byref ( is_present ) ) else : raise f \"key can only be a string or integer. Not { type ( key ) } \" err_msg = \"`member` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( is_present . value ) num_symbols () -> int Returns: Type Description int The number of symbols in the symbol table. Source code in rustfst/symbol_table.py 142 143 144 145 146 147 148 149 150 151 152 def num_symbols ( self ) -> int : \"\"\" Returns: The number of symbols in the symbol table. \"\"\" num_symbols = ctypes . c_size_t () ret_code = lib . symt_num_symbols ( self . ptr , ctypes . byref ( num_symbols )) err_msg = \"`num_symbols` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_symbols . value ) read ( filename : Union [ str , Path ]) -> SymbolTable classmethod Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input binary file. required Returns: Type Description SymbolTable A new SymbolTable instance. See also: SymbolTable.read_fst , SymbolTable.read_text . Source code in rustfst/symbol_table.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 @classmethod def read ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Args: filename: The string location of the input binary file. Returns: A new SymbolTable instance. See also: `SymbolTable.read_fst`, `SymbolTable.read_text`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Read failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) read_text ( filename : Union [ str , Path ]) -> SymbolTable classmethod Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input text file. required Returns: Type Description SymbolTable A new SymbolTable instance. See also: SymbolTable.read , SymbolTable.read_fst . Source code in rustfst/symbol_table.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @classmethod def read_text ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Args: filename: The string location of the input text file. Returns: A new SymbolTable instance. See also: `SymbolTable.read`, `SymbolTable.read_fst`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Read failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) write ( filename : Union [ str , Path ]) Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description FstIOError Write failed. Source code in rustfst/symbol_table.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Write failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) write_text ( filename : Union [ str , Path ]) Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description FstIOError Write failed. Source code in rustfst/symbol_table.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def write_text ( self , filename : Union [ str , Path ]): \"\"\" Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Write failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) equals ( other : SymbolTable ) -> bool Check if this SymbolTable is equal to the other Parameters: Name Type Description Default other SymbolTable SymbolTable instance required Returns: Type Description bool bool Source code in rustfst/symbol_table.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def equals ( self , other : SymbolTable ) -> bool : \"\"\" Check if this SymbolTable is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . symt_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) __eq__ ( other : SymbolTable ) -> bool Check if this SymbolTable is equal to the other Parameters: Name Type Description Default other SymbolTable SymbolTable instance required Returns: Type Description bool bool Source code in rustfst/symbol_table.py 246 247 248 249 250 251 252 253 254 255 def __eq__ ( self , other : SymbolTable ) -> bool : \"\"\" Check if this `SymbolTable` is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" return self . equals ( other ) __iter__ () -> SymbolTableIterator Returns an Iterator over the SymbolTable. Returns: Type Description SymbolTableIterator An iterator over the SymbolTable. Source code in rustfst/symbol_table.py 257 258 259 260 261 262 263 def __iter__ ( self ) -> SymbolTableIterator : \"\"\" Returns an Iterator over the SymbolTable. Returns: An iterator over the SymbolTable. \"\"\" return SymbolTableIterator ( self ) from_symbols ( symbols : List [ str ]) -> SymbolTable classmethod Constructs a SymbolTable from list of strings. Parameters: Name Type Description Default symbols List [ str ] List of symbols required Returns: Type Description SymbolTable A new SymbolTable . Source code in rustfst/symbol_table.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 @classmethod def from_symbols ( cls , symbols : List [ str ]) -> SymbolTable : \"\"\" Constructs a SymbolTable from list of strings. Args: symbols: List of symbols Returns: A new `SymbolTable`. \"\"\" symt = cls () for symbol in symbols : symt . add_symbol ( symbol ) return symt SymbolTableIterator Iterator on a SymbolTable. Allows retrieving all the symbols along with their corresponding labels. Source code in rustfst/symbol_table.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 class SymbolTableIterator : \"\"\" Iterator on a SymbolTable. Allows retrieving all the symbols along with their corresponding labels. \"\"\" def __init__ ( self , symbol_table : SymbolTable ): \"\"\" Constructs an iterator from the `Symboltable`. Args: symbol_table: \"\"\" self . _symt = symbol_table self . _idx = 0 self . _len = self . _symt . num_symbols () def __next__ ( self ) -> Tuple [ int , str ]: \"\"\" Iterator over the symbols in the `SymbolTable`. Returns: A pair label (int) and symbol (str). \"\"\" if self . _idx < self . _len : output = ( self . _idx , self . _symt . find ( self . _idx )) self . _idx += 1 return output raise StopIteration Functions __init__ ( symbol_table : SymbolTable ) Constructs an iterator from the Symboltable . Parameters: Name Type Description Default symbol_table SymbolTable required Source code in rustfst/symbol_table.py 292 293 294 295 296 297 298 299 300 def __init__ ( self , symbol_table : SymbolTable ): \"\"\" Constructs an iterator from the `Symboltable`. Args: symbol_table: \"\"\" self . _symt = symbol_table self . _idx = 0 self . _len = self . _symt . num_symbols () __next__ () -> Tuple [ int , str ] Iterator over the symbols in the SymbolTable . Returns: Type Description Tuple [ int , str ] A pair label (int) and symbol (str). Source code in rustfst/symbol_table.py 302 303 304 305 306 307 308 309 310 311 312 def __next__ ( self ) -> Tuple [ int , str ]: \"\"\" Iterator over the symbols in the `SymbolTable`. Returns: A pair label (int) and symbol (str). \"\"\" if self . _idx < self . _len : output = ( self . _idx , self . _symt . find ( self . _idx )) self . _idx += 1 return output raise StopIteration","title":"symbol_table"},{"location":"rustfst/symbol_table/#rustfst.symbol_table-classes","text":"","title":"Classes"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable","text":"SymbolTable class. This class wraps the SymbolTable struct. Source code in rustfst/symbol_table.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 class SymbolTable : \"\"\" `SymbolTable` class. This class wraps the `SymbolTable` struct. \"\"\" def __init__ ( self , ptr = None ): \"\"\" Creates an empty `SymbolTable`. \"\"\" if ptr : self . ptr = ptr else : symt_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_new ( ctypes . byref ( symt_ptr )) err_msg = \"__init__ failed\" check_ffi_error ( ret_code , err_msg ) self . ptr = symt_ptr def add_symbol ( self , symbol : str ) -> int : \"\"\" Adds a symbol to the table and returns the index. Args: symbol: A symbol unicode string. Returns: The integer key of the new symbol. \"\"\" try : symbol = symbol . encode ( \"utf-8\" ) except UnicodeDecodeError : symbol = ctypes . c_char_p ( symbol ) integer_key = ctypes . c_size_t () ret_code = lib . symt_add_symbol ( self . ptr , symbol , ctypes . byref ( integer_key )) err_msg = \"`add_symbol` failed\" check_ffi_error ( ret_code , err_msg ) return int ( integer_key . value ) def add_table ( self , syms : SymbolTable ): \"\"\" This method merges another symbol table into the current table. All key values will be offset by the current available key. Args: syms: A `SymbolTable` to be merged with the current table. \"\"\" ret_code = lib . symt_add_table ( self . ptr , syms . ptr ) err_msg = \"`add_table` failed\" check_ffi_error ( ret_code , err_msg ) def copy ( self ) -> SymbolTable : \"\"\" Returns: A mutable copy of the `SymbolTable`. \"\"\" clone = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_copy ( self . ptr , ctypes . byref ( clone )) err_msg = \"`copy` failed.\" check_ffi_error ( ret_code , err_msg ) return SymbolTable ( ptr = clone ) def find ( self , key : Union [ int , str ]) -> Union [ int , str ]: \"\"\" Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Args: key: Either a string or an index. Returns: If key is a string, the associated index; if key is an integer, the associated symbol. Raises: KeyError: Key not found. \"\"\" if isinstance ( key , int ): return self . _find_index ( key ) if isinstance ( key , str ): return self . _find_symbol ( key ) raise f \"key can only be a string or integer. Not { type ( key ) } \" def _find_index ( self , key : int ) -> str : key = ctypes . c_size_t ( key ) symbol = ctypes . c_void_p () ret_code = lib . symt_find_index ( self . ptr , key , ctypes . byref ( symbol )) err_msg = \"`find` failed\" check_ffi_error ( ret_code , err_msg ) return ctypes . string_at ( symbol ) . decode ( \"utf8\" ) def _find_symbol ( self , symbol : str ) -> int : symbol = symbol . encode ( \"utf-8\" ) index = ctypes . c_size_t () ret_code = lib . symt_find_symbol ( self . ptr , symbol , ctypes . byref ( index )) err_msg = \"`find` failed\" check_ffi_error ( ret_code , err_msg ) return int ( index . value ) def member ( self , key : Union [ int , str ]) -> bool : \"\"\" Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Args: key: Either a string or an index. Returns: Whether or not the key is present (as a string or a index) in the table. \"\"\" is_present = ctypes . c_size_t () ret_code = None if isinstance ( key , int ): index = ctypes . c_size_t ( key ) ret_code = lib . symt_member_index ( self . ptr , index , ctypes . byref ( is_present )) elif isinstance ( key , str ): symbol = key . encode ( \"utf-8\" ) ret_code = lib . symt_member_symbol ( self . ptr , symbol , ctypes . byref ( is_present ) ) else : raise f \"key can only be a string or integer. Not { type ( key ) } \" err_msg = \"`member` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( is_present . value ) def num_symbols ( self ) -> int : \"\"\" Returns: The number of symbols in the symbol table. \"\"\" num_symbols = ctypes . c_size_t () ret_code = lib . symt_num_symbols ( self . ptr , ctypes . byref ( num_symbols )) err_msg = \"`num_symbols` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_symbols . value ) @classmethod def read ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Args: filename: The string location of the input binary file. Returns: A new SymbolTable instance. See also: `SymbolTable.read_fst`, `SymbolTable.read_text`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Read failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) @classmethod def read_text ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Args: filename: The string location of the input text file. Returns: A new SymbolTable instance. See also: `SymbolTable.read`, `SymbolTable.read_fst`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Read failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt ) def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Write failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) def write_text ( self , filename : Union [ str , Path ]): \"\"\" Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Write failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) def equals ( self , other : SymbolTable ) -> bool : \"\"\" Check if this SymbolTable is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . symt_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value ) def __eq__ ( self , other : SymbolTable ) -> bool : \"\"\" Check if this `SymbolTable` is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" return self . equals ( other ) def __iter__ ( self ) -> SymbolTableIterator : \"\"\" Returns an Iterator over the SymbolTable. Returns: An iterator over the SymbolTable. \"\"\" return SymbolTableIterator ( self ) @classmethod def from_symbols ( cls , symbols : List [ str ]) -> SymbolTable : \"\"\" Constructs a SymbolTable from list of strings. Args: symbols: List of symbols Returns: A new `SymbolTable`. \"\"\" symt = cls () for symbol in symbols : symt . add_symbol ( symbol ) return symt def __del__ ( self ): lib . symt_destroy ( self . ptr )","title":"SymbolTable"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable-functions","text":"","title":"Functions"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.__init__","text":"Creates an empty SymbolTable . Source code in rustfst/symbol_table.py 15 16 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , ptr = None ): \"\"\" Creates an empty `SymbolTable`. \"\"\" if ptr : self . ptr = ptr else : symt_ptr = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_new ( ctypes . byref ( symt_ptr )) err_msg = \"__init__ failed\" check_ffi_error ( ret_code , err_msg ) self . ptr = symt_ptr","title":"__init__()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.add_symbol","text":"Adds a symbol to the table and returns the index. Parameters: Name Type Description Default symbol str A symbol unicode string. required Returns: Type Description int The integer key of the new symbol. Source code in rustfst/symbol_table.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def add_symbol ( self , symbol : str ) -> int : \"\"\" Adds a symbol to the table and returns the index. Args: symbol: A symbol unicode string. Returns: The integer key of the new symbol. \"\"\" try : symbol = symbol . encode ( \"utf-8\" ) except UnicodeDecodeError : symbol = ctypes . c_char_p ( symbol ) integer_key = ctypes . c_size_t () ret_code = lib . symt_add_symbol ( self . ptr , symbol , ctypes . byref ( integer_key )) err_msg = \"`add_symbol` failed\" check_ffi_error ( ret_code , err_msg ) return int ( integer_key . value )","title":"add_symbol()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.add_table","text":"This method merges another symbol table into the current table. All key values will be offset by the current available key. Parameters: Name Type Description Default syms SymbolTable A SymbolTable to be merged with the current table. required Source code in rustfst/symbol_table.py 50 51 52 53 54 55 56 57 58 59 def add_table ( self , syms : SymbolTable ): \"\"\" This method merges another symbol table into the current table. All key values will be offset by the current available key. Args: syms: A `SymbolTable` to be merged with the current table. \"\"\" ret_code = lib . symt_add_table ( self . ptr , syms . ptr ) err_msg = \"`add_table` failed\" check_ffi_error ( ret_code , err_msg )","title":"add_table()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.copy","text":"Returns: Type Description SymbolTable A mutable copy of the SymbolTable . Source code in rustfst/symbol_table.py 61 62 63 64 65 66 67 68 69 70 71 72 def copy ( self ) -> SymbolTable : \"\"\" Returns: A mutable copy of the `SymbolTable`. \"\"\" clone = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_copy ( self . ptr , ctypes . byref ( clone )) err_msg = \"`copy` failed.\" check_ffi_error ( ret_code , err_msg ) return SymbolTable ( ptr = clone )","title":"copy()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.find","text":"Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Parameters: Name Type Description Default key Union [ int , str ] Either a string or an index. required Returns: Type Description Union [ int , str ] If key is a string, the associated index; if key is an integer, the associated symbol. Raises: Type Description KeyError Key not found. Source code in rustfst/symbol_table.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def find ( self , key : Union [ int , str ]) -> Union [ int , str ]: \"\"\" Given a symbol or index, finds the other one. This method returns the index associated with a symbol key, or the symbol associated with a index key. Args: key: Either a string or an index. Returns: If key is a string, the associated index; if key is an integer, the associated symbol. Raises: KeyError: Key not found. \"\"\" if isinstance ( key , int ): return self . _find_index ( key ) if isinstance ( key , str ): return self . _find_symbol ( key ) raise f \"key can only be a string or integer. Not { type ( key ) } \"","title":"find()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.member","text":"Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Parameters: Name Type Description Default key Union [ int , str ] Either a string or an index. required Returns: Type Description bool Whether or not the key is present (as a string or a index) in the table. Source code in rustfst/symbol_table.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def member ( self , key : Union [ int , str ]) -> bool : \"\"\" Given a symbol or index, returns whether it is found in the table. This method returns a boolean indicating whether the given symbol or index is present in the table. If one intends to perform subsequent lookup, it is better to simply call the find method, catching the KeyError. Args: key: Either a string or an index. Returns: Whether or not the key is present (as a string or a index) in the table. \"\"\" is_present = ctypes . c_size_t () ret_code = None if isinstance ( key , int ): index = ctypes . c_size_t ( key ) ret_code = lib . symt_member_index ( self . ptr , index , ctypes . byref ( is_present )) elif isinstance ( key , str ): symbol = key . encode ( \"utf-8\" ) ret_code = lib . symt_member_symbol ( self . ptr , symbol , ctypes . byref ( is_present ) ) else : raise f \"key can only be a string or integer. Not { type ( key ) } \" err_msg = \"`member` failed\" check_ffi_error ( ret_code , err_msg ) return bool ( is_present . value )","title":"member()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.num_symbols","text":"Returns: Type Description int The number of symbols in the symbol table. Source code in rustfst/symbol_table.py 142 143 144 145 146 147 148 149 150 151 152 def num_symbols ( self ) -> int : \"\"\" Returns: The number of symbols in the symbol table. \"\"\" num_symbols = ctypes . c_size_t () ret_code = lib . symt_num_symbols ( self . ptr , ctypes . byref ( num_symbols )) err_msg = \"`num_symbols` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_symbols . value )","title":"num_symbols()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.read","text":"Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input binary file. required Returns: Type Description SymbolTable A new SymbolTable instance. See also: SymbolTable.read_fst , SymbolTable.read_text . Source code in rustfst/symbol_table.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 @classmethod def read ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from binary file. This class method creates a new SymbolTable from a symbol table binary file. Args: filename: The string location of the input binary file. Returns: A new SymbolTable instance. See also: `SymbolTable.read_fst`, `SymbolTable.read_text`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Read failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt )","title":"read()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.read_text","text":"Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the input text file. required Returns: Type Description SymbolTable A new SymbolTable instance. See also: SymbolTable.read , SymbolTable.read_fst . Source code in rustfst/symbol_table.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @classmethod def read_text ( cls , filename : Union [ str , Path ]) -> SymbolTable : \"\"\" Reads symbol table from text file. This class method creates a new SymbolTable from a symbol table text file. Args: filename: The string location of the input text file. Returns: A new SymbolTable instance. See also: `SymbolTable.read`, `SymbolTable.read_fst`. \"\"\" symt = ctypes . pointer ( ctypes . c_void_p ()) ret_code = lib . symt_from_path ( ctypes . byref ( symt ), str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Read failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg ) return cls ( ptr = symt )","title":"read_text()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.write","text":"Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description FstIOError Write failed. Source code in rustfst/symbol_table.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def write ( self , filename : Union [ str , Path ]): \"\"\" Serializes symbol table to a file. This methods writes the SymbolTable to a file in binary format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 1 ) ) err_msg = f \"Write failed for bin file : { filename } \" check_ffi_error ( ret_code , err_msg )","title":"write()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.write_text","text":"Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Parameters: Name Type Description Default filename Union [ str , Path ] The string location of the output file. required Raises: Type Description FstIOError Write failed. Source code in rustfst/symbol_table.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def write_text ( self , filename : Union [ str , Path ]): \"\"\" Writes symbol table to text file. This method writes the SymbolTable to a file in human-readable format. Args: filename: The string location of the output file. Raises: FstIOError: Write failed. \"\"\" ret_code = lib . symt_write_file ( self . ptr , str ( filename ) . encode ( \"utf-8\" ), ctypes . c_size_t ( 0 ) ) err_msg = f \"Write failed for text file : { filename } \" check_ffi_error ( ret_code , err_msg )","title":"write_text()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.equals","text":"Check if this SymbolTable is equal to the other Parameters: Name Type Description Default other SymbolTable SymbolTable instance required Returns: Type Description bool bool Source code in rustfst/symbol_table.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def equals ( self , other : SymbolTable ) -> bool : \"\"\" Check if this SymbolTable is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" is_equal = ctypes . c_size_t () ret_code = lib . symt_equals ( self . ptr , other . ptr , ctypes . byref ( is_equal )) err_msg = \"Error checking equality\" check_ffi_error ( ret_code , err_msg ) return bool ( is_equal . value )","title":"equals()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.__eq__","text":"Check if this SymbolTable is equal to the other Parameters: Name Type Description Default other SymbolTable SymbolTable instance required Returns: Type Description bool bool Source code in rustfst/symbol_table.py 246 247 248 249 250 251 252 253 254 255 def __eq__ ( self , other : SymbolTable ) -> bool : \"\"\" Check if this `SymbolTable` is equal to the other Params: other: SymbolTable instance Returns: bool \"\"\" return self . equals ( other )","title":"__eq__()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.__iter__","text":"Returns an Iterator over the SymbolTable. Returns: Type Description SymbolTableIterator An iterator over the SymbolTable. Source code in rustfst/symbol_table.py 257 258 259 260 261 262 263 def __iter__ ( self ) -> SymbolTableIterator : \"\"\" Returns an Iterator over the SymbolTable. Returns: An iterator over the SymbolTable. \"\"\" return SymbolTableIterator ( self )","title":"__iter__()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTable.from_symbols","text":"Constructs a SymbolTable from list of strings. Parameters: Name Type Description Default symbols List [ str ] List of symbols required Returns: Type Description SymbolTable A new SymbolTable . Source code in rustfst/symbol_table.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 @classmethod def from_symbols ( cls , symbols : List [ str ]) -> SymbolTable : \"\"\" Constructs a SymbolTable from list of strings. Args: symbols: List of symbols Returns: A new `SymbolTable`. \"\"\" symt = cls () for symbol in symbols : symt . add_symbol ( symbol ) return symt","title":"from_symbols()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTableIterator","text":"Iterator on a SymbolTable. Allows retrieving all the symbols along with their corresponding labels. Source code in rustfst/symbol_table.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 class SymbolTableIterator : \"\"\" Iterator on a SymbolTable. Allows retrieving all the symbols along with their corresponding labels. \"\"\" def __init__ ( self , symbol_table : SymbolTable ): \"\"\" Constructs an iterator from the `Symboltable`. Args: symbol_table: \"\"\" self . _symt = symbol_table self . _idx = 0 self . _len = self . _symt . num_symbols () def __next__ ( self ) -> Tuple [ int , str ]: \"\"\" Iterator over the symbols in the `SymbolTable`. Returns: A pair label (int) and symbol (str). \"\"\" if self . _idx < self . _len : output = ( self . _idx , self . _symt . find ( self . _idx )) self . _idx += 1 return output raise StopIteration","title":"SymbolTableIterator"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTableIterator-functions","text":"","title":"Functions"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTableIterator.__init__","text":"Constructs an iterator from the Symboltable . Parameters: Name Type Description Default symbol_table SymbolTable required Source code in rustfst/symbol_table.py 292 293 294 295 296 297 298 299 300 def __init__ ( self , symbol_table : SymbolTable ): \"\"\" Constructs an iterator from the `Symboltable`. Args: symbol_table: \"\"\" self . _symt = symbol_table self . _idx = 0 self . _len = self . _symt . num_symbols ()","title":"__init__()"},{"location":"rustfst/symbol_table/#rustfst.symbol_table.SymbolTableIterator.__next__","text":"Iterator over the symbols in the SymbolTable . Returns: Type Description Tuple [ int , str ] A pair label (int) and symbol (str). Source code in rustfst/symbol_table.py 302 303 304 305 306 307 308 309 310 311 312 def __next__ ( self ) -> Tuple [ int , str ]: \"\"\" Iterator over the symbols in the `SymbolTable`. Returns: A pair label (int) and symbol (str). \"\"\" if self . _idx < self . _len : output = ( self . _idx , self . _symt . find ( self . _idx )) self . _idx += 1 return output raise StopIteration","title":"__next__()"},{"location":"rustfst/tr/","text":"Classes Tr Structure representing a transition from a state to another state in a FST. Attributes: Name Type Description ilabel int The input label. olabel int The output label. weight float The transition weight. nextstate float The destination state for the arc. Source code in rustfst/tr.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class Tr : \"\"\" Structure representing a transition from a state to another state in a FST. Attributes: ilabel: The input label. olabel: The output label. weight: The transition weight. nextstate: The destination state for the arc. \"\"\" def __init__ ( self , ilabel : Optional [ int ] = None , olabel : Optional [ int ] = None , weight : Optional [ float ] = None , nextstate : Optional [ int ] = None , ): \"\"\" Create a new transition. Args: ilabel: The input label. olabel: The outpit label. weight: The transition's weight nextstate: The destination state for the transition. \"\"\" if ilabel and olabel is None and weight is None and nextstate is None : self . _ptr = ilabel else : if weight is None : weight = weight_one () ptr = c_void_p () exit_code = lib . tr_new ( c_size_t ( ilabel ), c_size_t ( olabel ), c_float ( weight ), c_size_t ( nextstate ), byref ( ptr ), ) err_msg = \"Something went wrong when creating the Tr struct\" check_ffi_error ( exit_code , err_msg ) self . _ptr = ptr @property def ptr ( self ): return self . _ptr @property def ilabel ( self ) -> int : ilabel = c_size_t () exit_code = lib . tr_ilabel ( self . _ptr , byref ( ilabel )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( ilabel . value ) @ilabel . setter def ilabel ( self , value : int ): ilabel = c_size_t ( value ) exit_code = lib . tr_set_ilabel ( self . _ptr , ilabel ) err_msg = \"Something went wrong when setting Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) @property def olabel ( self ) -> int : olabel = c_size_t () exit_code = lib . tr_olabel ( self . _ptr , byref ( olabel )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( olabel . value ) @olabel . setter def olabel ( self , value : int ): olabel = c_size_t ( value ) exit_code = lib . tr_set_olabel ( self . _ptr , olabel ) err_msg = \"Something went wrong when setting Tr olabel value\" check_ffi_error ( exit_code , err_msg ) @property def weight ( self ) -> float : weight = c_float () exit_code = lib . tr_weight ( self . _ptr , byref ( weight )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return weight . value @weight . setter def weight ( self , value : float ): weight = c_float ( value ) exit_code = lib . tr_set_weight ( self . _ptr , weight ) err_msg = \"Something went wrong when setting Tr weight value\" check_ffi_error ( exit_code , err_msg ) @property def next_state ( self ) -> int : next_state = c_size_t () exit_code = lib . tr_next_state ( self . _ptr , byref ( next_state )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( next_state . value ) @next_state . setter def next_state ( self , next_state : int ): next_state = c_size_t ( next_state ) exit_code = lib . tr_set_next_state ( self . _ptr , next_state ) err_msg = \"Something went wrong when setting Tr next_state value\" check_ffi_error ( exit_code , err_msg ) def __eq__ ( self , other : Tr ): return ( self . ilabel == other . ilabel and self . olabel == other . olabel and self . weight == other . weight and self . next_state == other . next_state ) def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<Tr ilabel= { self . ilabel } , olabel= { self . olabel } , weight= { self . weight } , next_state= { self . next_state } >\" def __del__ ( self ): lib . tr_delete ( self . _ptr ) Functions __init__ ( ilabel : Optional [ int ] = None , olabel : Optional [ int ] = None , weight : Optional [ float ] = None , nextstate : Optional [ int ] = None ) Create a new transition. Parameters: Name Type Description Default ilabel Optional [ int ] The input label. None olabel Optional [ int ] The outpit label. None weight Optional [ float ] The transition's weight None nextstate Optional [ int ] The destination state for the transition. None Source code in rustfst/tr.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __init__ ( self , ilabel : Optional [ int ] = None , olabel : Optional [ int ] = None , weight : Optional [ float ] = None , nextstate : Optional [ int ] = None , ): \"\"\" Create a new transition. Args: ilabel: The input label. olabel: The outpit label. weight: The transition's weight nextstate: The destination state for the transition. \"\"\" if ilabel and olabel is None and weight is None and nextstate is None : self . _ptr = ilabel else : if weight is None : weight = weight_one () ptr = c_void_p () exit_code = lib . tr_new ( c_size_t ( ilabel ), c_size_t ( olabel ), c_float ( weight ), c_size_t ( nextstate ), byref ( ptr ), ) err_msg = \"Something went wrong when creating the Tr struct\" check_ffi_error ( exit_code , err_msg ) self . _ptr = ptr __repr__ () x. repr () <==> repr(x) Source code in rustfst/tr.py 134 135 136 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<Tr ilabel= { self . ilabel } , olabel= { self . olabel } , weight= { self . weight } , next_state= { self . next_state } >\" Functions","title":"tr"},{"location":"rustfst/tr/#rustfst.tr-classes","text":"","title":"Classes"},{"location":"rustfst/tr/#rustfst.tr.Tr","text":"Structure representing a transition from a state to another state in a FST. Attributes: Name Type Description ilabel int The input label. olabel int The output label. weight float The transition weight. nextstate float The destination state for the arc. Source code in rustfst/tr.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class Tr : \"\"\" Structure representing a transition from a state to another state in a FST. Attributes: ilabel: The input label. olabel: The output label. weight: The transition weight. nextstate: The destination state for the arc. \"\"\" def __init__ ( self , ilabel : Optional [ int ] = None , olabel : Optional [ int ] = None , weight : Optional [ float ] = None , nextstate : Optional [ int ] = None , ): \"\"\" Create a new transition. Args: ilabel: The input label. olabel: The outpit label. weight: The transition's weight nextstate: The destination state for the transition. \"\"\" if ilabel and olabel is None and weight is None and nextstate is None : self . _ptr = ilabel else : if weight is None : weight = weight_one () ptr = c_void_p () exit_code = lib . tr_new ( c_size_t ( ilabel ), c_size_t ( olabel ), c_float ( weight ), c_size_t ( nextstate ), byref ( ptr ), ) err_msg = \"Something went wrong when creating the Tr struct\" check_ffi_error ( exit_code , err_msg ) self . _ptr = ptr @property def ptr ( self ): return self . _ptr @property def ilabel ( self ) -> int : ilabel = c_size_t () exit_code = lib . tr_ilabel ( self . _ptr , byref ( ilabel )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( ilabel . value ) @ilabel . setter def ilabel ( self , value : int ): ilabel = c_size_t ( value ) exit_code = lib . tr_set_ilabel ( self . _ptr , ilabel ) err_msg = \"Something went wrong when setting Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) @property def olabel ( self ) -> int : olabel = c_size_t () exit_code = lib . tr_olabel ( self . _ptr , byref ( olabel )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( olabel . value ) @olabel . setter def olabel ( self , value : int ): olabel = c_size_t ( value ) exit_code = lib . tr_set_olabel ( self . _ptr , olabel ) err_msg = \"Something went wrong when setting Tr olabel value\" check_ffi_error ( exit_code , err_msg ) @property def weight ( self ) -> float : weight = c_float () exit_code = lib . tr_weight ( self . _ptr , byref ( weight )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return weight . value @weight . setter def weight ( self , value : float ): weight = c_float ( value ) exit_code = lib . tr_set_weight ( self . _ptr , weight ) err_msg = \"Something went wrong when setting Tr weight value\" check_ffi_error ( exit_code , err_msg ) @property def next_state ( self ) -> int : next_state = c_size_t () exit_code = lib . tr_next_state ( self . _ptr , byref ( next_state )) err_msg = \"Something went wrong when reading Tr ilabel value\" check_ffi_error ( exit_code , err_msg ) return int ( next_state . value ) @next_state . setter def next_state ( self , next_state : int ): next_state = c_size_t ( next_state ) exit_code = lib . tr_set_next_state ( self . _ptr , next_state ) err_msg = \"Something went wrong when setting Tr next_state value\" check_ffi_error ( exit_code , err_msg ) def __eq__ ( self , other : Tr ): return ( self . ilabel == other . ilabel and self . olabel == other . olabel and self . weight == other . weight and self . next_state == other . next_state ) def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<Tr ilabel= { self . ilabel } , olabel= { self . olabel } , weight= { self . weight } , next_state= { self . next_state } >\" def __del__ ( self ): lib . tr_delete ( self . _ptr )","title":"Tr"},{"location":"rustfst/tr/#rustfst.tr.Tr-functions","text":"","title":"Functions"},{"location":"rustfst/tr/#rustfst.tr.Tr.__init__","text":"Create a new transition. Parameters: Name Type Description Default ilabel Optional [ int ] The input label. None olabel Optional [ int ] The outpit label. None weight Optional [ float ] The transition's weight None nextstate Optional [ int ] The destination state for the transition. None Source code in rustfst/tr.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __init__ ( self , ilabel : Optional [ int ] = None , olabel : Optional [ int ] = None , weight : Optional [ float ] = None , nextstate : Optional [ int ] = None , ): \"\"\" Create a new transition. Args: ilabel: The input label. olabel: The outpit label. weight: The transition's weight nextstate: The destination state for the transition. \"\"\" if ilabel and olabel is None and weight is None and nextstate is None : self . _ptr = ilabel else : if weight is None : weight = weight_one () ptr = c_void_p () exit_code = lib . tr_new ( c_size_t ( ilabel ), c_size_t ( olabel ), c_float ( weight ), c_size_t ( nextstate ), byref ( ptr ), ) err_msg = \"Something went wrong when creating the Tr struct\" check_ffi_error ( exit_code , err_msg ) self . _ptr = ptr","title":"__init__()"},{"location":"rustfst/tr/#rustfst.tr.Tr.__repr__","text":"x. repr () <==> repr(x) Source code in rustfst/tr.py 134 135 136 def __repr__ ( self ): \"\"\"x.__repr__() <==> repr(x)\"\"\" return f \"<Tr ilabel= { self . ilabel } , olabel= { self . olabel } , weight= { self . weight } , next_state= { self . next_state } >\"","title":"__repr__()"},{"location":"rustfst/tr/#rustfst.tr-functions","text":"","title":"Functions"},{"location":"rustfst/trs/","text":"Classes Trs Structure representing list of transitions. Source code in rustfst/trs.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class Trs : \"\"\"Structure representing list of transitions.\"\"\" def __init__ ( self , ptr = None ) -> Trs : \"\"\" Create an empty list of transitions. \"\"\" if ptr is None : self . _ptr = c_void_p () exit_code = lib . trs_vec_new ( byref ( self . _ptr )) err_msg = \"Something went wrong when creating the Trs struct\" check_ffi_error ( exit_code , err_msg ) else : self . _ptr = ptr def push ( self , tr : Tr ): \"\"\" Add a new transition to the list. Args: tr: The transition to add. \"\"\" exit_code = lib . trs_vec_push ( self . _ptr , tr . ptr ) err_msg = \"Something went wrong when adding new transition\" check_ffi_error ( exit_code , err_msg ) def remove ( self , index : int ) -> Tr : removed_tr = c_void_p () exit_code = lib . trs_vec_remove ( self . _ptr , index , byref ( removed_tr )) err_msg = \"Something went wrong when removing transition at index: \" + str ( index ) check_ffi_error ( exit_code , err_msg ) return Tr ( removed_tr ) def len ( self ) -> int : \"\"\" Compute the number of transitions in the list. Returns: The number of transitions. \"\"\" num_trs = c_size_t () ret_code = lib . trs_vec_len ( self . _ptr , byref ( num_trs )) err_msg = \"`len` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value ) def shallow_clone ( self ) -> Trs : new_trs_ptr = c_void_p () exit_code = lib . trs_vec_shallow_clone ( self . _ptr , new_trs_ptr ) err_msg = \"Something went wrong when cloning Trs\" check_ffi_error ( exit_code , err_msg ) return Trs ( new_trs_ptr ) def __repr__ ( self ) -> str : string = c_void_p () exit_code = lib . trs_vec_display ( self . _ptr , byref ( string )) err_msg = \"Something went wrong when displaying Trs\" check_ffi_error ( exit_code , err_msg ) return string_at ( string ) . decode ( \"utf8\" ) def __del__ ( self ): lib . trs_vec_delete ( self . _ptr ) Functions __init__ ( ptr = None ) -> Trs Create an empty list of transitions. Source code in rustfst/trs.py 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , ptr = None ) -> Trs : \"\"\" Create an empty list of transitions. \"\"\" if ptr is None : self . _ptr = c_void_p () exit_code = lib . trs_vec_new ( byref ( self . _ptr )) err_msg = \"Something went wrong when creating the Trs struct\" check_ffi_error ( exit_code , err_msg ) else : self . _ptr = ptr push ( tr : Tr ) Add a new transition to the list. Parameters: Name Type Description Default tr Tr The transition to add. required Source code in rustfst/trs.py 26 27 28 29 30 31 32 33 34 def push ( self , tr : Tr ): \"\"\" Add a new transition to the list. Args: tr: The transition to add. \"\"\" exit_code = lib . trs_vec_push ( self . _ptr , tr . ptr ) err_msg = \"Something went wrong when adding new transition\" check_ffi_error ( exit_code , err_msg ) len () -> int Compute the number of transitions in the list. Returns: Type Description int The number of transitions. Source code in rustfst/trs.py 45 46 47 48 49 50 51 52 53 54 55 56 def len ( self ) -> int : \"\"\" Compute the number of transitions in the list. Returns: The number of transitions. \"\"\" num_trs = c_size_t () ret_code = lib . trs_vec_len ( self . _ptr , byref ( num_trs )) err_msg = \"`len` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value )","title":"trs"},{"location":"rustfst/trs/#rustfst.trs-classes","text":"","title":"Classes"},{"location":"rustfst/trs/#rustfst.trs.Trs","text":"Structure representing list of transitions. Source code in rustfst/trs.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class Trs : \"\"\"Structure representing list of transitions.\"\"\" def __init__ ( self , ptr = None ) -> Trs : \"\"\" Create an empty list of transitions. \"\"\" if ptr is None : self . _ptr = c_void_p () exit_code = lib . trs_vec_new ( byref ( self . _ptr )) err_msg = \"Something went wrong when creating the Trs struct\" check_ffi_error ( exit_code , err_msg ) else : self . _ptr = ptr def push ( self , tr : Tr ): \"\"\" Add a new transition to the list. Args: tr: The transition to add. \"\"\" exit_code = lib . trs_vec_push ( self . _ptr , tr . ptr ) err_msg = \"Something went wrong when adding new transition\" check_ffi_error ( exit_code , err_msg ) def remove ( self , index : int ) -> Tr : removed_tr = c_void_p () exit_code = lib . trs_vec_remove ( self . _ptr , index , byref ( removed_tr )) err_msg = \"Something went wrong when removing transition at index: \" + str ( index ) check_ffi_error ( exit_code , err_msg ) return Tr ( removed_tr ) def len ( self ) -> int : \"\"\" Compute the number of transitions in the list. Returns: The number of transitions. \"\"\" num_trs = c_size_t () ret_code = lib . trs_vec_len ( self . _ptr , byref ( num_trs )) err_msg = \"`len` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value ) def shallow_clone ( self ) -> Trs : new_trs_ptr = c_void_p () exit_code = lib . trs_vec_shallow_clone ( self . _ptr , new_trs_ptr ) err_msg = \"Something went wrong when cloning Trs\" check_ffi_error ( exit_code , err_msg ) return Trs ( new_trs_ptr ) def __repr__ ( self ) -> str : string = c_void_p () exit_code = lib . trs_vec_display ( self . _ptr , byref ( string )) err_msg = \"Something went wrong when displaying Trs\" check_ffi_error ( exit_code , err_msg ) return string_at ( string ) . decode ( \"utf8\" ) def __del__ ( self ): lib . trs_vec_delete ( self . _ptr )","title":"Trs"},{"location":"rustfst/trs/#rustfst.trs.Trs-functions","text":"","title":"Functions"},{"location":"rustfst/trs/#rustfst.trs.Trs.__init__","text":"Create an empty list of transitions. Source code in rustfst/trs.py 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , ptr = None ) -> Trs : \"\"\" Create an empty list of transitions. \"\"\" if ptr is None : self . _ptr = c_void_p () exit_code = lib . trs_vec_new ( byref ( self . _ptr )) err_msg = \"Something went wrong when creating the Trs struct\" check_ffi_error ( exit_code , err_msg ) else : self . _ptr = ptr","title":"__init__()"},{"location":"rustfst/trs/#rustfst.trs.Trs.push","text":"Add a new transition to the list. Parameters: Name Type Description Default tr Tr The transition to add. required Source code in rustfst/trs.py 26 27 28 29 30 31 32 33 34 def push ( self , tr : Tr ): \"\"\" Add a new transition to the list. Args: tr: The transition to add. \"\"\" exit_code = lib . trs_vec_push ( self . _ptr , tr . ptr ) err_msg = \"Something went wrong when adding new transition\" check_ffi_error ( exit_code , err_msg )","title":"push()"},{"location":"rustfst/trs/#rustfst.trs.Trs.len","text":"Compute the number of transitions in the list. Returns: Type Description int The number of transitions. Source code in rustfst/trs.py 45 46 47 48 49 50 51 52 53 54 55 56 def len ( self ) -> int : \"\"\" Compute the number of transitions in the list. Returns: The number of transitions. \"\"\" num_trs = c_size_t () ret_code = lib . trs_vec_len ( self . _ptr , byref ( num_trs )) err_msg = \"`len` failed\" check_ffi_error ( ret_code , err_msg ) return int ( num_trs . value )","title":"len()"},{"location":"rustfst/weight/","text":"Functions weight_one () -> float Compute One() in the Tropical Semiring. Returns: Type Description float Float value corresponding to One() in the Tropical Semiring. Source code in rustfst/weight.py 8 9 10 11 12 13 14 15 16 17 18 def weight_one () -> float : \"\"\" Compute One() in the Tropical Semiring. Returns: Float value corresponding to One() in the Tropical Semiring. \"\"\" weight = ctypes . c_float () ret_code = lib . fst_weight_one ( ctypes . byref ( weight )) err_msg = \"weight_one failed\" check_ffi_error ( ret_code , err_msg ) return float ( weight . value ) weight_zero () -> float Compute Zero() in the Tropical Semiring. Returns: Type Description float Float value corresponding to Zero() in the Tropical Semiring. Source code in rustfst/weight.py 21 22 23 24 25 26 27 28 29 30 31 def weight_zero () -> float : \"\"\" Compute Zero() in the Tropical Semiring. Returns: Float value corresponding to Zero() in the Tropical Semiring. \"\"\" weight = ctypes . c_float () ret_code = lib . fst_weight_zero ( ctypes . byref ( weight )) err_msg = \"weight_zero failed\" check_ffi_error ( ret_code , err_msg ) return float ( weight . value )","title":"weight"},{"location":"rustfst/weight/#rustfst.weight-functions","text":"","title":"Functions"},{"location":"rustfst/weight/#rustfst.weight.weight_one","text":"Compute One() in the Tropical Semiring. Returns: Type Description float Float value corresponding to One() in the Tropical Semiring. Source code in rustfst/weight.py 8 9 10 11 12 13 14 15 16 17 18 def weight_one () -> float : \"\"\" Compute One() in the Tropical Semiring. Returns: Float value corresponding to One() in the Tropical Semiring. \"\"\" weight = ctypes . c_float () ret_code = lib . fst_weight_one ( ctypes . byref ( weight )) err_msg = \"weight_one failed\" check_ffi_error ( ret_code , err_msg ) return float ( weight . value )","title":"weight_one()"},{"location":"rustfst/weight/#rustfst.weight.weight_zero","text":"Compute Zero() in the Tropical Semiring. Returns: Type Description float Float value corresponding to Zero() in the Tropical Semiring. Source code in rustfst/weight.py 21 22 23 24 25 26 27 28 29 30 31 def weight_zero () -> float : \"\"\" Compute Zero() in the Tropical Semiring. Returns: Float value corresponding to Zero() in the Tropical Semiring. \"\"\" weight = ctypes . c_float () ret_code = lib . fst_weight_zero ( ctypes . byref ( weight )) err_msg = \"weight_zero failed\" check_ffi_error ( ret_code , err_msg ) return float ( weight . value )","title":"weight_zero()"}]}